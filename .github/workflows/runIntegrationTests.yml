name: Integration Tests Workflow

on:
  push:
    branches: [main, benchmarking-branch]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, benchmarking-branch]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Run Integration Tests
    runs-on:
      group: databricks-protected-runner-group
      labels: linux-ubuntu-latest
    environment: azure-prod
    strategy:
      matrix:
        include:
          - test-command: mvn -B compile test -Dtest=*IntegrationTests
            token-secret: DATABRICKS_TOKEN
            connection-info: SQL_EXEC
          - test-command: mvn -B compile test -Dtest=**/fakeservice/tests/MultiChunkExecutionIntegrationTests.java,**/fakeservice/tests/ConnectionIntegrationTests.java
            token-secret: THRIFT_DATABRICKS_TOKEN
            connection-info: THRIFT_SERVER
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: 'adopt'
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Create .pem file from secret
        run: |
          echo "${{ secrets.DATABRICKS_M2M_PEM }}" > /tmp/jdbc-testing-enc.pem
          chmod 600 /tmp/jdbc-testing-enc.pem
      - name: Run Integration Tests
        run: ${{ matrix.test-command }}
        env:
          DATABRICKS_TOKEN: ${{ secrets[matrix.token-secret] }}
          DATABRICKS_USER: ${{ secrets.DATABRICKS_USER }}
          CONNECTION_INFO: ${{ matrix.connection-info }}
          DATABRICKS_JDBC_M2M_CLIENT_ID: ${{ secrets.DATABRICKS_JDBC_M2M_CLIENT_ID }}
          DATABRICKS_JDBC_M2M_CLIENT_SECRET: ${{ secrets.DATABRICKS_JDBC_M2M_CLIENT_SECRET }}
          DATABRICKS_JDBC_M2M_HOST: ${{ secrets.DATABRICKS_JDBC_M2M_HOST }}
          DATABRICKS_JDBC_M2M_HTTP_PATH: ${{ secrets.DATABRICKS_JDBC_M2M_HTTP_PATH }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_CLIENT_ID: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_CLIENT_ID }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_TOKEN_ENDPOINT: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_TOKEN_ENDPOINT }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_AUTH_KID: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_AUTH_KID }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_JWT_KEY_PASSPHRASE: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_JWT_KEY_PASSPHRASE }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_CREDENTIALS_HTTP_PATH: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_CREDENTIALS_HTTP_PATH }}
          DATABRICKS_JDBC_M2M_PRIVATE_KEY_CREDENTIALS_HOST: ${{ secrets.DATABRICKS_JDBC_M2M_PRIVATE_KEY_CREDENTIALS_HOST }}
          DATABRICKS_PRE_SIGNED_URL_HOST: ${{ secrets.DATABRICKS_PRE_SIGNED_URL_HOST }}