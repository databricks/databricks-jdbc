name: Code Coverage

permissions:
  contents: read

on:
  pull_request:

jobs:
  coverage:
    runs-on:
        group: databricks-protected-runner-group
        labels: linux-ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for coverage comparison
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
        repository: ${{ github.event.pull_request.head.repo.full_name ||  github.repository }}
        
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'adopt'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
        
    - name: Run tests with coverage
      run: mvn clean test jacoco:report
      
    - name: Check for coverage override
      id: override
      run: |
        OVERRIDE_COMMENT=$(echo "${{ github.event.pull_request.body }}" | grep -E "SKIP_COVERAGE_CHECK\s*=" || echo "")
        if [ -n "$OVERRIDE_COMMENT" ]; then
          echo "override=true" >> $GITHUB_OUTPUT
          REASON=$(echo "$OVERRIDE_COMMENT" | sed -E 's/.*SKIP_COVERAGE_CHECK\s*=\s*(.+)/\1/')
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "Coverage override found in PR description: $REASON"
        else
          echo "override=false" >> $GITHUB_OUTPUT
          echo "No coverage override found"
        fi
      
    - name: Check coverage percentage
      if: steps.override.outputs.override == 'false'
      run: |
        COVERAGE_FILE="target/site/jacoco/jacoco.xml"
        if [ ! -f "$COVERAGE_FILE" ]; then
          echo "ERROR: Coverage file not found at $COVERAGE_FILE"
          exit 1
        fi
        
        # Install xmllint if not available
        if ! command -v xmllint &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y libxml2-utils
        fi
        
        COVERED=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" "$COVERAGE_FILE")
        MISSED=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" "$COVERAGE_FILE")
        TOTAL=$((COVERED + MISSED))
        
        # Use Python for floating-point math
        PERCENTAGE=$(python3 -c "covered=${COVERED}; total=${TOTAL}; print(round((covered/total)*100, 2))")
        
        echo "Branch Coverage: $PERCENTAGE%"
        echo "Required Coverage: 85%"
        
        # Use Python to compare the coverage with 85
        python3 -c "import sys; sys.exit(0 if float('$PERCENTAGE') >= 85 else 1)"
        if [ $? -eq 1 ]; then
          echo "ERROR: Coverage is $PERCENTAGE%, which is less than the required 85%"
          exit 1
        else
          echo "SUCCESS: Coverage is $PERCENTAGE%, which meets the required 85%"
        fi
        
    - name: Coverage enforcement summary
      run: |
        if [ "${{ steps.override.outputs.override }}" == "true" ]; then
          echo "⚠️ Coverage checks bypassed: ${{ steps.override.outputs.reason }}"
          echo "Please ensure this override is justified and temporary"
        else
          echo "✅ Coverage checks enforced - minimum 85% required"
        fi