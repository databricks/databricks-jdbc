/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.model.client.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-10-09")
public class TSparkGetDirectResults
    implements org.apache.thrift.TBase<TSparkGetDirectResults, TSparkGetDirectResults._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TSparkGetDirectResults> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TSparkGetDirectResults");

  private static final org.apache.thrift.protocol.TField MAX_ROWS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "maxRows", org.apache.thrift.protocol.TType.I64, (short) 1);
  private static final org.apache.thrift.protocol.TField MAX_BYTES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "maxBytes", org.apache.thrift.protocol.TType.I64, (short) 2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TSparkGetDirectResultsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TSparkGetDirectResultsTupleSchemeFactory();

  public long maxRows; // required
  public long maxBytes; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_ROWS((short) 1, "maxRows"),
    MAX_BYTES((short) 2, "maxBytes");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // MAX_ROWS
          return MAX_ROWS;
        case 2: // MAX_BYTES
          return MAX_BYTES;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXROWS_ISSET_ID = 0;
  private static final int __MAXBYTES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MAX_BYTES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.MAX_ROWS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "maxRows",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.MAX_BYTES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "maxBytes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TSparkGetDirectResults.class, metaDataMap);
  }

  public TSparkGetDirectResults() {}

  public TSparkGetDirectResults(long maxRows) {
    this();
    this.maxRows = maxRows;
    setMaxRowsIsSet(true);
  }

  /** Performs a deep copy on <i>other</i>. */
  public TSparkGetDirectResults(TSparkGetDirectResults other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxRows = other.maxRows;
    this.maxBytes = other.maxBytes;
  }

  @Override
  public TSparkGetDirectResults deepCopy() {
    return new TSparkGetDirectResults(this);
  }

  @Override
  public void clear() {
    setMaxRowsIsSet(false);
    this.maxRows = 0;
    setMaxBytesIsSet(false);
    this.maxBytes = 0;
  }

  public long getMaxRows() {
    return this.maxRows;
  }

  public TSparkGetDirectResults setMaxRows(long maxRows) {
    this.maxRows = maxRows;
    setMaxRowsIsSet(true);
    return this;
  }

  public void unsetMaxRows() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXROWS_ISSET_ID);
  }

  /** Returns true if field maxRows is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXROWS_ISSET_ID);
  }

  public void setMaxRowsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXROWS_ISSET_ID, value);
  }

  public long getMaxBytes() {
    return this.maxBytes;
  }

  public TSparkGetDirectResults setMaxBytes(long maxBytes) {
    this.maxBytes = maxBytes;
    setMaxBytesIsSet(true);
    return this;
  }

  public void unsetMaxBytes() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXBYTES_ISSET_ID);
  }

  /** Returns true if field maxBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXBYTES_ISSET_ID);
  }

  public void setMaxBytesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXBYTES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case MAX_ROWS:
        if (value == null) {
          unsetMaxRows();
        } else {
          setMaxRows((java.lang.Long) value);
        }
        break;

      case MAX_BYTES:
        if (value == null) {
          unsetMaxBytes();
        } else {
          setMaxBytes((java.lang.Long) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case MAX_ROWS:
        return getMaxRows();

      case MAX_BYTES:
        return getMaxBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case MAX_ROWS:
        return isSetMaxRows();
      case MAX_BYTES:
        return isSetMaxBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSparkGetDirectResults) return this.equals((TSparkGetDirectResults) that);
    return false;
  }

  public boolean equals(TSparkGetDirectResults that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_maxRows = true;
    boolean that_present_maxRows = true;
    if (this_present_maxRows || that_present_maxRows) {
      if (!(this_present_maxRows && that_present_maxRows)) return false;
      if (this.maxRows != that.maxRows) return false;
    }

    boolean this_present_maxBytes = true && this.isSetMaxBytes();
    boolean that_present_maxBytes = true && that.isSetMaxBytes();
    if (this_present_maxBytes || that_present_maxBytes) {
      if (!(this_present_maxBytes && that_present_maxBytes)) return false;
      if (this.maxBytes != that.maxBytes) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxRows);

    hashCode = hashCode * 8191 + ((isSetMaxBytes()) ? 131071 : 524287);
    if (isSetMaxBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxBytes);

    return hashCode;
  }

  @Override
  public int compareTo(TSparkGetDirectResults other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMaxRows(), other.isSetMaxRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRows, other.maxRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxBytes(), other.isSetMaxBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBytes, other.maxBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSparkGetDirectResults(");
    boolean first = true;

    sb.append("maxRows:");
    sb.append(this.maxRows);
    first = false;
    if (isSetMaxBytes()) {
      if (!first) sb.append(", ");
      sb.append("maxBytes:");
      sb.append(this.maxBytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'maxRows' because it's a primitive and you chose the non-beans
    // generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSparkGetDirectResultsStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkGetDirectResultsStandardScheme getScheme() {
      return new TSparkGetDirectResultsStandardScheme();
    }
  }

  private static class TSparkGetDirectResultsStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TSparkGetDirectResults> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSparkGetDirectResults struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxRows = iprot.readI64();
              struct.setMaxRowsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxBytes = iprot.readI64();
              struct.setMaxBytesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxRows()) {
        throw new org.apache.thrift.protocol.TProtocolException(
            "Required field 'maxRows' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSparkGetDirectResults struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_ROWS_FIELD_DESC);
      oprot.writeI64(struct.maxRows);
      oprot.writeFieldEnd();
      if (struct.isSetMaxBytes()) {
        oprot.writeFieldBegin(MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.maxBytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TSparkGetDirectResultsTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkGetDirectResultsTupleScheme getScheme() {
      return new TSparkGetDirectResultsTupleScheme();
    }
  }

  private static class TSparkGetDirectResultsTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TSparkGetDirectResults> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSparkGetDirectResults struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.maxRows);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMaxBytes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMaxBytes()) {
        oprot.writeI64(struct.maxBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSparkGetDirectResults struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.maxRows = iprot.readI64();
      struct.setMaxRowsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.maxBytes = iprot.readI64();
        struct.setMaxBytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
