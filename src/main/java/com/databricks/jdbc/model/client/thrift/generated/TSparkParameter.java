/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.model.client.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-10-09")
public class TSparkParameter
    implements org.apache.thrift.TBase<TSparkParameter, TSparkParameter._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TSparkParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TSparkParameter");

  private static final org.apache.thrift.protocol.TField ORDINAL_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "ordinal", org.apache.thrift.protocol.TType.I32, (short) 1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "name", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "type", org.apache.thrift.protocol.TType.STRING, (short) 3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "value", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
  private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "arguments", org.apache.thrift.protocol.TType.LIST, (short) 5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TSparkParameterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TSparkParameterTupleSchemeFactory();

  public int ordinal; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  public @org.apache.thrift.annotation.Nullable TSparkParameterValue value; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TSparkParameterValueArg>
      arguments; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDINAL((short) 1, "ordinal"),
    NAME((short) 2, "name"),
    TYPE((short) 3, "type"),
    VALUE((short) 4, "value"),
    ARGUMENTS((short) 5, "arguments");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // ORDINAL
          return ORDINAL;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // VALUE
          return VALUE;
        case 5: // ARGUMENTS
          return ARGUMENTS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDINAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.ORDINAL, _Fields.NAME, _Fields.TYPE, _Fields.VALUE, _Fields.ARGUMENTS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.ORDINAL,
        new org.apache.thrift.meta_data.FieldMetaData(
            "ordinal",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(
        _Fields.NAME,
        new org.apache.thrift.meta_data.FieldMetaData(
            "name",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.TYPE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "type",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.VALUE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "value",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSparkParameterValue.class)));
    tmpMap.put(
        _Fields.ARGUMENTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "arguments",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TSparkParameterValueArg.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TSparkParameter.class, metaDataMap);
  }

  public TSparkParameter() {}

  /** Performs a deep copy on <i>other</i>. */
  public TSparkParameter(TSparkParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ordinal = other.ordinal;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetValue()) {
      this.value = new TSparkParameterValue(other.value);
    }
    if (other.isSetArguments()) {
      java.util.List<TSparkParameterValueArg> __this__arguments =
          new java.util.ArrayList<TSparkParameterValueArg>(other.arguments.size());
      for (TSparkParameterValueArg other_element : other.arguments) {
        __this__arguments.add(new TSparkParameterValueArg(other_element));
      }
      this.arguments = __this__arguments;
    }
  }

  @Override
  public TSparkParameter deepCopy() {
    return new TSparkParameter(this);
  }

  @Override
  public void clear() {
    setOrdinalIsSet(false);
    this.ordinal = 0;
    this.name = null;
    this.type = null;
    this.value = null;
    this.arguments = null;
  }

  public int getOrdinal() {
    return this.ordinal;
  }

  public TSparkParameter setOrdinal(int ordinal) {
    this.ordinal = ordinal;
    setOrdinalIsSet(true);
    return this;
  }

  public void unsetOrdinal() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDINAL_ISSET_ID);
  }

  /** Returns true if field ordinal is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdinal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDINAL_ISSET_ID);
  }

  public void setOrdinalIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDINAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TSparkParameter setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public TSparkParameter setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSparkParameterValue getValue() {
    return this.value;
  }

  public TSparkParameter setValue(
      @org.apache.thrift.annotation.Nullable TSparkParameterValue value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public int getArgumentsSize() {
    return (this.arguments == null) ? 0 : this.arguments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSparkParameterValueArg> getArgumentsIterator() {
    return (this.arguments == null) ? null : this.arguments.iterator();
  }

  public void addToArguments(TSparkParameterValueArg elem) {
    if (this.arguments == null) {
      this.arguments = new java.util.ArrayList<TSparkParameterValueArg>();
    }
    this.arguments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSparkParameterValueArg> getArguments() {
    return this.arguments;
  }

  public TSparkParameter setArguments(
      @org.apache.thrift.annotation.Nullable java.util.List<TSparkParameterValueArg> arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case ORDINAL:
        if (value == null) {
          unsetOrdinal();
        } else {
          setOrdinal((java.lang.Integer) value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String) value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.String) value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((TSparkParameterValue) value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.List<TSparkParameterValueArg>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case ORDINAL:
        return getOrdinal();

      case NAME:
        return getName();

      case TYPE:
        return getType();

      case VALUE:
        return getValue();

      case ARGUMENTS:
        return getArguments();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case ORDINAL:
        return isSetOrdinal();
      case NAME:
        return isSetName();
      case TYPE:
        return isSetType();
      case VALUE:
        return isSetValue();
      case ARGUMENTS:
        return isSetArguments();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSparkParameter) return this.equals((TSparkParameter) that);
    return false;
  }

  public boolean equals(TSparkParameter that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_ordinal = true && this.isSetOrdinal();
    boolean that_present_ordinal = true && that.isSetOrdinal();
    if (this_present_ordinal || that_present_ordinal) {
      if (!(this_present_ordinal && that_present_ordinal)) return false;
      if (this.ordinal != that.ordinal) return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name)) return false;
      if (!this.name.equals(that.name)) return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type)) return false;
      if (!this.type.equals(that.type)) return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value)) return false;
      if (!this.value.equals(that.value)) return false;
    }

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments)) return false;
      if (!this.arguments.equals(that.arguments)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrdinal()) ? 131071 : 524287);
    if (isSetOrdinal()) hashCode = hashCode * 8191 + ordinal;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName()) hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType()) hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue()) hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
    if (isSetArguments()) hashCode = hashCode * 8191 + arguments.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSparkParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOrdinal(), other.isSetOrdinal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdinal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordinal, other.ordinal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArguments(), other.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArguments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSparkParameter(");
    boolean first = true;

    if (isSetOrdinal()) {
      sb.append("ordinal:");
      sb.append(this.ordinal);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetArguments()) {
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSparkParameterStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkParameterStandardScheme getScheme() {
      return new TSparkParameterStandardScheme();
    }
  }

  private static class TSparkParameterStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TSparkParameter> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSparkParameter struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordinal = iprot.readI32();
              struct.setOrdinalIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new TSparkParameterValue();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARGUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                struct.arguments = new java.util.ArrayList<TSparkParameterValueArg>(_list304.size);
                @org.apache.thrift.annotation.Nullable TSparkParameterValueArg _elem305;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306) {
                  _elem305 = new TSparkParameterValueArg();
                  _elem305.read(iprot);
                  struct.arguments.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.setArgumentsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSparkParameter struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOrdinal()) {
        oprot.writeFieldBegin(ORDINAL_FIELD_DESC);
        oprot.writeI32(struct.ordinal);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.arguments != null) {
        if (struct.isSetArguments()) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.arguments.size()));
            for (TSparkParameterValueArg _iter307 : struct.arguments) {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TSparkParameterTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkParameterTupleScheme getScheme() {
      return new TSparkParameterTupleScheme();
    }
  }

  private static class TSparkParameterTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TSparkParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSparkParameter struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrdinal()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetArguments()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrdinal()) {
        oprot.writeI32(struct.ordinal);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetValue()) {
        struct.value.write(oprot);
      }
      if (struct.isSetArguments()) {
        {
          oprot.writeI32(struct.arguments.size());
          for (TSparkParameterValueArg _iter308 : struct.arguments) {
            _iter308.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSparkParameter struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ordinal = iprot.readI32();
        struct.setOrdinalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = new TSparkParameterValue();
        struct.value.read(iprot);
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list309 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.arguments = new java.util.ArrayList<TSparkParameterValueArg>(_list309.size);
          @org.apache.thrift.annotation.Nullable TSparkParameterValueArg _elem310;
          for (int _i311 = 0; _i311 < _list309.size; ++_i311) {
            _elem310 = new TSparkParameterValueArg();
            _elem310.read(iprot);
            struct.arguments.add(_elem310);
          }
        }
        struct.setArgumentsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
