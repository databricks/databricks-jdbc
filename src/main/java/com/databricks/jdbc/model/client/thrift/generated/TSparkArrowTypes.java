/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.model.client.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2025-05-08")
public class TSparkArrowTypes
    implements org.apache.thrift.TBase<TSparkArrowTypes, TSparkArrowTypes._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TSparkArrowTypes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TSparkArrowTypes");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_AS_ARROW_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "timestampAsArrow", org.apache.thrift.protocol.TType.BOOL, (short) 1);
  private static final org.apache.thrift.protocol.TField DECIMAL_AS_ARROW_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "decimalAsArrow", org.apache.thrift.protocol.TType.BOOL, (short) 2);
  private static final org.apache.thrift.protocol.TField COMPLEX_TYPES_AS_ARROW_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "complexTypesAsArrow", org.apache.thrift.protocol.TType.BOOL, (short) 3);
  private static final org.apache.thrift.protocol.TField INTERVAL_TYPES_AS_ARROW_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "intervalTypesAsArrow", org.apache.thrift.protocol.TType.BOOL, (short) 4);
  private static final org.apache.thrift.protocol.TField NULL_TYPE_AS_ARROW_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "nullTypeAsArrow", org.apache.thrift.protocol.TType.BOOL, (short) 5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TSparkArrowTypesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TSparkArrowTypesTupleSchemeFactory();

  public boolean timestampAsArrow; // optional
  public boolean decimalAsArrow; // optional
  public boolean complexTypesAsArrow; // optional
  public boolean intervalTypesAsArrow; // optional
  public boolean nullTypeAsArrow; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP_AS_ARROW((short) 1, "timestampAsArrow"),
    DECIMAL_AS_ARROW((short) 2, "decimalAsArrow"),
    COMPLEX_TYPES_AS_ARROW((short) 3, "complexTypesAsArrow"),
    INTERVAL_TYPES_AS_ARROW((short) 4, "intervalTypesAsArrow"),
    NULL_TYPE_AS_ARROW((short) 5, "nullTypeAsArrow");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // TIMESTAMP_AS_ARROW
          return TIMESTAMP_AS_ARROW;
        case 2: // DECIMAL_AS_ARROW
          return DECIMAL_AS_ARROW;
        case 3: // COMPLEX_TYPES_AS_ARROW
          return COMPLEX_TYPES_AS_ARROW;
        case 4: // INTERVAL_TYPES_AS_ARROW
          return INTERVAL_TYPES_AS_ARROW;
        case 5: // NULL_TYPE_AS_ARROW
          return NULL_TYPE_AS_ARROW;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMPASARROW_ISSET_ID = 0;
  private static final int __DECIMALASARROW_ISSET_ID = 1;
  private static final int __COMPLEXTYPESASARROW_ISSET_ID = 2;
  private static final int __INTERVALTYPESASARROW_ISSET_ID = 3;
  private static final int __NULLTYPEASARROW_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.TIMESTAMP_AS_ARROW,
    _Fields.DECIMAL_AS_ARROW,
    _Fields.COMPLEX_TYPES_AS_ARROW,
    _Fields.INTERVAL_TYPES_AS_ARROW,
    _Fields.NULL_TYPE_AS_ARROW
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.TIMESTAMP_AS_ARROW,
        new org.apache.thrift.meta_data.FieldMetaData(
            "timestampAsArrow",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.DECIMAL_AS_ARROW,
        new org.apache.thrift.meta_data.FieldMetaData(
            "decimalAsArrow",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.COMPLEX_TYPES_AS_ARROW,
        new org.apache.thrift.meta_data.FieldMetaData(
            "complexTypesAsArrow",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.INTERVAL_TYPES_AS_ARROW,
        new org.apache.thrift.meta_data.FieldMetaData(
            "intervalTypesAsArrow",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.NULL_TYPE_AS_ARROW,
        new org.apache.thrift.meta_data.FieldMetaData(
            "nullTypeAsArrow",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TSparkArrowTypes.class, metaDataMap);
  }

  public TSparkArrowTypes() {}

  /** Performs a deep copy on <i>other</i>. */
  public TSparkArrowTypes(TSparkArrowTypes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestampAsArrow = other.timestampAsArrow;
    this.decimalAsArrow = other.decimalAsArrow;
    this.complexTypesAsArrow = other.complexTypesAsArrow;
    this.intervalTypesAsArrow = other.intervalTypesAsArrow;
    this.nullTypeAsArrow = other.nullTypeAsArrow;
  }

  @Override
  public TSparkArrowTypes deepCopy() {
    return new TSparkArrowTypes(this);
  }

  @Override
  public void clear() {
    setTimestampAsArrowIsSet(false);
    this.timestampAsArrow = false;
    setDecimalAsArrowIsSet(false);
    this.decimalAsArrow = false;
    setComplexTypesAsArrowIsSet(false);
    this.complexTypesAsArrow = false;
    setIntervalTypesAsArrowIsSet(false);
    this.intervalTypesAsArrow = false;
    setNullTypeAsArrowIsSet(false);
    this.nullTypeAsArrow = false;
  }

  public boolean isTimestampAsArrow() {
    return this.timestampAsArrow;
  }

  public TSparkArrowTypes setTimestampAsArrow(boolean timestampAsArrow) {
    this.timestampAsArrow = timestampAsArrow;
    setTimestampAsArrowIsSet(true);
    return this;
  }

  public void unsetTimestampAsArrow() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMPASARROW_ISSET_ID);
  }

  /**
   * Returns true if field timestampAsArrow is set (has been assigned a value) and false otherwise
   */
  public boolean isSetTimestampAsArrow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMPASARROW_ISSET_ID);
  }

  public void setTimestampAsArrowIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __TIMESTAMPASARROW_ISSET_ID, value);
  }

  public boolean isDecimalAsArrow() {
    return this.decimalAsArrow;
  }

  public TSparkArrowTypes setDecimalAsArrow(boolean decimalAsArrow) {
    this.decimalAsArrow = decimalAsArrow;
    setDecimalAsArrowIsSet(true);
    return this;
  }

  public void unsetDecimalAsArrow() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DECIMALASARROW_ISSET_ID);
  }

  /** Returns true if field decimalAsArrow is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimalAsArrow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DECIMALASARROW_ISSET_ID);
  }

  public void setDecimalAsArrowIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DECIMALASARROW_ISSET_ID, value);
  }

  public boolean isComplexTypesAsArrow() {
    return this.complexTypesAsArrow;
  }

  public TSparkArrowTypes setComplexTypesAsArrow(boolean complexTypesAsArrow) {
    this.complexTypesAsArrow = complexTypesAsArrow;
    setComplexTypesAsArrowIsSet(true);
    return this;
  }

  public void unsetComplexTypesAsArrow() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLEXTYPESASARROW_ISSET_ID);
  }

  /**
   * Returns true if field complexTypesAsArrow is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetComplexTypesAsArrow() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __COMPLEXTYPESASARROW_ISSET_ID);
  }

  public void setComplexTypesAsArrowIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __COMPLEXTYPESASARROW_ISSET_ID, value);
  }

  public boolean isIntervalTypesAsArrow() {
    return this.intervalTypesAsArrow;
  }

  public TSparkArrowTypes setIntervalTypesAsArrow(boolean intervalTypesAsArrow) {
    this.intervalTypesAsArrow = intervalTypesAsArrow;
    setIntervalTypesAsArrowIsSet(true);
    return this;
  }

  public void unsetIntervalTypesAsArrow() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVALTYPESASARROW_ISSET_ID);
  }

  /**
   * Returns true if field intervalTypesAsArrow is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetIntervalTypesAsArrow() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __INTERVALTYPESASARROW_ISSET_ID);
  }

  public void setIntervalTypesAsArrowIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __INTERVALTYPESASARROW_ISSET_ID, value);
  }

  public boolean isNullTypeAsArrow() {
    return this.nullTypeAsArrow;
  }

  public TSparkArrowTypes setNullTypeAsArrow(boolean nullTypeAsArrow) {
    this.nullTypeAsArrow = nullTypeAsArrow;
    setNullTypeAsArrowIsSet(true);
    return this;
  }

  public void unsetNullTypeAsArrow() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NULLTYPEASARROW_ISSET_ID);
  }

  /**
   * Returns true if field nullTypeAsArrow is set (has been assigned a value) and false otherwise
   */
  public boolean isSetNullTypeAsArrow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NULLTYPEASARROW_ISSET_ID);
  }

  public void setNullTypeAsArrowIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NULLTYPEASARROW_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case TIMESTAMP_AS_ARROW:
        if (value == null) {
          unsetTimestampAsArrow();
        } else {
          setTimestampAsArrow((java.lang.Boolean) value);
        }
        break;

      case DECIMAL_AS_ARROW:
        if (value == null) {
          unsetDecimalAsArrow();
        } else {
          setDecimalAsArrow((java.lang.Boolean) value);
        }
        break;

      case COMPLEX_TYPES_AS_ARROW:
        if (value == null) {
          unsetComplexTypesAsArrow();
        } else {
          setComplexTypesAsArrow((java.lang.Boolean) value);
        }
        break;

      case INTERVAL_TYPES_AS_ARROW:
        if (value == null) {
          unsetIntervalTypesAsArrow();
        } else {
          setIntervalTypesAsArrow((java.lang.Boolean) value);
        }
        break;

      case NULL_TYPE_AS_ARROW:
        if (value == null) {
          unsetNullTypeAsArrow();
        } else {
          setNullTypeAsArrow((java.lang.Boolean) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case TIMESTAMP_AS_ARROW:
        return isTimestampAsArrow();

      case DECIMAL_AS_ARROW:
        return isDecimalAsArrow();

      case COMPLEX_TYPES_AS_ARROW:
        return isComplexTypesAsArrow();

      case INTERVAL_TYPES_AS_ARROW:
        return isIntervalTypesAsArrow();

      case NULL_TYPE_AS_ARROW:
        return isNullTypeAsArrow();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case TIMESTAMP_AS_ARROW:
        return isSetTimestampAsArrow();
      case DECIMAL_AS_ARROW:
        return isSetDecimalAsArrow();
      case COMPLEX_TYPES_AS_ARROW:
        return isSetComplexTypesAsArrow();
      case INTERVAL_TYPES_AS_ARROW:
        return isSetIntervalTypesAsArrow();
      case NULL_TYPE_AS_ARROW:
        return isSetNullTypeAsArrow();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSparkArrowTypes) return this.equals((TSparkArrowTypes) that);
    return false;
  }

  public boolean equals(TSparkArrowTypes that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_timestampAsArrow = true && this.isSetTimestampAsArrow();
    boolean that_present_timestampAsArrow = true && that.isSetTimestampAsArrow();
    if (this_present_timestampAsArrow || that_present_timestampAsArrow) {
      if (!(this_present_timestampAsArrow && that_present_timestampAsArrow)) return false;
      if (this.timestampAsArrow != that.timestampAsArrow) return false;
    }

    boolean this_present_decimalAsArrow = true && this.isSetDecimalAsArrow();
    boolean that_present_decimalAsArrow = true && that.isSetDecimalAsArrow();
    if (this_present_decimalAsArrow || that_present_decimalAsArrow) {
      if (!(this_present_decimalAsArrow && that_present_decimalAsArrow)) return false;
      if (this.decimalAsArrow != that.decimalAsArrow) return false;
    }

    boolean this_present_complexTypesAsArrow = true && this.isSetComplexTypesAsArrow();
    boolean that_present_complexTypesAsArrow = true && that.isSetComplexTypesAsArrow();
    if (this_present_complexTypesAsArrow || that_present_complexTypesAsArrow) {
      if (!(this_present_complexTypesAsArrow && that_present_complexTypesAsArrow)) return false;
      if (this.complexTypesAsArrow != that.complexTypesAsArrow) return false;
    }

    boolean this_present_intervalTypesAsArrow = true && this.isSetIntervalTypesAsArrow();
    boolean that_present_intervalTypesAsArrow = true && that.isSetIntervalTypesAsArrow();
    if (this_present_intervalTypesAsArrow || that_present_intervalTypesAsArrow) {
      if (!(this_present_intervalTypesAsArrow && that_present_intervalTypesAsArrow)) return false;
      if (this.intervalTypesAsArrow != that.intervalTypesAsArrow) return false;
    }

    boolean this_present_nullTypeAsArrow = true && this.isSetNullTypeAsArrow();
    boolean that_present_nullTypeAsArrow = true && that.isSetNullTypeAsArrow();
    if (this_present_nullTypeAsArrow || that_present_nullTypeAsArrow) {
      if (!(this_present_nullTypeAsArrow && that_present_nullTypeAsArrow)) return false;
      if (this.nullTypeAsArrow != that.nullTypeAsArrow) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTimestampAsArrow()) ? 131071 : 524287);
    if (isSetTimestampAsArrow())
      hashCode = hashCode * 8191 + ((timestampAsArrow) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDecimalAsArrow()) ? 131071 : 524287);
    if (isSetDecimalAsArrow()) hashCode = hashCode * 8191 + ((decimalAsArrow) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetComplexTypesAsArrow()) ? 131071 : 524287);
    if (isSetComplexTypesAsArrow())
      hashCode = hashCode * 8191 + ((complexTypesAsArrow) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIntervalTypesAsArrow()) ? 131071 : 524287);
    if (isSetIntervalTypesAsArrow())
      hashCode = hashCode * 8191 + ((intervalTypesAsArrow) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNullTypeAsArrow()) ? 131071 : 524287);
    if (isSetNullTypeAsArrow()) hashCode = hashCode * 8191 + ((nullTypeAsArrow) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSparkArrowTypes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison =
        java.lang.Boolean.compare(isSetTimestampAsArrow(), other.isSetTimestampAsArrow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampAsArrow()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.timestampAsArrow, other.timestampAsArrow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecimalAsArrow(), other.isSetDecimalAsArrow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimalAsArrow()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.decimalAsArrow, other.decimalAsArrow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetComplexTypesAsArrow(), other.isSetComplexTypesAsArrow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplexTypesAsArrow()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.complexTypesAsArrow, other.complexTypesAsArrow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetIntervalTypesAsArrow(), other.isSetIntervalTypesAsArrow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntervalTypesAsArrow()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.intervalTypesAsArrow, other.intervalTypesAsArrow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetNullTypeAsArrow(), other.isSetNullTypeAsArrow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullTypeAsArrow()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.nullTypeAsArrow, other.nullTypeAsArrow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSparkArrowTypes(");
    boolean first = true;

    if (isSetTimestampAsArrow()) {
      sb.append("timestampAsArrow:");
      sb.append(this.timestampAsArrow);
      first = false;
    }
    if (isSetDecimalAsArrow()) {
      if (!first) sb.append(", ");
      sb.append("decimalAsArrow:");
      sb.append(this.decimalAsArrow);
      first = false;
    }
    if (isSetComplexTypesAsArrow()) {
      if (!first) sb.append(", ");
      sb.append("complexTypesAsArrow:");
      sb.append(this.complexTypesAsArrow);
      first = false;
    }
    if (isSetIntervalTypesAsArrow()) {
      if (!first) sb.append(", ");
      sb.append("intervalTypesAsArrow:");
      sb.append(this.intervalTypesAsArrow);
      first = false;
    }
    if (isSetNullTypeAsArrow()) {
      if (!first) sb.append(", ");
      sb.append("nullTypeAsArrow:");
      sb.append(this.nullTypeAsArrow);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSparkArrowTypesStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkArrowTypesStandardScheme getScheme() {
      return new TSparkArrowTypesStandardScheme();
    }
  }

  private static class TSparkArrowTypesStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TSparkArrowTypes> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSparkArrowTypes struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP_AS_ARROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.timestampAsArrow = iprot.readBool();
              struct.setTimestampAsArrowIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DECIMAL_AS_ARROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.decimalAsArrow = iprot.readBool();
              struct.setDecimalAsArrowIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLEX_TYPES_AS_ARROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.complexTypesAsArrow = iprot.readBool();
              struct.setComplexTypesAsArrowIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERVAL_TYPES_AS_ARROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.intervalTypesAsArrow = iprot.readBool();
              struct.setIntervalTypesAsArrowIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NULL_TYPE_AS_ARROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.nullTypeAsArrow = iprot.readBool();
              struct.setNullTypeAsArrowIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSparkArrowTypes struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTimestampAsArrow()) {
        oprot.writeFieldBegin(TIMESTAMP_AS_ARROW_FIELD_DESC);
        oprot.writeBool(struct.timestampAsArrow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDecimalAsArrow()) {
        oprot.writeFieldBegin(DECIMAL_AS_ARROW_FIELD_DESC);
        oprot.writeBool(struct.decimalAsArrow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComplexTypesAsArrow()) {
        oprot.writeFieldBegin(COMPLEX_TYPES_AS_ARROW_FIELD_DESC);
        oprot.writeBool(struct.complexTypesAsArrow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIntervalTypesAsArrow()) {
        oprot.writeFieldBegin(INTERVAL_TYPES_AS_ARROW_FIELD_DESC);
        oprot.writeBool(struct.intervalTypesAsArrow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNullTypeAsArrow()) {
        oprot.writeFieldBegin(NULL_TYPE_AS_ARROW_FIELD_DESC);
        oprot.writeBool(struct.nullTypeAsArrow);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TSparkArrowTypesTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSparkArrowTypesTupleScheme getScheme() {
      return new TSparkArrowTypesTupleScheme();
    }
  }

  private static class TSparkArrowTypesTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TSparkArrowTypes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSparkArrowTypes struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestampAsArrow()) {
        optionals.set(0);
      }
      if (struct.isSetDecimalAsArrow()) {
        optionals.set(1);
      }
      if (struct.isSetComplexTypesAsArrow()) {
        optionals.set(2);
      }
      if (struct.isSetIntervalTypesAsArrow()) {
        optionals.set(3);
      }
      if (struct.isSetNullTypeAsArrow()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTimestampAsArrow()) {
        oprot.writeBool(struct.timestampAsArrow);
      }
      if (struct.isSetDecimalAsArrow()) {
        oprot.writeBool(struct.decimalAsArrow);
      }
      if (struct.isSetComplexTypesAsArrow()) {
        oprot.writeBool(struct.complexTypesAsArrow);
      }
      if (struct.isSetIntervalTypesAsArrow()) {
        oprot.writeBool(struct.intervalTypesAsArrow);
      }
      if (struct.isSetNullTypeAsArrow()) {
        oprot.writeBool(struct.nullTypeAsArrow);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSparkArrowTypes struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.timestampAsArrow = iprot.readBool();
        struct.setTimestampAsArrowIsSet(true);
      }
      if (incoming.get(1)) {
        struct.decimalAsArrow = iprot.readBool();
        struct.setDecimalAsArrowIsSet(true);
      }
      if (incoming.get(2)) {
        struct.complexTypesAsArrow = iprot.readBool();
        struct.setComplexTypesAsArrowIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intervalTypesAsArrow = iprot.readBool();
        struct.setIntervalTypesAsArrowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nullTypeAsArrow = iprot.readBool();
        struct.setNullTypeAsArrowIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
