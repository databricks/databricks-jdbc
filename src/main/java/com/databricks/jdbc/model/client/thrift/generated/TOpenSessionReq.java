/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.model.client.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-10-09")
public class TOpenSessionReq
    implements org.apache.thrift.TBase<TOpenSessionReq, TOpenSessionReq._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TOpenSessionReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TOpenSessionReq");

  private static final org.apache.thrift.protocol.TField CLIENT_PROTOCOL_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "client_protocol", org.apache.thrift.protocol.TType.I32, (short) 1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "username", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "password", org.apache.thrift.protocol.TType.STRING, (short) 3);
  private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "configuration", org.apache.thrift.protocol.TType.MAP, (short) 4);
  private static final org.apache.thrift.protocol.TField GET_INFOS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "getInfos", org.apache.thrift.protocol.TType.LIST, (short) 1281);
  private static final org.apache.thrift.protocol.TField CLIENT_PROTOCOL_I64_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "client_protocol_i64", org.apache.thrift.protocol.TType.I64, (short) 1282);
  private static final org.apache.thrift.protocol.TField CONNECTION_PROPERTIES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "connectionProperties", org.apache.thrift.protocol.TType.MAP, (short) 1283);
  private static final org.apache.thrift.protocol.TField INITIAL_NAMESPACE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "initialNamespace", org.apache.thrift.protocol.TType.STRUCT, (short) 1284);
  private static final org.apache.thrift.protocol.TField CAN_USE_MULTIPLE_CATALOGS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "canUseMultipleCatalogs", org.apache.thrift.protocol.TType.BOOL, (short) 1285);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TOpenSessionReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TOpenSessionReqTupleSchemeFactory();

  /**
   * @see TProtocolVersion
   */
  public @org.apache.thrift.annotation.Nullable TProtocolVersion client_protocol; // optional

  public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      configuration; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TGetInfoType> getInfos; // optional
  public long client_protocol_i64; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      connectionProperties; // optional
  public @org.apache.thrift.annotation.Nullable TNamespace initialNamespace; // optional
  public boolean canUseMultipleCatalogs; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * @see TProtocolVersion
     */
    CLIENT_PROTOCOL((short) 1, "client_protocol"),
    USERNAME((short) 2, "username"),
    PASSWORD((short) 3, "password"),
    CONFIGURATION((short) 4, "configuration"),
    GET_INFOS((short) 1281, "getInfos"),
    CLIENT_PROTOCOL_I64((short) 1282, "client_protocol_i64"),
    CONNECTION_PROPERTIES((short) 1283, "connectionProperties"),
    INITIAL_NAMESPACE((short) 1284, "initialNamespace"),
    CAN_USE_MULTIPLE_CATALOGS((short) 1285, "canUseMultipleCatalogs");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // CLIENT_PROTOCOL
          return CLIENT_PROTOCOL;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // CONFIGURATION
          return CONFIGURATION;
        case 1281: // GET_INFOS
          return GET_INFOS;
        case 1282: // CLIENT_PROTOCOL_I64
          return CLIENT_PROTOCOL_I64;
        case 1283: // CONNECTION_PROPERTIES
          return CONNECTION_PROPERTIES;
        case 1284: // INITIAL_NAMESPACE
          return INITIAL_NAMESPACE;
        case 1285: // CAN_USE_MULTIPLE_CATALOGS
          return CAN_USE_MULTIPLE_CATALOGS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLIENT_PROTOCOL_I64_ISSET_ID = 0;
  private static final int __CANUSEMULTIPLECATALOGS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.CLIENT_PROTOCOL,
    _Fields.USERNAME,
    _Fields.PASSWORD,
    _Fields.CONFIGURATION,
    _Fields.GET_INFOS,
    _Fields.CLIENT_PROTOCOL_I64,
    _Fields.CONNECTION_PROPERTIES,
    _Fields.INITIAL_NAMESPACE,
    _Fields.CAN_USE_MULTIPLE_CATALOGS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.CLIENT_PROTOCOL,
        new org.apache.thrift.meta_data.FieldMetaData(
            "client_protocol",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TProtocolVersion.class)));
    tmpMap.put(
        _Fields.USERNAME,
        new org.apache.thrift.meta_data.FieldMetaData(
            "username",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.PASSWORD,
        new org.apache.thrift.meta_data.FieldMetaData(
            "password",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.CONFIGURATION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "configuration",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(
        _Fields.GET_INFOS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "getInfos",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.EnumMetaData(
                    org.apache.thrift.protocol.TType.ENUM, TGetInfoType.class))));
    tmpMap.put(
        _Fields.CLIENT_PROTOCOL_I64,
        new org.apache.thrift.meta_data.FieldMetaData(
            "client_protocol_i64",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.CONNECTION_PROPERTIES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "connectionProperties",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(
        _Fields.INITIAL_NAMESPACE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "initialNamespace",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TNamespace.class)));
    tmpMap.put(
        _Fields.CAN_USE_MULTIPLE_CATALOGS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "canUseMultipleCatalogs",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TOpenSessionReq.class, metaDataMap);
  }

  public TOpenSessionReq() {
    this.client_protocol =
        com.databricks.jdbc.model.client.thrift.generated.TProtocolVersion.__HIVE_JDBC_WORKAROUND;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TOpenSessionReq(TOpenSessionReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClient_protocol()) {
      this.client_protocol = other.client_protocol;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetConfiguration()) {
      java.util.Map<java.lang.String, java.lang.String> __this__configuration =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.configuration);
      this.configuration = __this__configuration;
    }
    if (other.isSetGetInfos()) {
      java.util.List<TGetInfoType> __this__getInfos =
          new java.util.ArrayList<TGetInfoType>(other.getInfos.size());
      for (TGetInfoType other_element : other.getInfos) {
        __this__getInfos.add(other_element);
      }
      this.getInfos = __this__getInfos;
    }
    this.client_protocol_i64 = other.client_protocol_i64;
    if (other.isSetConnectionProperties()) {
      java.util.Map<java.lang.String, java.lang.String> __this__connectionProperties =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.connectionProperties);
      this.connectionProperties = __this__connectionProperties;
    }
    if (other.isSetInitialNamespace()) {
      this.initialNamespace = new TNamespace(other.initialNamespace);
    }
    this.canUseMultipleCatalogs = other.canUseMultipleCatalogs;
  }

  @Override
  public TOpenSessionReq deepCopy() {
    return new TOpenSessionReq(this);
  }

  @Override
  public void clear() {
    this.client_protocol =
        com.databricks.jdbc.model.client.thrift.generated.TProtocolVersion.__HIVE_JDBC_WORKAROUND;

    this.username = null;
    this.password = null;
    this.configuration = null;
    this.getInfos = null;
    setClient_protocol_i64IsSet(false);
    this.client_protocol_i64 = 0;
    this.connectionProperties = null;
    this.initialNamespace = null;
    setCanUseMultipleCatalogsIsSet(false);
    this.canUseMultipleCatalogs = false;
  }

  /**
   * @see TProtocolVersion
   */
  @org.apache.thrift.annotation.Nullable
  public TProtocolVersion getClient_protocol() {
    return this.client_protocol;
  }

  /**
   * @see TProtocolVersion
   */
  public TOpenSessionReq setClient_protocol(
      @org.apache.thrift.annotation.Nullable TProtocolVersion client_protocol) {
    this.client_protocol = client_protocol;
    return this;
  }

  public void unsetClient_protocol() {
    this.client_protocol = null;
  }

  /**
   * Returns true if field client_protocol is set (has been assigned a value) and false otherwise
   */
  public boolean isSetClient_protocol() {
    return this.client_protocol != null;
  }

  public void setClient_protocolIsSet(boolean value) {
    if (!value) {
      this.client_protocol = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public TOpenSessionReq setUsername(
      @org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public TOpenSessionReq setPassword(
      @org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getConfigurationSize() {
    return (this.configuration == null) ? 0 : this.configuration.size();
  }

  public void putToConfiguration(java.lang.String key, java.lang.String val) {
    if (this.configuration == null) {
      this.configuration = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.configuration.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getConfiguration() {
    return this.configuration;
  }

  public TOpenSessionReq setConfiguration(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> configuration) {
    this.configuration = configuration;
    return this;
  }

  public void unsetConfiguration() {
    this.configuration = null;
  }

  /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetConfiguration() {
    return this.configuration != null;
  }

  public void setConfigurationIsSet(boolean value) {
    if (!value) {
      this.configuration = null;
    }
  }

  public int getGetInfosSize() {
    return (this.getInfos == null) ? 0 : this.getInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TGetInfoType> getGetInfosIterator() {
    return (this.getInfos == null) ? null : this.getInfos.iterator();
  }

  public void addToGetInfos(TGetInfoType elem) {
    if (this.getInfos == null) {
      this.getInfos = new java.util.ArrayList<TGetInfoType>();
    }
    this.getInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TGetInfoType> getGetInfos() {
    return this.getInfos;
  }

  public TOpenSessionReq setGetInfos(
      @org.apache.thrift.annotation.Nullable java.util.List<TGetInfoType> getInfos) {
    this.getInfos = getInfos;
    return this;
  }

  public void unsetGetInfos() {
    this.getInfos = null;
  }

  /** Returns true if field getInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetGetInfos() {
    return this.getInfos != null;
  }

  public void setGetInfosIsSet(boolean value) {
    if (!value) {
      this.getInfos = null;
    }
  }

  public long getClient_protocol_i64() {
    return this.client_protocol_i64;
  }

  public TOpenSessionReq setClient_protocol_i64(long client_protocol_i64) {
    this.client_protocol_i64 = client_protocol_i64;
    setClient_protocol_i64IsSet(true);
    return this;
  }

  public void unsetClient_protocol_i64() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID);
  }

  /**
   * Returns true if field client_protocol_i64 is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetClient_protocol_i64() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID);
  }

  public void setClient_protocol_i64IsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID, value);
  }

  public int getConnectionPropertiesSize() {
    return (this.connectionProperties == null) ? 0 : this.connectionProperties.size();
  }

  public void putToConnectionProperties(java.lang.String key, java.lang.String val) {
    if (this.connectionProperties == null) {
      this.connectionProperties = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.connectionProperties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getConnectionProperties() {
    return this.connectionProperties;
  }

  public TOpenSessionReq setConnectionProperties(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

  public void unsetConnectionProperties() {
    this.connectionProperties = null;
  }

  /**
   * Returns true if field connectionProperties is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetConnectionProperties() {
    return this.connectionProperties != null;
  }

  public void setConnectionPropertiesIsSet(boolean value) {
    if (!value) {
      this.connectionProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNamespace getInitialNamespace() {
    return this.initialNamespace;
  }

  public TOpenSessionReq setInitialNamespace(
      @org.apache.thrift.annotation.Nullable TNamespace initialNamespace) {
    this.initialNamespace = initialNamespace;
    return this;
  }

  public void unsetInitialNamespace() {
    this.initialNamespace = null;
  }

  /**
   * Returns true if field initialNamespace is set (has been assigned a value) and false otherwise
   */
  public boolean isSetInitialNamespace() {
    return this.initialNamespace != null;
  }

  public void setInitialNamespaceIsSet(boolean value) {
    if (!value) {
      this.initialNamespace = null;
    }
  }

  public boolean isCanUseMultipleCatalogs() {
    return this.canUseMultipleCatalogs;
  }

  public TOpenSessionReq setCanUseMultipleCatalogs(boolean canUseMultipleCatalogs) {
    this.canUseMultipleCatalogs = canUseMultipleCatalogs;
    setCanUseMultipleCatalogsIsSet(true);
    return this;
  }

  public void unsetCanUseMultipleCatalogs() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID);
  }

  /**
   * Returns true if field canUseMultipleCatalogs is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetCanUseMultipleCatalogs() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID);
  }

  public void setCanUseMultipleCatalogsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case CLIENT_PROTOCOL:
        if (value == null) {
          unsetClient_protocol();
        } else {
          setClient_protocol((TProtocolVersion) value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String) value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String) value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;

      case GET_INFOS:
        if (value == null) {
          unsetGetInfos();
        } else {
          setGetInfos((java.util.List<TGetInfoType>) value);
        }
        break;

      case CLIENT_PROTOCOL_I64:
        if (value == null) {
          unsetClient_protocol_i64();
        } else {
          setClient_protocol_i64((java.lang.Long) value);
        }
        break;

      case CONNECTION_PROPERTIES:
        if (value == null) {
          unsetConnectionProperties();
        } else {
          setConnectionProperties((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;

      case INITIAL_NAMESPACE:
        if (value == null) {
          unsetInitialNamespace();
        } else {
          setInitialNamespace((TNamespace) value);
        }
        break;

      case CAN_USE_MULTIPLE_CATALOGS:
        if (value == null) {
          unsetCanUseMultipleCatalogs();
        } else {
          setCanUseMultipleCatalogs((java.lang.Boolean) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case CLIENT_PROTOCOL:
        return getClient_protocol();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case CONFIGURATION:
        return getConfiguration();

      case GET_INFOS:
        return getGetInfos();

      case CLIENT_PROTOCOL_I64:
        return getClient_protocol_i64();

      case CONNECTION_PROPERTIES:
        return getConnectionProperties();

      case INITIAL_NAMESPACE:
        return getInitialNamespace();

      case CAN_USE_MULTIPLE_CATALOGS:
        return isCanUseMultipleCatalogs();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case CLIENT_PROTOCOL:
        return isSetClient_protocol();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case CONFIGURATION:
        return isSetConfiguration();
      case GET_INFOS:
        return isSetGetInfos();
      case CLIENT_PROTOCOL_I64:
        return isSetClient_protocol_i64();
      case CONNECTION_PROPERTIES:
        return isSetConnectionProperties();
      case INITIAL_NAMESPACE:
        return isSetInitialNamespace();
      case CAN_USE_MULTIPLE_CATALOGS:
        return isSetCanUseMultipleCatalogs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOpenSessionReq) return this.equals((TOpenSessionReq) that);
    return false;
  }

  public boolean equals(TOpenSessionReq that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_client_protocol = true && this.isSetClient_protocol();
    boolean that_present_client_protocol = true && that.isSetClient_protocol();
    if (this_present_client_protocol || that_present_client_protocol) {
      if (!(this_present_client_protocol && that_present_client_protocol)) return false;
      if (!this.client_protocol.equals(that.client_protocol)) return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username)) return false;
      if (!this.username.equals(that.username)) return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password)) return false;
      if (!this.password.equals(that.password)) return false;
    }

    boolean this_present_configuration = true && this.isSetConfiguration();
    boolean that_present_configuration = true && that.isSetConfiguration();
    if (this_present_configuration || that_present_configuration) {
      if (!(this_present_configuration && that_present_configuration)) return false;
      if (!this.configuration.equals(that.configuration)) return false;
    }

    boolean this_present_getInfos = true && this.isSetGetInfos();
    boolean that_present_getInfos = true && that.isSetGetInfos();
    if (this_present_getInfos || that_present_getInfos) {
      if (!(this_present_getInfos && that_present_getInfos)) return false;
      if (!this.getInfos.equals(that.getInfos)) return false;
    }

    boolean this_present_client_protocol_i64 = true && this.isSetClient_protocol_i64();
    boolean that_present_client_protocol_i64 = true && that.isSetClient_protocol_i64();
    if (this_present_client_protocol_i64 || that_present_client_protocol_i64) {
      if (!(this_present_client_protocol_i64 && that_present_client_protocol_i64)) return false;
      if (this.client_protocol_i64 != that.client_protocol_i64) return false;
    }

    boolean this_present_connectionProperties = true && this.isSetConnectionProperties();
    boolean that_present_connectionProperties = true && that.isSetConnectionProperties();
    if (this_present_connectionProperties || that_present_connectionProperties) {
      if (!(this_present_connectionProperties && that_present_connectionProperties)) return false;
      if (!this.connectionProperties.equals(that.connectionProperties)) return false;
    }

    boolean this_present_initialNamespace = true && this.isSetInitialNamespace();
    boolean that_present_initialNamespace = true && that.isSetInitialNamespace();
    if (this_present_initialNamespace || that_present_initialNamespace) {
      if (!(this_present_initialNamespace && that_present_initialNamespace)) return false;
      if (!this.initialNamespace.equals(that.initialNamespace)) return false;
    }

    boolean this_present_canUseMultipleCatalogs = true && this.isSetCanUseMultipleCatalogs();
    boolean that_present_canUseMultipleCatalogs = true && that.isSetCanUseMultipleCatalogs();
    if (this_present_canUseMultipleCatalogs || that_present_canUseMultipleCatalogs) {
      if (!(this_present_canUseMultipleCatalogs && that_present_canUseMultipleCatalogs))
        return false;
      if (this.canUseMultipleCatalogs != that.canUseMultipleCatalogs) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClient_protocol()) ? 131071 : 524287);
    if (isSetClient_protocol()) hashCode = hashCode * 8191 + client_protocol.getValue();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername()) hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword()) hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfiguration()) ? 131071 : 524287);
    if (isSetConfiguration()) hashCode = hashCode * 8191 + configuration.hashCode();

    hashCode = hashCode * 8191 + ((isSetGetInfos()) ? 131071 : 524287);
    if (isSetGetInfos()) hashCode = hashCode * 8191 + getInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetClient_protocol_i64()) ? 131071 : 524287);
    if (isSetClient_protocol_i64())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(client_protocol_i64);

    hashCode = hashCode * 8191 + ((isSetConnectionProperties()) ? 131071 : 524287);
    if (isSetConnectionProperties()) hashCode = hashCode * 8191 + connectionProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetInitialNamespace()) ? 131071 : 524287);
    if (isSetInitialNamespace()) hashCode = hashCode * 8191 + initialNamespace.hashCode();

    hashCode = hashCode * 8191 + ((isSetCanUseMultipleCatalogs()) ? 131071 : 524287);
    if (isSetCanUseMultipleCatalogs())
      hashCode = hashCode * 8191 + ((canUseMultipleCatalogs) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TOpenSessionReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison =
        java.lang.Boolean.compare(isSetClient_protocol(), other.isSetClient_protocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_protocol()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.client_protocol, other.client_protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConfiguration(), other.isSetConfiguration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfiguration()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGetInfos(), other.isSetGetInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getInfos, other.getInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetClient_protocol_i64(), other.isSetClient_protocol_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_protocol_i64()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.client_protocol_i64, other.client_protocol_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetConnectionProperties(), other.isSetConnectionProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionProperties()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.connectionProperties, other.connectionProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetInitialNamespace(), other.isSetInitialNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialNamespace()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.initialNamespace, other.initialNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetCanUseMultipleCatalogs(), other.isSetCanUseMultipleCatalogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanUseMultipleCatalogs()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.canUseMultipleCatalogs, other.canUseMultipleCatalogs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOpenSessionReq(");
    boolean first = true;

    if (isSetClient_protocol()) {
      sb.append("client_protocol:");
      if (this.client_protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.client_protocol);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetConfiguration()) {
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
    }
    if (isSetGetInfos()) {
      if (!first) sb.append(", ");
      sb.append("getInfos:");
      if (this.getInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.getInfos);
      }
      first = false;
    }
    if (isSetClient_protocol_i64()) {
      if (!first) sb.append(", ");
      sb.append("client_protocol_i64:");
      sb.append(this.client_protocol_i64);
      first = false;
    }
    if (isSetConnectionProperties()) {
      if (!first) sb.append(", ");
      sb.append("connectionProperties:");
      if (this.connectionProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.connectionProperties);
      }
      first = false;
    }
    if (isSetInitialNamespace()) {
      if (!first) sb.append(", ");
      sb.append("initialNamespace:");
      if (this.initialNamespace == null) {
        sb.append("null");
      } else {
        sb.append(this.initialNamespace);
      }
      first = false;
    }
    if (isSetCanUseMultipleCatalogs()) {
      if (!first) sb.append(", ");
      sb.append("canUseMultipleCatalogs:");
      sb.append(this.canUseMultipleCatalogs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (initialNamespace != null) {
      initialNamespace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOpenSessionReqStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOpenSessionReqStandardScheme getScheme() {
      return new TOpenSessionReqStandardScheme();
    }
  }

  private static class TOpenSessionReqStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TOpenSessionReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOpenSessionReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.client_protocol =
                  com.databricks.jdbc.model.client.thrift.generated.TProtocolVersion.findByValue(
                      iprot.readI32());
              struct.setClient_protocolIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map232 = iprot.readMapBegin();
                struct.configuration =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map232.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key233;
                @org.apache.thrift.annotation.Nullable java.lang.String _val234;
                for (int _i235 = 0; _i235 < _map232.size; ++_i235) {
                  _key233 = iprot.readString();
                  _val234 = iprot.readString();
                  struct.configuration.put(_key233, _val234);
                }
                iprot.readMapEnd();
              }
              struct.setConfigurationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // GET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                struct.getInfos = new java.util.ArrayList<TGetInfoType>(_list236.size);
                @org.apache.thrift.annotation.Nullable TGetInfoType _elem237;
                for (int _i238 = 0; _i238 < _list236.size; ++_i238) {
                  _elem237 =
                      com.databricks.jdbc.model.client.thrift.generated.TGetInfoType.findByValue(
                          iprot.readI32());
                  if (_elem237 != null) {
                    struct.getInfos.add(_elem237);
                  }
                }
                iprot.readListEnd();
              }
              struct.setGetInfosIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1282: // CLIENT_PROTOCOL_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.client_protocol_i64 = iprot.readI64();
              struct.setClient_protocol_i64IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1283: // CONNECTION_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map239 = iprot.readMapBegin();
                struct.connectionProperties =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map239.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key240;
                @org.apache.thrift.annotation.Nullable java.lang.String _val241;
                for (int _i242 = 0; _i242 < _map239.size; ++_i242) {
                  _key240 = iprot.readString();
                  _val241 = iprot.readString();
                  struct.connectionProperties.put(_key240, _val241);
                }
                iprot.readMapEnd();
              }
              struct.setConnectionPropertiesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1284: // INITIAL_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.initialNamespace = new TNamespace();
              struct.initialNamespace.read(iprot);
              struct.setInitialNamespaceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1285: // CAN_USE_MULTIPLE_CATALOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canUseMultipleCatalogs = iprot.readBool();
              struct.setCanUseMultipleCatalogsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOpenSessionReq struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.client_protocol != null) {
        if (struct.isSetClient_protocol()) {
          oprot.writeFieldBegin(CLIENT_PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.client_protocol.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.configuration != null) {
        if (struct.isSetConfiguration()) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.configuration.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter243 :
                struct.configuration.entrySet()) {
              oprot.writeString(_iter243.getKey());
              oprot.writeString(_iter243.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.getInfos != null) {
        if (struct.isSetGetInfos()) {
          oprot.writeFieldBegin(GET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.I32, struct.getInfos.size()));
            for (TGetInfoType _iter244 : struct.getInfos) {
              oprot.writeI32(_iter244.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClient_protocol_i64()) {
        oprot.writeFieldBegin(CLIENT_PROTOCOL_I64_FIELD_DESC);
        oprot.writeI64(struct.client_protocol_i64);
        oprot.writeFieldEnd();
      }
      if (struct.connectionProperties != null) {
        if (struct.isSetConnectionProperties()) {
          oprot.writeFieldBegin(CONNECTION_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.connectionProperties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter245 :
                struct.connectionProperties.entrySet()) {
              oprot.writeString(_iter245.getKey());
              oprot.writeString(_iter245.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.initialNamespace != null) {
        if (struct.isSetInitialNamespace()) {
          oprot.writeFieldBegin(INITIAL_NAMESPACE_FIELD_DESC);
          struct.initialNamespace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        oprot.writeFieldBegin(CAN_USE_MULTIPLE_CATALOGS_FIELD_DESC);
        oprot.writeBool(struct.canUseMultipleCatalogs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TOpenSessionReqTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOpenSessionReqTupleScheme getScheme() {
      return new TOpenSessionReqTupleScheme();
    }
  }

  private static class TOpenSessionReqTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TOpenSessionReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOpenSessionReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClient_protocol()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetConfiguration()) {
        optionals.set(3);
      }
      if (struct.isSetGetInfos()) {
        optionals.set(4);
      }
      if (struct.isSetClient_protocol_i64()) {
        optionals.set(5);
      }
      if (struct.isSetConnectionProperties()) {
        optionals.set(6);
      }
      if (struct.isSetInitialNamespace()) {
        optionals.set(7);
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetClient_protocol()) {
        oprot.writeI32(struct.client_protocol.getValue());
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetConfiguration()) {
        {
          oprot.writeI32(struct.configuration.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter246 :
              struct.configuration.entrySet()) {
            oprot.writeString(_iter246.getKey());
            oprot.writeString(_iter246.getValue());
          }
        }
      }
      if (struct.isSetGetInfos()) {
        {
          oprot.writeI32(struct.getInfos.size());
          for (TGetInfoType _iter247 : struct.getInfos) {
            oprot.writeI32(_iter247.getValue());
          }
        }
      }
      if (struct.isSetClient_protocol_i64()) {
        oprot.writeI64(struct.client_protocol_i64);
      }
      if (struct.isSetConnectionProperties()) {
        {
          oprot.writeI32(struct.connectionProperties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter248 :
              struct.connectionProperties.entrySet()) {
            oprot.writeString(_iter248.getKey());
            oprot.writeString(_iter248.getValue());
          }
        }
      }
      if (struct.isSetInitialNamespace()) {
        struct.initialNamespace.write(oprot);
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        oprot.writeBool(struct.canUseMultipleCatalogs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOpenSessionReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.client_protocol =
            com.databricks.jdbc.model.client.thrift.generated.TProtocolVersion.findByValue(
                iprot.readI32());
        struct.setClient_protocolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map249 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.configuration =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map249.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key250;
          @org.apache.thrift.annotation.Nullable java.lang.String _val251;
          for (int _i252 = 0; _i252 < _map249.size; ++_i252) {
            _key250 = iprot.readString();
            _val251 = iprot.readString();
            struct.configuration.put(_key250, _val251);
          }
        }
        struct.setConfigurationIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list253 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.getInfos = new java.util.ArrayList<TGetInfoType>(_list253.size);
          @org.apache.thrift.annotation.Nullable TGetInfoType _elem254;
          for (int _i255 = 0; _i255 < _list253.size; ++_i255) {
            _elem254 =
                com.databricks.jdbc.model.client.thrift.generated.TGetInfoType.findByValue(
                    iprot.readI32());
            if (_elem254 != null) {
              struct.getInfos.add(_elem254);
            }
          }
        }
        struct.setGetInfosIsSet(true);
      }
      if (incoming.get(5)) {
        struct.client_protocol_i64 = iprot.readI64();
        struct.setClient_protocol_i64IsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map256 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.connectionProperties =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map256.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key257;
          @org.apache.thrift.annotation.Nullable java.lang.String _val258;
          for (int _i259 = 0; _i259 < _map256.size; ++_i259) {
            _key257 = iprot.readString();
            _val258 = iprot.readString();
            struct.connectionProperties.put(_key257, _val258);
          }
        }
        struct.setConnectionPropertiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.initialNamespace = new TNamespace();
        struct.initialNamespace.read(iprot);
        struct.setInitialNamespaceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.canUseMultipleCatalogs = iprot.readBool();
        struct.setCanUseMultipleCatalogsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
