/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.model.client.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-05-06")
public class TSparkParameterValue
    extends org.apache.thrift.TUnion<TSparkParameterValue, TSparkParameterValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TSparkParameterValue");
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "stringValue", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short) 2);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "booleanValue", org.apache.thrift.protocol.TType.BOOL, (short) 3);

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VALUE((short) 1, "stringValue"),
    DOUBLE_VALUE((short) 2, "doubleValue"),
    BOOLEAN_VALUE((short) 3, "booleanValue");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // STRING_VALUE
          return STRING_VALUE;
        case 2: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 3: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.STRING_VALUE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "stringValue",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.DOUBLE_VALUE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "doubleValue",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.BOOLEAN_VALUE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "booleanValue",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TSparkParameterValue.class, metaDataMap);
  }

  public TSparkParameterValue() {
    super();
  }

  public TSparkParameterValue(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TSparkParameterValue(TSparkParameterValue other) {
    super(other);
  }

  @Override
  public TSparkParameterValue deepCopy() {
    return new TSparkParameterValue(this);
  }

  public static TSparkParameterValue stringValue(java.lang.String value) {
    TSparkParameterValue x = new TSparkParameterValue();
    x.setStringValue(value);
    return x;
  }

  public static TSparkParameterValue doubleValue(double value) {
    TSparkParameterValue x = new TSparkParameterValue();
    x.setDoubleValue(value);
    return x;
  }

  public static TSparkParameterValue booleanValue(boolean value) {
    TSparkParameterValue x = new TSparkParameterValue();
    x.setBooleanValue(value);
    return x;
  }

  @Override
  protected void checkType(_Fields setField, java.lang.Object value)
      throws java.lang.ClassCastException {
    switch (setField) {
      case STRING_VALUE:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException(
            "Was expecting value of type java.lang.String for field 'stringValue', but got "
                + value.getClass().getSimpleName());
      case DOUBLE_VALUE:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException(
            "Was expecting value of type java.lang.Double for field 'doubleValue', but got "
                + value.getClass().getSimpleName());
      case BOOLEAN_VALUE:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException(
            "Was expecting value of type java.lang.Boolean for field 'booleanValue', but got "
                + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(
      org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field)
      throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STRING_VALUE:
          if (field.type == STRING_VALUE_FIELD_DESC.type) {
            java.lang.String stringValue;
            stringValue = iprot.readString();
            return stringValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VALUE:
          if (field.type == DOUBLE_VALUE_FIELD_DESC.type) {
            java.lang.Double doubleValue;
            doubleValue = iprot.readDouble();
            return doubleValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOLEAN_VALUE:
          if (field.type == BOOLEAN_VALUE_FIELD_DESC.type) {
            java.lang.Boolean booleanValue;
            booleanValue = iprot.readBool();
            return booleanValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException(
              "setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String) value_;
        oprot.writeString(stringValue);
        return;
      case DOUBLE_VALUE:
        java.lang.Double doubleValue = (java.lang.Double) value_;
        oprot.writeDouble(doubleValue);
        return;
      case BOOLEAN_VALUE:
        java.lang.Boolean booleanValue = (java.lang.Boolean) value_;
        oprot.writeBool(booleanValue);
        return;
      default:
        throw new java.lang.IllegalStateException(
            "Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(
      org.apache.thrift.protocol.TProtocol iprot, short fieldID)
      throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STRING_VALUE:
          java.lang.String stringValue;
          stringValue = iprot.readString();
          return stringValue;
        case DOUBLE_VALUE:
          java.lang.Double doubleValue;
          doubleValue = iprot.readDouble();
          return doubleValue;
        case BOOLEAN_VALUE:
          java.lang.Boolean booleanValue;
          booleanValue = iprot.readBool();
          return booleanValue;
        default:
          throw new java.lang.IllegalStateException(
              "setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String) value_;
        oprot.writeString(stringValue);
        return;
      case DOUBLE_VALUE:
        java.lang.Double doubleValue = (java.lang.Double) value_;
        oprot.writeDouble(doubleValue);
        return;
      case BOOLEAN_VALUE:
        java.lang.Boolean booleanValue = (java.lang.Boolean) value_;
        oprot.writeBool(booleanValue);
        return;
      default:
        throw new java.lang.IllegalStateException(
            "Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STRING_VALUE:
        return STRING_VALUE_FIELD_DESC;
      case DOUBLE_VALUE:
        return DOUBLE_VALUE_FIELD_DESC;
      case BOOLEAN_VALUE:
        return BOOLEAN_VALUE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public java.lang.String getStringValue() {
    if (getSetField() == _Fields.STRING_VALUE) {
      return (java.lang.String) getFieldValue();
    } else {
      throw new java.lang.RuntimeException(
          "Cannot get field 'stringValue' because union is currently set to "
              + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringValue(java.lang.String value) {
    setField_ = _Fields.STRING_VALUE;
    value_ = java.util.Objects.requireNonNull(value, "_Fields.STRING_VALUE");
  }

  public double getDoubleValue() {
    if (getSetField() == _Fields.DOUBLE_VALUE) {
      return (java.lang.Double) getFieldValue();
    } else {
      throw new java.lang.RuntimeException(
          "Cannot get field 'doubleValue' because union is currently set to "
              + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleValue(double value) {
    setField_ = _Fields.DOUBLE_VALUE;
    value_ = value;
  }

  public boolean getBooleanValue() {
    if (getSetField() == _Fields.BOOLEAN_VALUE) {
      return (java.lang.Boolean) getFieldValue();
    } else {
      throw new java.lang.RuntimeException(
          "Cannot get field 'booleanValue' because union is currently set to "
              + getFieldDesc(getSetField()).name);
    }
  }

  public void setBooleanValue(boolean value) {
    setField_ = _Fields.BOOLEAN_VALUE;
    value_ = value;
  }

  public boolean isSetStringValue() {
    return setField_ == _Fields.STRING_VALUE;
  }

  public boolean isSetDoubleValue() {
    return setField_ == _Fields.DOUBLE_VALUE;
  }

  public boolean isSetBooleanValue() {
    return setField_ == _Fields.BOOLEAN_VALUE;
  }

  public boolean equals(java.lang.Object other) {
    if (other instanceof TSparkParameterValue) {
      return equals((TSparkParameterValue) other);
    } else {
      return false;
    }
  }

  public boolean equals(TSparkParameterValue other) {
    return other != null
        && getSetField() == other.getSetField()
        && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TSparkParameterValue other) {
    int lastComparison =
        org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }

  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum) getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
}
