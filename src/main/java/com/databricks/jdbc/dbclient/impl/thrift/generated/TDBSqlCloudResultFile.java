/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.dbclient.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-05-06")
public class TDBSqlCloudResultFile
    implements org.apache.thrift.TBase<TDBSqlCloudResultFile, TDBSqlCloudResultFile._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TDBSqlCloudResultFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TDBSqlCloudResultFile");

  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "filePath", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField START_ROW_OFFSET_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "startRowOffset", org.apache.thrift.protocol.TType.I64, (short) 2);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "rowCount", org.apache.thrift.protocol.TType.I64, (short) 3);
  private static final org.apache.thrift.protocol.TField UNCOMPRESSED_BYTES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "uncompressedBytes", org.apache.thrift.protocol.TType.I64, (short) 4);
  private static final org.apache.thrift.protocol.TField COMPRESSED_BYTES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "compressedBytes", org.apache.thrift.protocol.TType.I64, (short) 5);
  private static final org.apache.thrift.protocol.TField FILE_LINK_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "fileLink", org.apache.thrift.protocol.TType.STRING, (short) 6);
  private static final org.apache.thrift.protocol.TField LINK_EXPIRY_TIME_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "linkExpiryTime", org.apache.thrift.protocol.TType.I64, (short) 7);
  private static final org.apache.thrift.protocol.TField HTTP_HEADERS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "httpHeaders", org.apache.thrift.protocol.TType.MAP, (short) 8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TDBSqlCloudResultFileStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TDBSqlCloudResultFileTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String filePath; // optional
  public long startRowOffset; // optional
  public long rowCount; // optional
  public long uncompressedBytes; // optional
  public long compressedBytes; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fileLink; // optional
  public long linkExpiryTime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      httpHeaders; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_PATH((short) 1, "filePath"),
    START_ROW_OFFSET((short) 2, "startRowOffset"),
    ROW_COUNT((short) 3, "rowCount"),
    UNCOMPRESSED_BYTES((short) 4, "uncompressedBytes"),
    COMPRESSED_BYTES((short) 5, "compressedBytes"),
    FILE_LINK((short) 6, "fileLink"),
    LINK_EXPIRY_TIME((short) 7, "linkExpiryTime"),
    HTTP_HEADERS((short) 8, "httpHeaders");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // FILE_PATH
          return FILE_PATH;
        case 2: // START_ROW_OFFSET
          return START_ROW_OFFSET;
        case 3: // ROW_COUNT
          return ROW_COUNT;
        case 4: // UNCOMPRESSED_BYTES
          return UNCOMPRESSED_BYTES;
        case 5: // COMPRESSED_BYTES
          return COMPRESSED_BYTES;
        case 6: // FILE_LINK
          return FILE_LINK;
        case 7: // LINK_EXPIRY_TIME
          return LINK_EXPIRY_TIME;
        case 8: // HTTP_HEADERS
          return HTTP_HEADERS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTROWOFFSET_ISSET_ID = 0;
  private static final int __ROWCOUNT_ISSET_ID = 1;
  private static final int __UNCOMPRESSEDBYTES_ISSET_ID = 2;
  private static final int __COMPRESSEDBYTES_ISSET_ID = 3;
  private static final int __LINKEXPIRYTIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.FILE_PATH,
    _Fields.START_ROW_OFFSET,
    _Fields.ROW_COUNT,
    _Fields.UNCOMPRESSED_BYTES,
    _Fields.COMPRESSED_BYTES,
    _Fields.FILE_LINK,
    _Fields.LINK_EXPIRY_TIME,
    _Fields.HTTP_HEADERS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.FILE_PATH,
        new org.apache.thrift.meta_data.FieldMetaData(
            "filePath",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.START_ROW_OFFSET,
        new org.apache.thrift.meta_data.FieldMetaData(
            "startRowOffset",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.ROW_COUNT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "rowCount",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.UNCOMPRESSED_BYTES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "uncompressedBytes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.COMPRESSED_BYTES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "compressedBytes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.FILE_LINK,
        new org.apache.thrift.meta_data.FieldMetaData(
            "fileLink",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.LINK_EXPIRY_TIME,
        new org.apache.thrift.meta_data.FieldMetaData(
            "linkExpiryTime",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.HTTP_HEADERS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "httpHeaders",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TDBSqlCloudResultFile.class, metaDataMap);
  }

  public TDBSqlCloudResultFile() {}

  /** Performs a deep copy on <i>other</i>. */
  public TDBSqlCloudResultFile(TDBSqlCloudResultFile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    this.startRowOffset = other.startRowOffset;
    this.rowCount = other.rowCount;
    this.uncompressedBytes = other.uncompressedBytes;
    this.compressedBytes = other.compressedBytes;
    if (other.isSetFileLink()) {
      this.fileLink = other.fileLink;
    }
    this.linkExpiryTime = other.linkExpiryTime;
    if (other.isSetHttpHeaders()) {
      java.util.Map<java.lang.String, java.lang.String> __this__httpHeaders =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.httpHeaders);
      this.httpHeaders = __this__httpHeaders;
    }
  }

  @Override
  public TDBSqlCloudResultFile deepCopy() {
    return new TDBSqlCloudResultFile(this);
  }

  @Override
  public void clear() {
    this.filePath = null;
    setStartRowOffsetIsSet(false);
    this.startRowOffset = 0;
    setRowCountIsSet(false);
    this.rowCount = 0;
    setUncompressedBytesIsSet(false);
    this.uncompressedBytes = 0;
    setCompressedBytesIsSet(false);
    this.compressedBytes = 0;
    this.fileLink = null;
    setLinkExpiryTimeIsSet(false);
    this.linkExpiryTime = 0;
    this.httpHeaders = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFilePath() {
    return this.filePath;
  }

  public TDBSqlCloudResultFile setFilePath(
      @org.apache.thrift.annotation.Nullable java.lang.String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public long getStartRowOffset() {
    return this.startRowOffset;
  }

  public TDBSqlCloudResultFile setStartRowOffset(long startRowOffset) {
    this.startRowOffset = startRowOffset;
    setStartRowOffsetIsSet(true);
    return this;
  }

  public void unsetStartRowOffset() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID);
  }

  /** Returns true if field startRowOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRowOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID);
  }

  public void setStartRowOffsetIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID, value);
  }

  public long getRowCount() {
    return this.rowCount;
  }

  public TDBSqlCloudResultFile setRowCount(long rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public long getUncompressedBytes() {
    return this.uncompressedBytes;
  }

  public TDBSqlCloudResultFile setUncompressedBytes(long uncompressedBytes) {
    this.uncompressedBytes = uncompressedBytes;
    setUncompressedBytesIsSet(true);
    return this;
  }

  public void unsetUncompressedBytes() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID);
  }

  /**
   * Returns true if field uncompressedBytes is set (has been assigned a value) and false otherwise
   */
  public boolean isSetUncompressedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID);
  }

  public void setUncompressedBytesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID, value);
  }

  public long getCompressedBytes() {
    return this.compressedBytes;
  }

  public TDBSqlCloudResultFile setCompressedBytes(long compressedBytes) {
    this.compressedBytes = compressedBytes;
    setCompressedBytesIsSet(true);
    return this;
  }

  public void unsetCompressedBytes() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID);
  }

  /**
   * Returns true if field compressedBytes is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCompressedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID);
  }

  public void setCompressedBytesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileLink() {
    return this.fileLink;
  }

  public TDBSqlCloudResultFile setFileLink(
      @org.apache.thrift.annotation.Nullable java.lang.String fileLink) {
    this.fileLink = fileLink;
    return this;
  }

  public void unsetFileLink() {
    this.fileLink = null;
  }

  /** Returns true if field fileLink is set (has been assigned a value) and false otherwise */
  public boolean isSetFileLink() {
    return this.fileLink != null;
  }

  public void setFileLinkIsSet(boolean value) {
    if (!value) {
      this.fileLink = null;
    }
  }

  public long getLinkExpiryTime() {
    return this.linkExpiryTime;
  }

  public TDBSqlCloudResultFile setLinkExpiryTime(long linkExpiryTime) {
    this.linkExpiryTime = linkExpiryTime;
    setLinkExpiryTimeIsSet(true);
    return this;
  }

  public void unsetLinkExpiryTime() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKEXPIRYTIME_ISSET_ID);
  }

  /** Returns true if field linkExpiryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkExpiryTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKEXPIRYTIME_ISSET_ID);
  }

  public void setLinkExpiryTimeIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKEXPIRYTIME_ISSET_ID, value);
  }

  public int getHttpHeadersSize() {
    return (this.httpHeaders == null) ? 0 : this.httpHeaders.size();
  }

  public void putToHttpHeaders(java.lang.String key, java.lang.String val) {
    if (this.httpHeaders == null) {
      this.httpHeaders = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.httpHeaders.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getHttpHeaders() {
    return this.httpHeaders;
  }

  public TDBSqlCloudResultFile setHttpHeaders(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> httpHeaders) {
    this.httpHeaders = httpHeaders;
    return this;
  }

  public void unsetHttpHeaders() {
    this.httpHeaders = null;
  }

  /** Returns true if field httpHeaders is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpHeaders() {
    return this.httpHeaders != null;
  }

  public void setHttpHeadersIsSet(boolean value) {
    if (!value) {
      this.httpHeaders = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((java.lang.String) value);
        }
        break;

      case START_ROW_OFFSET:
        if (value == null) {
          unsetStartRowOffset();
        } else {
          setStartRowOffset((java.lang.Long) value);
        }
        break;

      case ROW_COUNT:
        if (value == null) {
          unsetRowCount();
        } else {
          setRowCount((java.lang.Long) value);
        }
        break;

      case UNCOMPRESSED_BYTES:
        if (value == null) {
          unsetUncompressedBytes();
        } else {
          setUncompressedBytes((java.lang.Long) value);
        }
        break;

      case COMPRESSED_BYTES:
        if (value == null) {
          unsetCompressedBytes();
        } else {
          setCompressedBytes((java.lang.Long) value);
        }
        break;

      case FILE_LINK:
        if (value == null) {
          unsetFileLink();
        } else {
          setFileLink((java.lang.String) value);
        }
        break;

      case LINK_EXPIRY_TIME:
        if (value == null) {
          unsetLinkExpiryTime();
        } else {
          setLinkExpiryTime((java.lang.Long) value);
        }
        break;

      case HTTP_HEADERS:
        if (value == null) {
          unsetHttpHeaders();
        } else {
          setHttpHeaders((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case FILE_PATH:
        return getFilePath();

      case START_ROW_OFFSET:
        return getStartRowOffset();

      case ROW_COUNT:
        return getRowCount();

      case UNCOMPRESSED_BYTES:
        return getUncompressedBytes();

      case COMPRESSED_BYTES:
        return getCompressedBytes();

      case FILE_LINK:
        return getFileLink();

      case LINK_EXPIRY_TIME:
        return getLinkExpiryTime();

      case HTTP_HEADERS:
        return getHttpHeaders();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case START_ROW_OFFSET:
        return isSetStartRowOffset();
      case ROW_COUNT:
        return isSetRowCount();
      case UNCOMPRESSED_BYTES:
        return isSetUncompressedBytes();
      case COMPRESSED_BYTES:
        return isSetCompressedBytes();
      case FILE_LINK:
        return isSetFileLink();
      case LINK_EXPIRY_TIME:
        return isSetLinkExpiryTime();
      case HTTP_HEADERS:
        return isSetHttpHeaders();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDBSqlCloudResultFile) return this.equals((TDBSqlCloudResultFile) that);
    return false;
  }

  public boolean equals(TDBSqlCloudResultFile that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath)) return false;
      if (!this.filePath.equals(that.filePath)) return false;
    }

    boolean this_present_startRowOffset = true && this.isSetStartRowOffset();
    boolean that_present_startRowOffset = true && that.isSetStartRowOffset();
    if (this_present_startRowOffset || that_present_startRowOffset) {
      if (!(this_present_startRowOffset && that_present_startRowOffset)) return false;
      if (this.startRowOffset != that.startRowOffset) return false;
    }

    boolean this_present_rowCount = true && this.isSetRowCount();
    boolean that_present_rowCount = true && that.isSetRowCount();
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount)) return false;
      if (this.rowCount != that.rowCount) return false;
    }

    boolean this_present_uncompressedBytes = true && this.isSetUncompressedBytes();
    boolean that_present_uncompressedBytes = true && that.isSetUncompressedBytes();
    if (this_present_uncompressedBytes || that_present_uncompressedBytes) {
      if (!(this_present_uncompressedBytes && that_present_uncompressedBytes)) return false;
      if (this.uncompressedBytes != that.uncompressedBytes) return false;
    }

    boolean this_present_compressedBytes = true && this.isSetCompressedBytes();
    boolean that_present_compressedBytes = true && that.isSetCompressedBytes();
    if (this_present_compressedBytes || that_present_compressedBytes) {
      if (!(this_present_compressedBytes && that_present_compressedBytes)) return false;
      if (this.compressedBytes != that.compressedBytes) return false;
    }

    boolean this_present_fileLink = true && this.isSetFileLink();
    boolean that_present_fileLink = true && that.isSetFileLink();
    if (this_present_fileLink || that_present_fileLink) {
      if (!(this_present_fileLink && that_present_fileLink)) return false;
      if (!this.fileLink.equals(that.fileLink)) return false;
    }

    boolean this_present_linkExpiryTime = true && this.isSetLinkExpiryTime();
    boolean that_present_linkExpiryTime = true && that.isSetLinkExpiryTime();
    if (this_present_linkExpiryTime || that_present_linkExpiryTime) {
      if (!(this_present_linkExpiryTime && that_present_linkExpiryTime)) return false;
      if (this.linkExpiryTime != that.linkExpiryTime) return false;
    }

    boolean this_present_httpHeaders = true && this.isSetHttpHeaders();
    boolean that_present_httpHeaders = true && that.isSetHttpHeaders();
    if (this_present_httpHeaders || that_present_httpHeaders) {
      if (!(this_present_httpHeaders && that_present_httpHeaders)) return false;
      if (!this.httpHeaders.equals(that.httpHeaders)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath()) hashCode = hashCode * 8191 + filePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartRowOffset()) ? 131071 : 524287);
    if (isSetStartRowOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startRowOffset);

    hashCode = hashCode * 8191 + ((isSetRowCount()) ? 131071 : 524287);
    if (isSetRowCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rowCount);

    hashCode = hashCode * 8191 + ((isSetUncompressedBytes()) ? 131071 : 524287);
    if (isSetUncompressedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uncompressedBytes);

    hashCode = hashCode * 8191 + ((isSetCompressedBytes()) ? 131071 : 524287);
    if (isSetCompressedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compressedBytes);

    hashCode = hashCode * 8191 + ((isSetFileLink()) ? 131071 : 524287);
    if (isSetFileLink()) hashCode = hashCode * 8191 + fileLink.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkExpiryTime()) ? 131071 : 524287);
    if (isSetLinkExpiryTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(linkExpiryTime);

    hashCode = hashCode * 8191 + ((isSetHttpHeaders()) ? 131071 : 524287);
    if (isSetHttpHeaders()) hashCode = hashCode * 8191 + httpHeaders.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDBSqlCloudResultFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartRowOffset(), other.isSetStartRowOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRowOffset()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.startRowOffset, other.startRowOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowCount(), other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetUncompressedBytes(), other.isSetUncompressedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncompressedBytes()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.uncompressedBytes, other.uncompressedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCompressedBytes(), other.isSetCompressedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressedBytes()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.compressedBytes, other.compressedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileLink(), other.isSetFileLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLink, other.fileLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLinkExpiryTime(), other.isSetLinkExpiryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkExpiryTime()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.linkExpiryTime, other.linkExpiryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHttpHeaders(), other.isSetHttpHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpHeaders, other.httpHeaders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDBSqlCloudResultFile(");
    boolean first = true;

    if (isSetFilePath()) {
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
    }
    if (isSetStartRowOffset()) {
      if (!first) sb.append(", ");
      sb.append("startRowOffset:");
      sb.append(this.startRowOffset);
      first = false;
    }
    if (isSetRowCount()) {
      if (!first) sb.append(", ");
      sb.append("rowCount:");
      sb.append(this.rowCount);
      first = false;
    }
    if (isSetUncompressedBytes()) {
      if (!first) sb.append(", ");
      sb.append("uncompressedBytes:");
      sb.append(this.uncompressedBytes);
      first = false;
    }
    if (isSetCompressedBytes()) {
      if (!first) sb.append(", ");
      sb.append("compressedBytes:");
      sb.append(this.compressedBytes);
      first = false;
    }
    if (isSetFileLink()) {
      if (!first) sb.append(", ");
      sb.append("fileLink:");
      if (this.fileLink == null) {
        sb.append("null");
      } else {
        sb.append(this.fileLink);
      }
      first = false;
    }
    if (isSetLinkExpiryTime()) {
      if (!first) sb.append(", ");
      sb.append("linkExpiryTime:");
      sb.append(this.linkExpiryTime);
      first = false;
    }
    if (isSetHttpHeaders()) {
      if (!first) sb.append(", ");
      sb.append("httpHeaders:");
      if (this.httpHeaders == null) {
        sb.append("null");
      } else {
        sb.append(this.httpHeaders);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDBSqlCloudResultFileStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlCloudResultFileStandardScheme getScheme() {
      return new TDBSqlCloudResultFileStandardScheme();
    }
  }

  private static class TDBSqlCloudResultFileStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TDBSqlCloudResultFile> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDBSqlCloudResultFile struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_ROW_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startRowOffset = iprot.readI64();
              struct.setStartRowOffsetIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowCount = iprot.readI64();
              struct.setRowCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNCOMPRESSED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uncompressedBytes = iprot.readI64();
              struct.setUncompressedBytesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compressedBytes = iprot.readI64();
              struct.setCompressedBytesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileLink = iprot.readString();
              struct.setFileLinkIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINK_EXPIRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.linkExpiryTime = iprot.readI64();
              struct.setLinkExpiryTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HTTP_HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
                struct.httpHeaders =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map128.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key129;
                @org.apache.thrift.annotation.Nullable java.lang.String _val130;
                for (int _i131 = 0; _i131 < _map128.size; ++_i131) {
                  _key129 = iprot.readString();
                  _val130 = iprot.readString();
                  struct.httpHeaders.put(_key129, _val130);
                }
                iprot.readMapEnd();
              }
              struct.setHttpHeadersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDBSqlCloudResultFile struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filePath != null) {
        if (struct.isSetFilePath()) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartRowOffset()) {
        oprot.writeFieldBegin(START_ROW_OFFSET_FIELD_DESC);
        oprot.writeI64(struct.startRowOffset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRowCount()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.rowCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUncompressedBytes()) {
        oprot.writeFieldBegin(UNCOMPRESSED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.uncompressedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompressedBytes()) {
        oprot.writeFieldBegin(COMPRESSED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.compressedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.fileLink != null) {
        if (struct.isSetFileLink()) {
          oprot.writeFieldBegin(FILE_LINK_FIELD_DESC);
          oprot.writeString(struct.fileLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLinkExpiryTime()) {
        oprot.writeFieldBegin(LINK_EXPIRY_TIME_FIELD_DESC);
        oprot.writeI64(struct.linkExpiryTime);
        oprot.writeFieldEnd();
      }
      if (struct.httpHeaders != null) {
        if (struct.isSetHttpHeaders()) {
          oprot.writeFieldBegin(HTTP_HEADERS_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.httpHeaders.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter132 :
                struct.httpHeaders.entrySet()) {
              oprot.writeString(_iter132.getKey());
              oprot.writeString(_iter132.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TDBSqlCloudResultFileTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlCloudResultFileTupleScheme getScheme() {
      return new TDBSqlCloudResultFileTupleScheme();
    }
  }

  private static class TDBSqlCloudResultFileTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TDBSqlCloudResultFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDBSqlCloudResultFile struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFilePath()) {
        optionals.set(0);
      }
      if (struct.isSetStartRowOffset()) {
        optionals.set(1);
      }
      if (struct.isSetRowCount()) {
        optionals.set(2);
      }
      if (struct.isSetUncompressedBytes()) {
        optionals.set(3);
      }
      if (struct.isSetCompressedBytes()) {
        optionals.set(4);
      }
      if (struct.isSetFileLink()) {
        optionals.set(5);
      }
      if (struct.isSetLinkExpiryTime()) {
        optionals.set(6);
      }
      if (struct.isSetHttpHeaders()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetStartRowOffset()) {
        oprot.writeI64(struct.startRowOffset);
      }
      if (struct.isSetRowCount()) {
        oprot.writeI64(struct.rowCount);
      }
      if (struct.isSetUncompressedBytes()) {
        oprot.writeI64(struct.uncompressedBytes);
      }
      if (struct.isSetCompressedBytes()) {
        oprot.writeI64(struct.compressedBytes);
      }
      if (struct.isSetFileLink()) {
        oprot.writeString(struct.fileLink);
      }
      if (struct.isSetLinkExpiryTime()) {
        oprot.writeI64(struct.linkExpiryTime);
      }
      if (struct.isSetHttpHeaders()) {
        {
          oprot.writeI32(struct.httpHeaders.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter133 :
              struct.httpHeaders.entrySet()) {
            oprot.writeString(_iter133.getKey());
            oprot.writeString(_iter133.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDBSqlCloudResultFile struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startRowOffset = iprot.readI64();
        struct.setStartRowOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rowCount = iprot.readI64();
        struct.setRowCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uncompressedBytes = iprot.readI64();
        struct.setUncompressedBytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compressedBytes = iprot.readI64();
        struct.setCompressedBytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileLink = iprot.readString();
        struct.setFileLinkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.linkExpiryTime = iprot.readI64();
        struct.setLinkExpiryTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map134 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.httpHeaders =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map134.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key135;
          @org.apache.thrift.annotation.Nullable java.lang.String _val136;
          for (int _i137 = 0; _i137 < _map134.size; ++_i137) {
            _key135 = iprot.readString();
            _val136 = iprot.readString();
            struct.httpHeaders.put(_key135, _val136);
          }
        }
        struct.setHttpHeadersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
