/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.client.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-03-01")
public class TExecuteStatementReq
    implements org.apache.thrift.TBase<TExecuteStatementReq, TExecuteStatementReq._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TExecuteStatementReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TExecuteStatementReq");

  private static final org.apache.thrift.protocol.TField SESSION_HANDLE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionHandle", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "statement", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField CONF_OVERLAY_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "confOverlay", org.apache.thrift.protocol.TType.MAP, (short) 3);
  private static final org.apache.thrift.protocol.TField RUN_ASYNC_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "runAsync", org.apache.thrift.protocol.TType.BOOL, (short) 4);
  private static final org.apache.thrift.protocol.TField GET_DIRECT_RESULTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "getDirectResults", org.apache.thrift.protocol.TType.STRUCT, (short) 1281);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "queryTimeout", org.apache.thrift.protocol.TType.I64, (short) 5);
  private static final org.apache.thrift.protocol.TField CAN_READ_ARROW_RESULT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "canReadArrowResult", org.apache.thrift.protocol.TType.BOOL, (short) 1282);
  private static final org.apache.thrift.protocol.TField CAN_DOWNLOAD_RESULT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "canDownloadResult", org.apache.thrift.protocol.TType.BOOL, (short) 1283);
  private static final org.apache.thrift.protocol.TField CAN_DECOMPRESS_LZ4_RESULT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "canDecompressLZ4Result", org.apache.thrift.protocol.TType.BOOL, (short) 1284);
  private static final org.apache.thrift.protocol.TField MAX_BYTES_PER_FILE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "maxBytesPerFile", org.apache.thrift.protocol.TType.I64, (short) 1285);
  private static final org.apache.thrift.protocol.TField USE_ARROW_NATIVE_TYPES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "useArrowNativeTypes", org.apache.thrift.protocol.TType.STRUCT, (short) 1286);
  private static final org.apache.thrift.protocol.TField RESULT_ROW_LIMIT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultRowLimit", org.apache.thrift.protocol.TType.I64, (short) 1287);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "parameters", org.apache.thrift.protocol.TType.LIST, (short) 1288);
  private static final org.apache.thrift.protocol.TField MAX_BYTES_PER_BATCH_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "maxBytesPerBatch", org.apache.thrift.protocol.TType.I64, (short) 1289);
  private static final org.apache.thrift.protocol.TField STATEMENT_CONF_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "statementConf", org.apache.thrift.protocol.TType.STRUCT, (short) 1296);
  private static final org.apache.thrift.protocol.TField OPERATION_ID_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "operationId", org.apache.thrift.protocol.TType.STRUCT, (short) 3329);
  private static final org.apache.thrift.protocol.TField SESSION_CONF_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionConf", org.apache.thrift.protocol.TType.STRUCT, (short) 3330);
  private static final org.apache.thrift.protocol.TField REJECT_HIGH_COST_QUERIES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "rejectHighCostQueries", org.apache.thrift.protocol.TType.BOOL, (short) 3331);
  private static final org.apache.thrift.protocol.TField ESTIMATED_COST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "estimatedCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 3332);
  private static final org.apache.thrift.protocol.TField EXECUTION_VERSION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "executionVersion", org.apache.thrift.protocol.TType.I16, (short) 3333);
  private static final org.apache.thrift.protocol.TField REQUEST_VALIDATION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "requestValidation", org.apache.thrift.protocol.TType.STRING, (short) 3334);
  private static final org.apache.thrift.protocol.TField RESULT_PERSISTENCE_MODE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultPersistenceMode", org.apache.thrift.protocol.TType.I32, (short) 3335);
  private static final org.apache.thrift.protocol.TField TRIM_ARROW_BATCHES_TO_LIMIT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "trimArrowBatchesToLimit", org.apache.thrift.protocol.TType.BOOL, (short) 3336);
  private static final org.apache.thrift.protocol.TField FETCH_DISPOSITION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "fetchDisposition", org.apache.thrift.protocol.TType.I32, (short) 3337);
  private static final org.apache.thrift.protocol.TField
      ENFORCE_RESULT_PERSISTENCE_MODE_FIELD_DESC =
          new org.apache.thrift.protocol.TField(
              "enforceResultPersistenceMode", org.apache.thrift.protocol.TType.BOOL, (short) 3344);
  private static final org.apache.thrift.protocol.TField STATEMENT_LIST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "statementList", org.apache.thrift.protocol.TType.LIST, (short) 3345);
  private static final org.apache.thrift.protocol.TField PERSIST_RESULT_MANIFEST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "persistResultManifest", org.apache.thrift.protocol.TType.BOOL, (short) 3346);
  private static final org.apache.thrift.protocol.TField RESULT_RETENTION_SECONDS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultRetentionSeconds", org.apache.thrift.protocol.TType.I64, (short) 3347);
  private static final org.apache.thrift.protocol.TField RESULT_BYTE_LIMIT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultByteLimit", org.apache.thrift.protocol.TType.I64, (short) 3348);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FORMAT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultDataFormat", org.apache.thrift.protocol.TType.STRUCT, (short) 3349);
  private static final org.apache.thrift.protocol.TField ORIGINATING_CLIENT_IDENTITY_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "originatingClientIdentity", org.apache.thrift.protocol.TType.STRING, (short) 3350);
  private static final org.apache.thrift.protocol.TField PREFER_SINGLE_FILE_RESULT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "preferSingleFileResult", org.apache.thrift.protocol.TType.BOOL, (short) 3351);
  private static final org.apache.thrift.protocol.TField PREFER_DRIVER_ONLY_UPLOAD_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "preferDriverOnlyUpload", org.apache.thrift.protocol.TType.BOOL, (short) 3352);
  private static final org.apache.thrift.protocol.TField
      ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS_FIELD_DESC =
          new org.apache.thrift.protocol.TField(
              "enforceEmbeddedSchemaCorrectness",
              org.apache.thrift.protocol.TType.BOOL,
              (short) 3353);
  private static final org.apache.thrift.protocol.TField IDEMPOTENCY_TOKEN_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "idempotencyToken", org.apache.thrift.protocol.TType.STRING, (short) 3360);
  private static final org.apache.thrift.protocol.TField
      THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION_FIELD_DESC =
          new org.apache.thrift.protocol.TField(
              "throwErrorOnByteLimitTruncation",
              org.apache.thrift.protocol.TType.BOOL,
              (short) 3361);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TExecuteStatementReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TExecuteStatementReqTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String statement; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      confOverlay; // optional
  public boolean runAsync; // optional
  public @org.apache.thrift.annotation.Nullable TSparkGetDirectResults getDirectResults; // optional
  public long queryTimeout; // optional
  public boolean canReadArrowResult; // optional
  public boolean canDownloadResult; // optional
  public boolean canDecompressLZ4Result; // optional
  public long maxBytesPerFile; // optional
  public @org.apache.thrift.annotation.Nullable TSparkArrowTypes useArrowNativeTypes; // optional
  public long resultRowLimit; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TSparkParameter>
      parameters; // optional
  public long maxBytesPerBatch; // optional
  public @org.apache.thrift.annotation.Nullable TStatementConf statementConf; // optional
  public @org.apache.thrift.annotation.Nullable THandleIdentifier operationId; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf; // optional
  public boolean rejectHighCostQueries; // optional
  public double estimatedCost; // optional
  public short executionVersion; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer requestValidation; // optional

  /**
   * @see TResultPersistenceMode
   */
  public @org.apache.thrift.annotation.Nullable TResultPersistenceMode
      resultPersistenceMode; // optional

  public boolean trimArrowBatchesToLimit; // optional

  /**
   * @see TDBSqlFetchDisposition
   */
  public @org.apache.thrift.annotation.Nullable TDBSqlFetchDisposition fetchDisposition; // optional

  public boolean enforceResultPersistenceMode; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlStatement>
      statementList; // optional
  public boolean persistResultManifest; // optional
  public long resultRetentionSeconds; // optional
  public long resultByteLimit; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlResultFormat resultDataFormat; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String
      originatingClientIdentity; // optional
  public boolean preferSingleFileResult; // optional
  public boolean preferDriverOnlyUpload; // optional
  public boolean enforceEmbeddedSchemaCorrectness; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String idempotencyToken; // optional
  public boolean throwErrorOnByteLimitTruncation; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_HANDLE((short) 1, "sessionHandle"),
    STATEMENT((short) 2, "statement"),
    CONF_OVERLAY((short) 3, "confOverlay"),
    RUN_ASYNC((short) 4, "runAsync"),
    GET_DIRECT_RESULTS((short) 1281, "getDirectResults"),
    QUERY_TIMEOUT((short) 5, "queryTimeout"),
    CAN_READ_ARROW_RESULT((short) 1282, "canReadArrowResult"),
    CAN_DOWNLOAD_RESULT((short) 1283, "canDownloadResult"),
    CAN_DECOMPRESS_LZ4_RESULT((short) 1284, "canDecompressLZ4Result"),
    MAX_BYTES_PER_FILE((short) 1285, "maxBytesPerFile"),
    USE_ARROW_NATIVE_TYPES((short) 1286, "useArrowNativeTypes"),
    RESULT_ROW_LIMIT((short) 1287, "resultRowLimit"),
    PARAMETERS((short) 1288, "parameters"),
    MAX_BYTES_PER_BATCH((short) 1289, "maxBytesPerBatch"),
    STATEMENT_CONF((short) 1296, "statementConf"),
    OPERATION_ID((short) 3329, "operationId"),
    SESSION_CONF((short) 3330, "sessionConf"),
    REJECT_HIGH_COST_QUERIES((short) 3331, "rejectHighCostQueries"),
    ESTIMATED_COST((short) 3332, "estimatedCost"),
    EXECUTION_VERSION((short) 3333, "executionVersion"),
    REQUEST_VALIDATION((short) 3334, "requestValidation"),
    /**
     * @see TResultPersistenceMode
     */
    RESULT_PERSISTENCE_MODE((short) 3335, "resultPersistenceMode"),
    TRIM_ARROW_BATCHES_TO_LIMIT((short) 3336, "trimArrowBatchesToLimit"),
    /**
     * @see TDBSqlFetchDisposition
     */
    FETCH_DISPOSITION((short) 3337, "fetchDisposition"),
    ENFORCE_RESULT_PERSISTENCE_MODE((short) 3344, "enforceResultPersistenceMode"),
    STATEMENT_LIST((short) 3345, "statementList"),
    PERSIST_RESULT_MANIFEST((short) 3346, "persistResultManifest"),
    RESULT_RETENTION_SECONDS((short) 3347, "resultRetentionSeconds"),
    RESULT_BYTE_LIMIT((short) 3348, "resultByteLimit"),
    RESULT_DATA_FORMAT((short) 3349, "resultDataFormat"),
    ORIGINATING_CLIENT_IDENTITY((short) 3350, "originatingClientIdentity"),
    PREFER_SINGLE_FILE_RESULT((short) 3351, "preferSingleFileResult"),
    PREFER_DRIVER_ONLY_UPLOAD((short) 3352, "preferDriverOnlyUpload"),
    ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS((short) 3353, "enforceEmbeddedSchemaCorrectness"),
    IDEMPOTENCY_TOKEN((short) 3360, "idempotencyToken"),
    THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION((short) 3361, "throwErrorOnByteLimitTruncation");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // SESSION_HANDLE
          return SESSION_HANDLE;
        case 2: // STATEMENT
          return STATEMENT;
        case 3: // CONF_OVERLAY
          return CONF_OVERLAY;
        case 4: // RUN_ASYNC
          return RUN_ASYNC;
        case 1281: // GET_DIRECT_RESULTS
          return GET_DIRECT_RESULTS;
        case 5: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        case 1282: // CAN_READ_ARROW_RESULT
          return CAN_READ_ARROW_RESULT;
        case 1283: // CAN_DOWNLOAD_RESULT
          return CAN_DOWNLOAD_RESULT;
        case 1284: // CAN_DECOMPRESS_LZ4_RESULT
          return CAN_DECOMPRESS_LZ4_RESULT;
        case 1285: // MAX_BYTES_PER_FILE
          return MAX_BYTES_PER_FILE;
        case 1286: // USE_ARROW_NATIVE_TYPES
          return USE_ARROW_NATIVE_TYPES;
        case 1287: // RESULT_ROW_LIMIT
          return RESULT_ROW_LIMIT;
        case 1288: // PARAMETERS
          return PARAMETERS;
        case 1289: // MAX_BYTES_PER_BATCH
          return MAX_BYTES_PER_BATCH;
        case 1296: // STATEMENT_CONF
          return STATEMENT_CONF;
        case 3329: // OPERATION_ID
          return OPERATION_ID;
        case 3330: // SESSION_CONF
          return SESSION_CONF;
        case 3331: // REJECT_HIGH_COST_QUERIES
          return REJECT_HIGH_COST_QUERIES;
        case 3332: // ESTIMATED_COST
          return ESTIMATED_COST;
        case 3333: // EXECUTION_VERSION
          return EXECUTION_VERSION;
        case 3334: // REQUEST_VALIDATION
          return REQUEST_VALIDATION;
        case 3335: // RESULT_PERSISTENCE_MODE
          return RESULT_PERSISTENCE_MODE;
        case 3336: // TRIM_ARROW_BATCHES_TO_LIMIT
          return TRIM_ARROW_BATCHES_TO_LIMIT;
        case 3337: // FETCH_DISPOSITION
          return FETCH_DISPOSITION;
        case 3344: // ENFORCE_RESULT_PERSISTENCE_MODE
          return ENFORCE_RESULT_PERSISTENCE_MODE;
        case 3345: // STATEMENT_LIST
          return STATEMENT_LIST;
        case 3346: // PERSIST_RESULT_MANIFEST
          return PERSIST_RESULT_MANIFEST;
        case 3347: // RESULT_RETENTION_SECONDS
          return RESULT_RETENTION_SECONDS;
        case 3348: // RESULT_BYTE_LIMIT
          return RESULT_BYTE_LIMIT;
        case 3349: // RESULT_DATA_FORMAT
          return RESULT_DATA_FORMAT;
        case 3350: // ORIGINATING_CLIENT_IDENTITY
          return ORIGINATING_CLIENT_IDENTITY;
        case 3351: // PREFER_SINGLE_FILE_RESULT
          return PREFER_SINGLE_FILE_RESULT;
        case 3352: // PREFER_DRIVER_ONLY_UPLOAD
          return PREFER_DRIVER_ONLY_UPLOAD;
        case 3353: // ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS
          return ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS;
        case 3360: // IDEMPOTENCY_TOKEN
          return IDEMPOTENCY_TOKEN;
        case 3361: // THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION
          return THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RUNASYNC_ISSET_ID = 0;
  private static final int __QUERYTIMEOUT_ISSET_ID = 1;
  private static final int __CANREADARROWRESULT_ISSET_ID = 2;
  private static final int __CANDOWNLOADRESULT_ISSET_ID = 3;
  private static final int __CANDECOMPRESSLZ4RESULT_ISSET_ID = 4;
  private static final int __MAXBYTESPERFILE_ISSET_ID = 5;
  private static final int __RESULTROWLIMIT_ISSET_ID = 6;
  private static final int __MAXBYTESPERBATCH_ISSET_ID = 7;
  private static final int __REJECTHIGHCOSTQUERIES_ISSET_ID = 8;
  private static final int __ESTIMATEDCOST_ISSET_ID = 9;
  private static final int __EXECUTIONVERSION_ISSET_ID = 10;
  private static final int __TRIMARROWBATCHESTOLIMIT_ISSET_ID = 11;
  private static final int __ENFORCERESULTPERSISTENCEMODE_ISSET_ID = 12;
  private static final int __PERSISTRESULTMANIFEST_ISSET_ID = 13;
  private static final int __RESULTRETENTIONSECONDS_ISSET_ID = 14;
  private static final int __RESULTBYTELIMIT_ISSET_ID = 15;
  private static final int __PREFERSINGLEFILERESULT_ISSET_ID = 16;
  private static final int __PREFERDRIVERONLYUPLOAD_ISSET_ID = 17;
  private static final int __ENFORCEEMBEDDEDSCHEMACORRECTNESS_ISSET_ID = 18;
  private static final int __THROWERRORONBYTELIMITTRUNCATION_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.CONF_OVERLAY,
    _Fields.RUN_ASYNC,
    _Fields.GET_DIRECT_RESULTS,
    _Fields.QUERY_TIMEOUT,
    _Fields.CAN_READ_ARROW_RESULT,
    _Fields.CAN_DOWNLOAD_RESULT,
    _Fields.CAN_DECOMPRESS_LZ4_RESULT,
    _Fields.MAX_BYTES_PER_FILE,
    _Fields.USE_ARROW_NATIVE_TYPES,
    _Fields.RESULT_ROW_LIMIT,
    _Fields.PARAMETERS,
    _Fields.MAX_BYTES_PER_BATCH,
    _Fields.STATEMENT_CONF,
    _Fields.OPERATION_ID,
    _Fields.SESSION_CONF,
    _Fields.REJECT_HIGH_COST_QUERIES,
    _Fields.ESTIMATED_COST,
    _Fields.EXECUTION_VERSION,
    _Fields.REQUEST_VALIDATION,
    _Fields.RESULT_PERSISTENCE_MODE,
    _Fields.TRIM_ARROW_BATCHES_TO_LIMIT,
    _Fields.FETCH_DISPOSITION,
    _Fields.ENFORCE_RESULT_PERSISTENCE_MODE,
    _Fields.STATEMENT_LIST,
    _Fields.PERSIST_RESULT_MANIFEST,
    _Fields.RESULT_RETENTION_SECONDS,
    _Fields.RESULT_BYTE_LIMIT,
    _Fields.RESULT_DATA_FORMAT,
    _Fields.ORIGINATING_CLIENT_IDENTITY,
    _Fields.PREFER_SINGLE_FILE_RESULT,
    _Fields.PREFER_DRIVER_ONLY_UPLOAD,
    _Fields.ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS,
    _Fields.IDEMPOTENCY_TOKEN,
    _Fields.THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.SESSION_HANDLE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionHandle",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSessionHandle.class)));
    tmpMap.put(
        _Fields.STATEMENT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "statement",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.CONF_OVERLAY,
        new org.apache.thrift.meta_data.FieldMetaData(
            "confOverlay",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(
        _Fields.RUN_ASYNC,
        new org.apache.thrift.meta_data.FieldMetaData(
            "runAsync",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.GET_DIRECT_RESULTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "getDirectResults",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSparkGetDirectResults.class)));
    tmpMap.put(
        _Fields.QUERY_TIMEOUT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "queryTimeout",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.CAN_READ_ARROW_RESULT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "canReadArrowResult",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.CAN_DOWNLOAD_RESULT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "canDownloadResult",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.CAN_DECOMPRESS_LZ4_RESULT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "canDecompressLZ4Result",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.MAX_BYTES_PER_FILE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "maxBytesPerFile",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.USE_ARROW_NATIVE_TYPES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "useArrowNativeTypes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSparkArrowTypes.class)));
    tmpMap.put(
        _Fields.RESULT_ROW_LIMIT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultRowLimit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.PARAMETERS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "parameters",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TSparkParameter.class))));
    tmpMap.put(
        _Fields.MAX_BYTES_PER_BATCH,
        new org.apache.thrift.meta_data.FieldMetaData(
            "maxBytesPerBatch",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.STATEMENT_CONF,
        new org.apache.thrift.meta_data.FieldMetaData(
            "statementConf",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TStatementConf.class)));
    tmpMap.put(
        _Fields.OPERATION_ID,
        new org.apache.thrift.meta_data.FieldMetaData(
            "operationId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, THandleIdentifier.class)));
    tmpMap.put(
        _Fields.SESSION_CONF,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionConf",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlSessionConf.class)));
    tmpMap.put(
        _Fields.REJECT_HIGH_COST_QUERIES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "rejectHighCostQueries",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.ESTIMATED_COST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "estimatedCost",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.EXECUTION_VERSION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "executionVersion",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(
        _Fields.REQUEST_VALIDATION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "requestValidation",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING, true)));
    tmpMap.put(
        _Fields.RESULT_PERSISTENCE_MODE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultPersistenceMode",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TResultPersistenceMode.class)));
    tmpMap.put(
        _Fields.TRIM_ARROW_BATCHES_TO_LIMIT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "trimArrowBatchesToLimit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.FETCH_DISPOSITION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "fetchDisposition",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TDBSqlFetchDisposition.class)));
    tmpMap.put(
        _Fields.ENFORCE_RESULT_PERSISTENCE_MODE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "enforceResultPersistenceMode",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.STATEMENT_LIST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "statementList",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TDBSqlStatement.class))));
    tmpMap.put(
        _Fields.PERSIST_RESULT_MANIFEST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "persistResultManifest",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.RESULT_RETENTION_SECONDS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultRetentionSeconds",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.RESULT_BYTE_LIMIT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultByteLimit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.RESULT_DATA_FORMAT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultDataFormat",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlResultFormat.class)));
    tmpMap.put(
        _Fields.ORIGINATING_CLIENT_IDENTITY,
        new org.apache.thrift.meta_data.FieldMetaData(
            "originatingClientIdentity",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.PREFER_SINGLE_FILE_RESULT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "preferSingleFileResult",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.PREFER_DRIVER_ONLY_UPLOAD,
        new org.apache.thrift.meta_data.FieldMetaData(
            "preferDriverOnlyUpload",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "enforceEmbeddedSchemaCorrectness",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.IDEMPOTENCY_TOKEN,
        new org.apache.thrift.meta_data.FieldMetaData(
            "idempotencyToken",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "throwErrorOnByteLimitTruncation",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TExecuteStatementReq.class, metaDataMap);
  }

  public TExecuteStatementReq() {
    this.runAsync = false;

    this.queryTimeout = 0L;

    this.enforceEmbeddedSchemaCorrectness = false;
  }

  public TExecuteStatementReq(TSessionHandle sessionHandle, java.lang.String statement) {
    this();
    this.sessionHandle = sessionHandle;
    this.statement = statement;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TExecuteStatementReq(TExecuteStatementReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSessionHandle()) {
      this.sessionHandle = new TSessionHandle(other.sessionHandle);
    }
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetConfOverlay()) {
      java.util.Map<java.lang.String, java.lang.String> __this__confOverlay =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.confOverlay);
      this.confOverlay = __this__confOverlay;
    }
    this.runAsync = other.runAsync;
    if (other.isSetGetDirectResults()) {
      this.getDirectResults = new TSparkGetDirectResults(other.getDirectResults);
    }
    this.queryTimeout = other.queryTimeout;
    this.canReadArrowResult = other.canReadArrowResult;
    this.canDownloadResult = other.canDownloadResult;
    this.canDecompressLZ4Result = other.canDecompressLZ4Result;
    this.maxBytesPerFile = other.maxBytesPerFile;
    if (other.isSetUseArrowNativeTypes()) {
      this.useArrowNativeTypes = new TSparkArrowTypes(other.useArrowNativeTypes);
    }
    this.resultRowLimit = other.resultRowLimit;
    if (other.isSetParameters()) {
      java.util.List<TSparkParameter> __this__parameters =
          new java.util.ArrayList<TSparkParameter>(other.parameters.size());
      for (TSparkParameter other_element : other.parameters) {
        __this__parameters.add(new TSparkParameter(other_element));
      }
      this.parameters = __this__parameters;
    }
    this.maxBytesPerBatch = other.maxBytesPerBatch;
    if (other.isSetStatementConf()) {
      this.statementConf = new TStatementConf(other.statementConf);
    }
    if (other.isSetOperationId()) {
      this.operationId = new THandleIdentifier(other.operationId);
    }
    if (other.isSetSessionConf()) {
      this.sessionConf = new TDBSqlSessionConf(other.sessionConf);
    }
    this.rejectHighCostQueries = other.rejectHighCostQueries;
    this.estimatedCost = other.estimatedCost;
    this.executionVersion = other.executionVersion;
    if (other.isSetRequestValidation()) {
      this.requestValidation = org.apache.thrift.TBaseHelper.copyBinary(other.requestValidation);
    }
    if (other.isSetResultPersistenceMode()) {
      this.resultPersistenceMode = other.resultPersistenceMode;
    }
    this.trimArrowBatchesToLimit = other.trimArrowBatchesToLimit;
    if (other.isSetFetchDisposition()) {
      this.fetchDisposition = other.fetchDisposition;
    }
    this.enforceResultPersistenceMode = other.enforceResultPersistenceMode;
    if (other.isSetStatementList()) {
      java.util.List<TDBSqlStatement> __this__statementList =
          new java.util.ArrayList<TDBSqlStatement>(other.statementList.size());
      for (TDBSqlStatement other_element : other.statementList) {
        __this__statementList.add(new TDBSqlStatement(other_element));
      }
      this.statementList = __this__statementList;
    }
    this.persistResultManifest = other.persistResultManifest;
    this.resultRetentionSeconds = other.resultRetentionSeconds;
    this.resultByteLimit = other.resultByteLimit;
    if (other.isSetResultDataFormat()) {
      this.resultDataFormat = new TDBSqlResultFormat(other.resultDataFormat);
    }
    if (other.isSetOriginatingClientIdentity()) {
      this.originatingClientIdentity = other.originatingClientIdentity;
    }
    this.preferSingleFileResult = other.preferSingleFileResult;
    this.preferDriverOnlyUpload = other.preferDriverOnlyUpload;
    this.enforceEmbeddedSchemaCorrectness = other.enforceEmbeddedSchemaCorrectness;
    if (other.isSetIdempotencyToken()) {
      this.idempotencyToken = other.idempotencyToken;
    }
    this.throwErrorOnByteLimitTruncation = other.throwErrorOnByteLimitTruncation;
  }

  @Override
  public TExecuteStatementReq deepCopy() {
    return new TExecuteStatementReq(this);
  }

  @Override
  public void clear() {
    this.sessionHandle = null;
    this.statement = null;
    this.confOverlay = null;
    this.runAsync = false;

    this.getDirectResults = null;
    this.queryTimeout = 0L;

    setCanReadArrowResultIsSet(false);
    this.canReadArrowResult = false;
    setCanDownloadResultIsSet(false);
    this.canDownloadResult = false;
    setCanDecompressLZ4ResultIsSet(false);
    this.canDecompressLZ4Result = false;
    setMaxBytesPerFileIsSet(false);
    this.maxBytesPerFile = 0;
    this.useArrowNativeTypes = null;
    setResultRowLimitIsSet(false);
    this.resultRowLimit = 0;
    this.parameters = null;
    setMaxBytesPerBatchIsSet(false);
    this.maxBytesPerBatch = 0;
    this.statementConf = null;
    this.operationId = null;
    this.sessionConf = null;
    setRejectHighCostQueriesIsSet(false);
    this.rejectHighCostQueries = false;
    setEstimatedCostIsSet(false);
    this.estimatedCost = 0.0;
    setExecutionVersionIsSet(false);
    this.executionVersion = 0;
    this.requestValidation = null;
    this.resultPersistenceMode = null;
    setTrimArrowBatchesToLimitIsSet(false);
    this.trimArrowBatchesToLimit = false;
    this.fetchDisposition = null;
    setEnforceResultPersistenceModeIsSet(false);
    this.enforceResultPersistenceMode = false;
    this.statementList = null;
    setPersistResultManifestIsSet(false);
    this.persistResultManifest = false;
    setResultRetentionSecondsIsSet(false);
    this.resultRetentionSeconds = 0;
    setResultByteLimitIsSet(false);
    this.resultByteLimit = 0;
    this.resultDataFormat = null;
    this.originatingClientIdentity = null;
    setPreferSingleFileResultIsSet(false);
    this.preferSingleFileResult = false;
    setPreferDriverOnlyUploadIsSet(false);
    this.preferDriverOnlyUpload = false;
    this.enforceEmbeddedSchemaCorrectness = false;

    this.idempotencyToken = null;
    setThrowErrorOnByteLimitTruncationIsSet(false);
    this.throwErrorOnByteLimitTruncation = false;
  }

  @org.apache.thrift.annotation.Nullable
  public TSessionHandle getSessionHandle() {
    return this.sessionHandle;
  }

  public TExecuteStatementReq setSessionHandle(
      @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle) {
    this.sessionHandle = sessionHandle;
    return this;
  }

  public void unsetSessionHandle() {
    this.sessionHandle = null;
  }

  /** Returns true if field sessionHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionHandle() {
    return this.sessionHandle != null;
  }

  public void setSessionHandleIsSet(boolean value) {
    if (!value) {
      this.sessionHandle = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatement() {
    return this.statement;
  }

  public TExecuteStatementReq setStatement(
      @org.apache.thrift.annotation.Nullable java.lang.String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  @Deprecated
  public int getConfOverlaySize() {
    return (this.confOverlay == null) ? 0 : this.confOverlay.size();
  }

  @Deprecated
  public void putToConfOverlay(java.lang.String key, java.lang.String val) {
    if (this.confOverlay == null) {
      this.confOverlay = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.confOverlay.put(key, val);
  }

  @Deprecated
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getConfOverlay() {
    return this.confOverlay;
  }

  @Deprecated
  public TExecuteStatementReq setConfOverlay(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> confOverlay) {
    this.confOverlay = confOverlay;
    return this;
  }

  @Deprecated
  public void unsetConfOverlay() {
    this.confOverlay = null;
  }

  /** Returns true if field confOverlay is set (has been assigned a value) and false otherwise */
  @Deprecated
  public boolean isSetConfOverlay() {
    return this.confOverlay != null;
  }

  @Deprecated
  public void setConfOverlayIsSet(boolean value) {
    if (!value) {
      this.confOverlay = null;
    }
  }

  public boolean isRunAsync() {
    return this.runAsync;
  }

  public TExecuteStatementReq setRunAsync(boolean runAsync) {
    this.runAsync = runAsync;
    setRunAsyncIsSet(true);
    return this;
  }

  public void unsetRunAsync() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNASYNC_ISSET_ID);
  }

  /** Returns true if field runAsync is set (has been assigned a value) and false otherwise */
  public boolean isSetRunAsync() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNASYNC_ISSET_ID);
  }

  public void setRunAsyncIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNASYNC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TSparkGetDirectResults getGetDirectResults() {
    return this.getDirectResults;
  }

  public TExecuteStatementReq setGetDirectResults(
      @org.apache.thrift.annotation.Nullable TSparkGetDirectResults getDirectResults) {
    this.getDirectResults = getDirectResults;
    return this;
  }

  public void unsetGetDirectResults() {
    this.getDirectResults = null;
  }

  /**
   * Returns true if field getDirectResults is set (has been assigned a value) and false otherwise
   */
  public boolean isSetGetDirectResults() {
    return this.getDirectResults != null;
  }

  public void setGetDirectResultsIsSet(boolean value) {
    if (!value) {
      this.getDirectResults = null;
    }
  }

  public long getQueryTimeout() {
    return this.queryTimeout;
  }

  public TExecuteStatementReq setQueryTimeout(long queryTimeout) {
    this.queryTimeout = queryTimeout;
    setQueryTimeoutIsSet(true);
    return this;
  }

  public void unsetQueryTimeout() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  /** Returns true if field queryTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  public void setQueryTimeoutIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID, value);
  }

  public boolean isCanReadArrowResult() {
    return this.canReadArrowResult;
  }

  public TExecuteStatementReq setCanReadArrowResult(boolean canReadArrowResult) {
    this.canReadArrowResult = canReadArrowResult;
    setCanReadArrowResultIsSet(true);
    return this;
  }

  public void unsetCanReadArrowResult() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANREADARROWRESULT_ISSET_ID);
  }

  /**
   * Returns true if field canReadArrowResult is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCanReadArrowResult() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANREADARROWRESULT_ISSET_ID);
  }

  public void setCanReadArrowResultIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CANREADARROWRESULT_ISSET_ID, value);
  }

  public boolean isCanDownloadResult() {
    return this.canDownloadResult;
  }

  public TExecuteStatementReq setCanDownloadResult(boolean canDownloadResult) {
    this.canDownloadResult = canDownloadResult;
    setCanDownloadResultIsSet(true);
    return this;
  }

  public void unsetCanDownloadResult() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDOWNLOADRESULT_ISSET_ID);
  }

  /**
   * Returns true if field canDownloadResult is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCanDownloadResult() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDOWNLOADRESULT_ISSET_ID);
  }

  public void setCanDownloadResultIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CANDOWNLOADRESULT_ISSET_ID, value);
  }

  public boolean isCanDecompressLZ4Result() {
    return this.canDecompressLZ4Result;
  }

  public TExecuteStatementReq setCanDecompressLZ4Result(boolean canDecompressLZ4Result) {
    this.canDecompressLZ4Result = canDecompressLZ4Result;
    setCanDecompressLZ4ResultIsSet(true);
    return this;
  }

  public void unsetCanDecompressLZ4Result() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __CANDECOMPRESSLZ4RESULT_ISSET_ID);
  }

  /**
   * Returns true if field canDecompressLZ4Result is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetCanDecompressLZ4Result() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __CANDECOMPRESSLZ4RESULT_ISSET_ID);
  }

  public void setCanDecompressLZ4ResultIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CANDECOMPRESSLZ4RESULT_ISSET_ID, value);
  }

  public long getMaxBytesPerFile() {
    return this.maxBytesPerFile;
  }

  public TExecuteStatementReq setMaxBytesPerFile(long maxBytesPerFile) {
    this.maxBytesPerFile = maxBytesPerFile;
    setMaxBytesPerFileIsSet(true);
    return this;
  }

  public void unsetMaxBytesPerFile() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXBYTESPERFILE_ISSET_ID);
  }

  /**
   * Returns true if field maxBytesPerFile is set (has been assigned a value) and false otherwise
   */
  public boolean isSetMaxBytesPerFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXBYTESPERFILE_ISSET_ID);
  }

  public void setMaxBytesPerFileIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXBYTESPERFILE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TSparkArrowTypes getUseArrowNativeTypes() {
    return this.useArrowNativeTypes;
  }

  public TExecuteStatementReq setUseArrowNativeTypes(
      @org.apache.thrift.annotation.Nullable TSparkArrowTypes useArrowNativeTypes) {
    this.useArrowNativeTypes = useArrowNativeTypes;
    return this;
  }

  public void unsetUseArrowNativeTypes() {
    this.useArrowNativeTypes = null;
  }

  /**
   * Returns true if field useArrowNativeTypes is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetUseArrowNativeTypes() {
    return this.useArrowNativeTypes != null;
  }

  public void setUseArrowNativeTypesIsSet(boolean value) {
    if (!value) {
      this.useArrowNativeTypes = null;
    }
  }

  public long getResultRowLimit() {
    return this.resultRowLimit;
  }

  public TExecuteStatementReq setResultRowLimit(long resultRowLimit) {
    this.resultRowLimit = resultRowLimit;
    setResultRowLimitIsSet(true);
    return this;
  }

  public void unsetResultRowLimit() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTROWLIMIT_ISSET_ID);
  }

  /** Returns true if field resultRowLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetResultRowLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTROWLIMIT_ISSET_ID);
  }

  public void setResultRowLimitIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTROWLIMIT_ISSET_ID, value);
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSparkParameter> getParametersIterator() {
    return (this.parameters == null) ? null : this.parameters.iterator();
  }

  public void addToParameters(TSparkParameter elem) {
    if (this.parameters == null) {
      this.parameters = new java.util.ArrayList<TSparkParameter>();
    }
    this.parameters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSparkParameter> getParameters() {
    return this.parameters;
  }

  public TExecuteStatementReq setParameters(
      @org.apache.thrift.annotation.Nullable java.util.List<TSparkParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public long getMaxBytesPerBatch() {
    return this.maxBytesPerBatch;
  }

  public TExecuteStatementReq setMaxBytesPerBatch(long maxBytesPerBatch) {
    this.maxBytesPerBatch = maxBytesPerBatch;
    setMaxBytesPerBatchIsSet(true);
    return this;
  }

  public void unsetMaxBytesPerBatch() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXBYTESPERBATCH_ISSET_ID);
  }

  /**
   * Returns true if field maxBytesPerBatch is set (has been assigned a value) and false otherwise
   */
  public boolean isSetMaxBytesPerBatch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXBYTESPERBATCH_ISSET_ID);
  }

  public void setMaxBytesPerBatchIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __MAXBYTESPERBATCH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TStatementConf getStatementConf() {
    return this.statementConf;
  }

  public TExecuteStatementReq setStatementConf(
      @org.apache.thrift.annotation.Nullable TStatementConf statementConf) {
    this.statementConf = statementConf;
    return this;
  }

  public void unsetStatementConf() {
    this.statementConf = null;
  }

  /** Returns true if field statementConf is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementConf() {
    return this.statementConf != null;
  }

  public void setStatementConfIsSet(boolean value) {
    if (!value) {
      this.statementConf = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THandleIdentifier getOperationId() {
    return this.operationId;
  }

  public TExecuteStatementReq setOperationId(
      @org.apache.thrift.annotation.Nullable THandleIdentifier operationId) {
    this.operationId = operationId;
    return this;
  }

  public void unsetOperationId() {
    this.operationId = null;
  }

  /** Returns true if field operationId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationId() {
    return this.operationId != null;
  }

  public void setOperationIdIsSet(boolean value) {
    if (!value) {
      this.operationId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlSessionConf getSessionConf() {
    return this.sessionConf;
  }

  public TExecuteStatementReq setSessionConf(
      @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf) {
    this.sessionConf = sessionConf;
    return this;
  }

  public void unsetSessionConf() {
    this.sessionConf = null;
  }

  /** Returns true if field sessionConf is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionConf() {
    return this.sessionConf != null;
  }

  public void setSessionConfIsSet(boolean value) {
    if (!value) {
      this.sessionConf = null;
    }
  }

  public boolean isRejectHighCostQueries() {
    return this.rejectHighCostQueries;
  }

  public TExecuteStatementReq setRejectHighCostQueries(boolean rejectHighCostQueries) {
    this.rejectHighCostQueries = rejectHighCostQueries;
    setRejectHighCostQueriesIsSet(true);
    return this;
  }

  public void unsetRejectHighCostQueries() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __REJECTHIGHCOSTQUERIES_ISSET_ID);
  }

  /**
   * Returns true if field rejectHighCostQueries is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetRejectHighCostQueries() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __REJECTHIGHCOSTQUERIES_ISSET_ID);
  }

  public void setRejectHighCostQueriesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __REJECTHIGHCOSTQUERIES_ISSET_ID, value);
  }

  public double getEstimatedCost() {
    return this.estimatedCost;
  }

  public TExecuteStatementReq setEstimatedCost(double estimatedCost) {
    this.estimatedCost = estimatedCost;
    setEstimatedCostIsSet(true);
    return this;
  }

  public void unsetEstimatedCost() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEDCOST_ISSET_ID);
  }

  /** Returns true if field estimatedCost is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTIMATEDCOST_ISSET_ID);
  }

  public void setEstimatedCostIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTIMATEDCOST_ISSET_ID, value);
  }

  @Deprecated
  public short getExecutionVersion() {
    return this.executionVersion;
  }

  @Deprecated
  public TExecuteStatementReq setExecutionVersion(short executionVersion) {
    this.executionVersion = executionVersion;
    setExecutionVersionIsSet(true);
    return this;
  }

  @Deprecated
  public void unsetExecutionVersion() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTIONVERSION_ISSET_ID);
  }

  /**
   * Returns true if field executionVersion is set (has been assigned a value) and false otherwise
   */
  @Deprecated
  public boolean isSetExecutionVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTIONVERSION_ISSET_ID);
  }

  @Deprecated
  public void setExecutionVersionIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __EXECUTIONVERSION_ISSET_ID, value);
  }

  public byte[] getRequestValidation() {
    setRequestValidation(org.apache.thrift.TBaseHelper.rightSize(requestValidation));
    return requestValidation == null ? null : requestValidation.array();
  }

  public java.nio.ByteBuffer bufferForRequestValidation() {
    return org.apache.thrift.TBaseHelper.copyBinary(requestValidation);
  }

  public TExecuteStatementReq setRequestValidation(byte[] requestValidation) {
    this.requestValidation =
        requestValidation == null
            ? (java.nio.ByteBuffer) null
            : java.nio.ByteBuffer.wrap(requestValidation.clone());
    return this;
  }

  public TExecuteStatementReq setRequestValidation(
      @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer requestValidation) {
    this.requestValidation = org.apache.thrift.TBaseHelper.copyBinary(requestValidation);
    return this;
  }

  public void unsetRequestValidation() {
    this.requestValidation = null;
  }

  /**
   * Returns true if field requestValidation is set (has been assigned a value) and false otherwise
   */
  public boolean isSetRequestValidation() {
    return this.requestValidation != null;
  }

  public void setRequestValidationIsSet(boolean value) {
    if (!value) {
      this.requestValidation = null;
    }
  }

  /**
   * @see TResultPersistenceMode
   */
  @org.apache.thrift.annotation.Nullable
  public TResultPersistenceMode getResultPersistenceMode() {
    return this.resultPersistenceMode;
  }

  /**
   * @see TResultPersistenceMode
   */
  public TExecuteStatementReq setResultPersistenceMode(
      @org.apache.thrift.annotation.Nullable TResultPersistenceMode resultPersistenceMode) {
    this.resultPersistenceMode = resultPersistenceMode;
    return this;
  }

  public void unsetResultPersistenceMode() {
    this.resultPersistenceMode = null;
  }

  /**
   * Returns true if field resultPersistenceMode is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetResultPersistenceMode() {
    return this.resultPersistenceMode != null;
  }

  public void setResultPersistenceModeIsSet(boolean value) {
    if (!value) {
      this.resultPersistenceMode = null;
    }
  }

  public boolean isTrimArrowBatchesToLimit() {
    return this.trimArrowBatchesToLimit;
  }

  public TExecuteStatementReq setTrimArrowBatchesToLimit(boolean trimArrowBatchesToLimit) {
    this.trimArrowBatchesToLimit = trimArrowBatchesToLimit;
    setTrimArrowBatchesToLimitIsSet(true);
    return this;
  }

  public void unsetTrimArrowBatchesToLimit() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __TRIMARROWBATCHESTOLIMIT_ISSET_ID);
  }

  /**
   * Returns true if field trimArrowBatchesToLimit is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetTrimArrowBatchesToLimit() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __TRIMARROWBATCHESTOLIMIT_ISSET_ID);
  }

  public void setTrimArrowBatchesToLimitIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __TRIMARROWBATCHESTOLIMIT_ISSET_ID, value);
  }

  /**
   * @see TDBSqlFetchDisposition
   */
  @org.apache.thrift.annotation.Nullable
  public TDBSqlFetchDisposition getFetchDisposition() {
    return this.fetchDisposition;
  }

  /**
   * @see TDBSqlFetchDisposition
   */
  public TExecuteStatementReq setFetchDisposition(
      @org.apache.thrift.annotation.Nullable TDBSqlFetchDisposition fetchDisposition) {
    this.fetchDisposition = fetchDisposition;
    return this;
  }

  public void unsetFetchDisposition() {
    this.fetchDisposition = null;
  }

  /**
   * Returns true if field fetchDisposition is set (has been assigned a value) and false otherwise
   */
  public boolean isSetFetchDisposition() {
    return this.fetchDisposition != null;
  }

  public void setFetchDispositionIsSet(boolean value) {
    if (!value) {
      this.fetchDisposition = null;
    }
  }

  public boolean isEnforceResultPersistenceMode() {
    return this.enforceResultPersistenceMode;
  }

  public TExecuteStatementReq setEnforceResultPersistenceMode(
      boolean enforceResultPersistenceMode) {
    this.enforceResultPersistenceMode = enforceResultPersistenceMode;
    setEnforceResultPersistenceModeIsSet(true);
    return this;
  }

  public void unsetEnforceResultPersistenceMode() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __ENFORCERESULTPERSISTENCEMODE_ISSET_ID);
  }

  /**
   * Returns true if field enforceResultPersistenceMode is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetEnforceResultPersistenceMode() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __ENFORCERESULTPERSISTENCEMODE_ISSET_ID);
  }

  public void setEnforceResultPersistenceModeIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __ENFORCERESULTPERSISTENCEMODE_ISSET_ID, value);
  }

  public int getStatementListSize() {
    return (this.statementList == null) ? 0 : this.statementList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TDBSqlStatement> getStatementListIterator() {
    return (this.statementList == null) ? null : this.statementList.iterator();
  }

  public void addToStatementList(TDBSqlStatement elem) {
    if (this.statementList == null) {
      this.statementList = new java.util.ArrayList<TDBSqlStatement>();
    }
    this.statementList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TDBSqlStatement> getStatementList() {
    return this.statementList;
  }

  public TExecuteStatementReq setStatementList(
      @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlStatement> statementList) {
    this.statementList = statementList;
    return this;
  }

  public void unsetStatementList() {
    this.statementList = null;
  }

  /** Returns true if field statementList is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementList() {
    return this.statementList != null;
  }

  public void setStatementListIsSet(boolean value) {
    if (!value) {
      this.statementList = null;
    }
  }

  public boolean isPersistResultManifest() {
    return this.persistResultManifest;
  }

  public TExecuteStatementReq setPersistResultManifest(boolean persistResultManifest) {
    this.persistResultManifest = persistResultManifest;
    setPersistResultManifestIsSet(true);
    return this;
  }

  public void unsetPersistResultManifest() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __PERSISTRESULTMANIFEST_ISSET_ID);
  }

  /**
   * Returns true if field persistResultManifest is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetPersistResultManifest() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __PERSISTRESULTMANIFEST_ISSET_ID);
  }

  public void setPersistResultManifestIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __PERSISTRESULTMANIFEST_ISSET_ID, value);
  }

  public long getResultRetentionSeconds() {
    return this.resultRetentionSeconds;
  }

  public TExecuteStatementReq setResultRetentionSeconds(long resultRetentionSeconds) {
    this.resultRetentionSeconds = resultRetentionSeconds;
    setResultRetentionSecondsIsSet(true);
    return this;
  }

  public void unsetResultRetentionSeconds() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __RESULTRETENTIONSECONDS_ISSET_ID);
  }

  /**
   * Returns true if field resultRetentionSeconds is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetResultRetentionSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __RESULTRETENTIONSECONDS_ISSET_ID);
  }

  public void setResultRetentionSecondsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __RESULTRETENTIONSECONDS_ISSET_ID, value);
  }

  public long getResultByteLimit() {
    return this.resultByteLimit;
  }

  public TExecuteStatementReq setResultByteLimit(long resultByteLimit) {
    this.resultByteLimit = resultByteLimit;
    setResultByteLimitIsSet(true);
    return this;
  }

  public void unsetResultByteLimit() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID);
  }

  /**
   * Returns true if field resultByteLimit is set (has been assigned a value) and false otherwise
   */
  public boolean isSetResultByteLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID);
  }

  public void setResultByteLimitIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlResultFormat getResultDataFormat() {
    return this.resultDataFormat;
  }

  public TExecuteStatementReq setResultDataFormat(
      @org.apache.thrift.annotation.Nullable TDBSqlResultFormat resultDataFormat) {
    this.resultDataFormat = resultDataFormat;
    return this;
  }

  public void unsetResultDataFormat() {
    this.resultDataFormat = null;
  }

  /**
   * Returns true if field resultDataFormat is set (has been assigned a value) and false otherwise
   */
  public boolean isSetResultDataFormat() {
    return this.resultDataFormat != null;
  }

  public void setResultDataFormatIsSet(boolean value) {
    if (!value) {
      this.resultDataFormat = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOriginatingClientIdentity() {
    return this.originatingClientIdentity;
  }

  public TExecuteStatementReq setOriginatingClientIdentity(
      @org.apache.thrift.annotation.Nullable java.lang.String originatingClientIdentity) {
    this.originatingClientIdentity = originatingClientIdentity;
    return this;
  }

  public void unsetOriginatingClientIdentity() {
    this.originatingClientIdentity = null;
  }

  /**
   * Returns true if field originatingClientIdentity is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetOriginatingClientIdentity() {
    return this.originatingClientIdentity != null;
  }

  public void setOriginatingClientIdentityIsSet(boolean value) {
    if (!value) {
      this.originatingClientIdentity = null;
    }
  }

  @Deprecated
  public boolean isPreferSingleFileResult() {
    return this.preferSingleFileResult;
  }

  @Deprecated
  public TExecuteStatementReq setPreferSingleFileResult(boolean preferSingleFileResult) {
    this.preferSingleFileResult = preferSingleFileResult;
    setPreferSingleFileResultIsSet(true);
    return this;
  }

  @Deprecated
  public void unsetPreferSingleFileResult() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __PREFERSINGLEFILERESULT_ISSET_ID);
  }

  /**
   * Returns true if field preferSingleFileResult is set (has been assigned a value) and false
   * otherwise
   */
  @Deprecated
  public boolean isSetPreferSingleFileResult() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __PREFERSINGLEFILERESULT_ISSET_ID);
  }

  @Deprecated
  public void setPreferSingleFileResultIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __PREFERSINGLEFILERESULT_ISSET_ID, value);
  }

  public boolean isPreferDriverOnlyUpload() {
    return this.preferDriverOnlyUpload;
  }

  public TExecuteStatementReq setPreferDriverOnlyUpload(boolean preferDriverOnlyUpload) {
    this.preferDriverOnlyUpload = preferDriverOnlyUpload;
    setPreferDriverOnlyUploadIsSet(true);
    return this;
  }

  public void unsetPreferDriverOnlyUpload() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __PREFERDRIVERONLYUPLOAD_ISSET_ID);
  }

  /**
   * Returns true if field preferDriverOnlyUpload is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetPreferDriverOnlyUpload() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __PREFERDRIVERONLYUPLOAD_ISSET_ID);
  }

  public void setPreferDriverOnlyUploadIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __PREFERDRIVERONLYUPLOAD_ISSET_ID, value);
  }

  public boolean isEnforceEmbeddedSchemaCorrectness() {
    return this.enforceEmbeddedSchemaCorrectness;
  }

  public TExecuteStatementReq setEnforceEmbeddedSchemaCorrectness(
      boolean enforceEmbeddedSchemaCorrectness) {
    this.enforceEmbeddedSchemaCorrectness = enforceEmbeddedSchemaCorrectness;
    setEnforceEmbeddedSchemaCorrectnessIsSet(true);
    return this;
  }

  public void unsetEnforceEmbeddedSchemaCorrectness() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __ENFORCEEMBEDDEDSCHEMACORRECTNESS_ISSET_ID);
  }

  /**
   * Returns true if field enforceEmbeddedSchemaCorrectness is set (has been assigned a value) and
   * false otherwise
   */
  public boolean isSetEnforceEmbeddedSchemaCorrectness() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __ENFORCEEMBEDDEDSCHEMACORRECTNESS_ISSET_ID);
  }

  public void setEnforceEmbeddedSchemaCorrectnessIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __ENFORCEEMBEDDEDSCHEMACORRECTNESS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIdempotencyToken() {
    return this.idempotencyToken;
  }

  public TExecuteStatementReq setIdempotencyToken(
      @org.apache.thrift.annotation.Nullable java.lang.String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  public void unsetIdempotencyToken() {
    this.idempotencyToken = null;
  }

  /**
   * Returns true if field idempotencyToken is set (has been assigned a value) and false otherwise
   */
  public boolean isSetIdempotencyToken() {
    return this.idempotencyToken != null;
  }

  public void setIdempotencyTokenIsSet(boolean value) {
    if (!value) {
      this.idempotencyToken = null;
    }
  }

  public boolean isThrowErrorOnByteLimitTruncation() {
    return this.throwErrorOnByteLimitTruncation;
  }

  public TExecuteStatementReq setThrowErrorOnByteLimitTruncation(
      boolean throwErrorOnByteLimitTruncation) {
    this.throwErrorOnByteLimitTruncation = throwErrorOnByteLimitTruncation;
    setThrowErrorOnByteLimitTruncationIsSet(true);
    return this;
  }

  public void unsetThrowErrorOnByteLimitTruncation() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __THROWERRORONBYTELIMITTRUNCATION_ISSET_ID);
  }

  /**
   * Returns true if field throwErrorOnByteLimitTruncation is set (has been assigned a value) and
   * false otherwise
   */
  public boolean isSetThrowErrorOnByteLimitTruncation() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __THROWERRORONBYTELIMITTRUNCATION_ISSET_ID);
  }

  public void setThrowErrorOnByteLimitTruncationIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __THROWERRORONBYTELIMITTRUNCATION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case SESSION_HANDLE:
        if (value == null) {
          unsetSessionHandle();
        } else {
          setSessionHandle((TSessionHandle) value);
        }
        break;

      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((java.lang.String) value);
        }
        break;

      case CONF_OVERLAY:
        if (value == null) {
          unsetConfOverlay();
        } else {
          setConfOverlay((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;

      case RUN_ASYNC:
        if (value == null) {
          unsetRunAsync();
        } else {
          setRunAsync((java.lang.Boolean) value);
        }
        break;

      case GET_DIRECT_RESULTS:
        if (value == null) {
          unsetGetDirectResults();
        } else {
          setGetDirectResults((TSparkGetDirectResults) value);
        }
        break;

      case QUERY_TIMEOUT:
        if (value == null) {
          unsetQueryTimeout();
        } else {
          setQueryTimeout((java.lang.Long) value);
        }
        break;

      case CAN_READ_ARROW_RESULT:
        if (value == null) {
          unsetCanReadArrowResult();
        } else {
          setCanReadArrowResult((java.lang.Boolean) value);
        }
        break;

      case CAN_DOWNLOAD_RESULT:
        if (value == null) {
          unsetCanDownloadResult();
        } else {
          setCanDownloadResult((java.lang.Boolean) value);
        }
        break;

      case CAN_DECOMPRESS_LZ4_RESULT:
        if (value == null) {
          unsetCanDecompressLZ4Result();
        } else {
          setCanDecompressLZ4Result((java.lang.Boolean) value);
        }
        break;

      case MAX_BYTES_PER_FILE:
        if (value == null) {
          unsetMaxBytesPerFile();
        } else {
          setMaxBytesPerFile((java.lang.Long) value);
        }
        break;

      case USE_ARROW_NATIVE_TYPES:
        if (value == null) {
          unsetUseArrowNativeTypes();
        } else {
          setUseArrowNativeTypes((TSparkArrowTypes) value);
        }
        break;

      case RESULT_ROW_LIMIT:
        if (value == null) {
          unsetResultRowLimit();
        } else {
          setResultRowLimit((java.lang.Long) value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((java.util.List<TSparkParameter>) value);
        }
        break;

      case MAX_BYTES_PER_BATCH:
        if (value == null) {
          unsetMaxBytesPerBatch();
        } else {
          setMaxBytesPerBatch((java.lang.Long) value);
        }
        break;

      case STATEMENT_CONF:
        if (value == null) {
          unsetStatementConf();
        } else {
          setStatementConf((TStatementConf) value);
        }
        break;

      case OPERATION_ID:
        if (value == null) {
          unsetOperationId();
        } else {
          setOperationId((THandleIdentifier) value);
        }
        break;

      case SESSION_CONF:
        if (value == null) {
          unsetSessionConf();
        } else {
          setSessionConf((TDBSqlSessionConf) value);
        }
        break;

      case REJECT_HIGH_COST_QUERIES:
        if (value == null) {
          unsetRejectHighCostQueries();
        } else {
          setRejectHighCostQueries((java.lang.Boolean) value);
        }
        break;

      case ESTIMATED_COST:
        if (value == null) {
          unsetEstimatedCost();
        } else {
          setEstimatedCost((java.lang.Double) value);
        }
        break;

      case EXECUTION_VERSION:
        if (value == null) {
          unsetExecutionVersion();
        } else {
          setExecutionVersion((java.lang.Short) value);
        }
        break;

      case REQUEST_VALIDATION:
        if (value == null) {
          unsetRequestValidation();
        } else {
          if (value instanceof byte[]) {
            setRequestValidation((byte[]) value);
          } else {
            setRequestValidation((java.nio.ByteBuffer) value);
          }
        }
        break;

      case RESULT_PERSISTENCE_MODE:
        if (value == null) {
          unsetResultPersistenceMode();
        } else {
          setResultPersistenceMode((TResultPersistenceMode) value);
        }
        break;

      case TRIM_ARROW_BATCHES_TO_LIMIT:
        if (value == null) {
          unsetTrimArrowBatchesToLimit();
        } else {
          setTrimArrowBatchesToLimit((java.lang.Boolean) value);
        }
        break;

      case FETCH_DISPOSITION:
        if (value == null) {
          unsetFetchDisposition();
        } else {
          setFetchDisposition((TDBSqlFetchDisposition) value);
        }
        break;

      case ENFORCE_RESULT_PERSISTENCE_MODE:
        if (value == null) {
          unsetEnforceResultPersistenceMode();
        } else {
          setEnforceResultPersistenceMode((java.lang.Boolean) value);
        }
        break;

      case STATEMENT_LIST:
        if (value == null) {
          unsetStatementList();
        } else {
          setStatementList((java.util.List<TDBSqlStatement>) value);
        }
        break;

      case PERSIST_RESULT_MANIFEST:
        if (value == null) {
          unsetPersistResultManifest();
        } else {
          setPersistResultManifest((java.lang.Boolean) value);
        }
        break;

      case RESULT_RETENTION_SECONDS:
        if (value == null) {
          unsetResultRetentionSeconds();
        } else {
          setResultRetentionSeconds((java.lang.Long) value);
        }
        break;

      case RESULT_BYTE_LIMIT:
        if (value == null) {
          unsetResultByteLimit();
        } else {
          setResultByteLimit((java.lang.Long) value);
        }
        break;

      case RESULT_DATA_FORMAT:
        if (value == null) {
          unsetResultDataFormat();
        } else {
          setResultDataFormat((TDBSqlResultFormat) value);
        }
        break;

      case ORIGINATING_CLIENT_IDENTITY:
        if (value == null) {
          unsetOriginatingClientIdentity();
        } else {
          setOriginatingClientIdentity((java.lang.String) value);
        }
        break;

      case PREFER_SINGLE_FILE_RESULT:
        if (value == null) {
          unsetPreferSingleFileResult();
        } else {
          setPreferSingleFileResult((java.lang.Boolean) value);
        }
        break;

      case PREFER_DRIVER_ONLY_UPLOAD:
        if (value == null) {
          unsetPreferDriverOnlyUpload();
        } else {
          setPreferDriverOnlyUpload((java.lang.Boolean) value);
        }
        break;

      case ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS:
        if (value == null) {
          unsetEnforceEmbeddedSchemaCorrectness();
        } else {
          setEnforceEmbeddedSchemaCorrectness((java.lang.Boolean) value);
        }
        break;

      case IDEMPOTENCY_TOKEN:
        if (value == null) {
          unsetIdempotencyToken();
        } else {
          setIdempotencyToken((java.lang.String) value);
        }
        break;

      case THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION:
        if (value == null) {
          unsetThrowErrorOnByteLimitTruncation();
        } else {
          setThrowErrorOnByteLimitTruncation((java.lang.Boolean) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case SESSION_HANDLE:
        return getSessionHandle();

      case STATEMENT:
        return getStatement();

      case CONF_OVERLAY:
        return getConfOverlay();

      case RUN_ASYNC:
        return isRunAsync();

      case GET_DIRECT_RESULTS:
        return getGetDirectResults();

      case QUERY_TIMEOUT:
        return getQueryTimeout();

      case CAN_READ_ARROW_RESULT:
        return isCanReadArrowResult();

      case CAN_DOWNLOAD_RESULT:
        return isCanDownloadResult();

      case CAN_DECOMPRESS_LZ4_RESULT:
        return isCanDecompressLZ4Result();

      case MAX_BYTES_PER_FILE:
        return getMaxBytesPerFile();

      case USE_ARROW_NATIVE_TYPES:
        return getUseArrowNativeTypes();

      case RESULT_ROW_LIMIT:
        return getResultRowLimit();

      case PARAMETERS:
        return getParameters();

      case MAX_BYTES_PER_BATCH:
        return getMaxBytesPerBatch();

      case STATEMENT_CONF:
        return getStatementConf();

      case OPERATION_ID:
        return getOperationId();

      case SESSION_CONF:
        return getSessionConf();

      case REJECT_HIGH_COST_QUERIES:
        return isRejectHighCostQueries();

      case ESTIMATED_COST:
        return getEstimatedCost();

      case EXECUTION_VERSION:
        return getExecutionVersion();

      case REQUEST_VALIDATION:
        return getRequestValidation();

      case RESULT_PERSISTENCE_MODE:
        return getResultPersistenceMode();

      case TRIM_ARROW_BATCHES_TO_LIMIT:
        return isTrimArrowBatchesToLimit();

      case FETCH_DISPOSITION:
        return getFetchDisposition();

      case ENFORCE_RESULT_PERSISTENCE_MODE:
        return isEnforceResultPersistenceMode();

      case STATEMENT_LIST:
        return getStatementList();

      case PERSIST_RESULT_MANIFEST:
        return isPersistResultManifest();

      case RESULT_RETENTION_SECONDS:
        return getResultRetentionSeconds();

      case RESULT_BYTE_LIMIT:
        return getResultByteLimit();

      case RESULT_DATA_FORMAT:
        return getResultDataFormat();

      case ORIGINATING_CLIENT_IDENTITY:
        return getOriginatingClientIdentity();

      case PREFER_SINGLE_FILE_RESULT:
        return isPreferSingleFileResult();

      case PREFER_DRIVER_ONLY_UPLOAD:
        return isPreferDriverOnlyUpload();

      case ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS:
        return isEnforceEmbeddedSchemaCorrectness();

      case IDEMPOTENCY_TOKEN:
        return getIdempotencyToken();

      case THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION:
        return isThrowErrorOnByteLimitTruncation();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case SESSION_HANDLE:
        return isSetSessionHandle();
      case STATEMENT:
        return isSetStatement();
      case CONF_OVERLAY:
        return isSetConfOverlay();
      case RUN_ASYNC:
        return isSetRunAsync();
      case GET_DIRECT_RESULTS:
        return isSetGetDirectResults();
      case QUERY_TIMEOUT:
        return isSetQueryTimeout();
      case CAN_READ_ARROW_RESULT:
        return isSetCanReadArrowResult();
      case CAN_DOWNLOAD_RESULT:
        return isSetCanDownloadResult();
      case CAN_DECOMPRESS_LZ4_RESULT:
        return isSetCanDecompressLZ4Result();
      case MAX_BYTES_PER_FILE:
        return isSetMaxBytesPerFile();
      case USE_ARROW_NATIVE_TYPES:
        return isSetUseArrowNativeTypes();
      case RESULT_ROW_LIMIT:
        return isSetResultRowLimit();
      case PARAMETERS:
        return isSetParameters();
      case MAX_BYTES_PER_BATCH:
        return isSetMaxBytesPerBatch();
      case STATEMENT_CONF:
        return isSetStatementConf();
      case OPERATION_ID:
        return isSetOperationId();
      case SESSION_CONF:
        return isSetSessionConf();
      case REJECT_HIGH_COST_QUERIES:
        return isSetRejectHighCostQueries();
      case ESTIMATED_COST:
        return isSetEstimatedCost();
      case EXECUTION_VERSION:
        return isSetExecutionVersion();
      case REQUEST_VALIDATION:
        return isSetRequestValidation();
      case RESULT_PERSISTENCE_MODE:
        return isSetResultPersistenceMode();
      case TRIM_ARROW_BATCHES_TO_LIMIT:
        return isSetTrimArrowBatchesToLimit();
      case FETCH_DISPOSITION:
        return isSetFetchDisposition();
      case ENFORCE_RESULT_PERSISTENCE_MODE:
        return isSetEnforceResultPersistenceMode();
      case STATEMENT_LIST:
        return isSetStatementList();
      case PERSIST_RESULT_MANIFEST:
        return isSetPersistResultManifest();
      case RESULT_RETENTION_SECONDS:
        return isSetResultRetentionSeconds();
      case RESULT_BYTE_LIMIT:
        return isSetResultByteLimit();
      case RESULT_DATA_FORMAT:
        return isSetResultDataFormat();
      case ORIGINATING_CLIENT_IDENTITY:
        return isSetOriginatingClientIdentity();
      case PREFER_SINGLE_FILE_RESULT:
        return isSetPreferSingleFileResult();
      case PREFER_DRIVER_ONLY_UPLOAD:
        return isSetPreferDriverOnlyUpload();
      case ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS:
        return isSetEnforceEmbeddedSchemaCorrectness();
      case IDEMPOTENCY_TOKEN:
        return isSetIdempotencyToken();
      case THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION:
        return isSetThrowErrorOnByteLimitTruncation();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecuteStatementReq) return this.equals((TExecuteStatementReq) that);
    return false;
  }

  public boolean equals(TExecuteStatementReq that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_sessionHandle = true && this.isSetSessionHandle();
    boolean that_present_sessionHandle = true && that.isSetSessionHandle();
    if (this_present_sessionHandle || that_present_sessionHandle) {
      if (!(this_present_sessionHandle && that_present_sessionHandle)) return false;
      if (!this.sessionHandle.equals(that.sessionHandle)) return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement)) return false;
      if (!this.statement.equals(that.statement)) return false;
    }

    boolean this_present_confOverlay = true && this.isSetConfOverlay();
    boolean that_present_confOverlay = true && that.isSetConfOverlay();
    if (this_present_confOverlay || that_present_confOverlay) {
      if (!(this_present_confOverlay && that_present_confOverlay)) return false;
      if (!this.confOverlay.equals(that.confOverlay)) return false;
    }

    boolean this_present_runAsync = true && this.isSetRunAsync();
    boolean that_present_runAsync = true && that.isSetRunAsync();
    if (this_present_runAsync || that_present_runAsync) {
      if (!(this_present_runAsync && that_present_runAsync)) return false;
      if (this.runAsync != that.runAsync) return false;
    }

    boolean this_present_getDirectResults = true && this.isSetGetDirectResults();
    boolean that_present_getDirectResults = true && that.isSetGetDirectResults();
    if (this_present_getDirectResults || that_present_getDirectResults) {
      if (!(this_present_getDirectResults && that_present_getDirectResults)) return false;
      if (!this.getDirectResults.equals(that.getDirectResults)) return false;
    }

    boolean this_present_queryTimeout = true && this.isSetQueryTimeout();
    boolean that_present_queryTimeout = true && that.isSetQueryTimeout();
    if (this_present_queryTimeout || that_present_queryTimeout) {
      if (!(this_present_queryTimeout && that_present_queryTimeout)) return false;
      if (this.queryTimeout != that.queryTimeout) return false;
    }

    boolean this_present_canReadArrowResult = true && this.isSetCanReadArrowResult();
    boolean that_present_canReadArrowResult = true && that.isSetCanReadArrowResult();
    if (this_present_canReadArrowResult || that_present_canReadArrowResult) {
      if (!(this_present_canReadArrowResult && that_present_canReadArrowResult)) return false;
      if (this.canReadArrowResult != that.canReadArrowResult) return false;
    }

    boolean this_present_canDownloadResult = true && this.isSetCanDownloadResult();
    boolean that_present_canDownloadResult = true && that.isSetCanDownloadResult();
    if (this_present_canDownloadResult || that_present_canDownloadResult) {
      if (!(this_present_canDownloadResult && that_present_canDownloadResult)) return false;
      if (this.canDownloadResult != that.canDownloadResult) return false;
    }

    boolean this_present_canDecompressLZ4Result = true && this.isSetCanDecompressLZ4Result();
    boolean that_present_canDecompressLZ4Result = true && that.isSetCanDecompressLZ4Result();
    if (this_present_canDecompressLZ4Result || that_present_canDecompressLZ4Result) {
      if (!(this_present_canDecompressLZ4Result && that_present_canDecompressLZ4Result))
        return false;
      if (this.canDecompressLZ4Result != that.canDecompressLZ4Result) return false;
    }

    boolean this_present_maxBytesPerFile = true && this.isSetMaxBytesPerFile();
    boolean that_present_maxBytesPerFile = true && that.isSetMaxBytesPerFile();
    if (this_present_maxBytesPerFile || that_present_maxBytesPerFile) {
      if (!(this_present_maxBytesPerFile && that_present_maxBytesPerFile)) return false;
      if (this.maxBytesPerFile != that.maxBytesPerFile) return false;
    }

    boolean this_present_useArrowNativeTypes = true && this.isSetUseArrowNativeTypes();
    boolean that_present_useArrowNativeTypes = true && that.isSetUseArrowNativeTypes();
    if (this_present_useArrowNativeTypes || that_present_useArrowNativeTypes) {
      if (!(this_present_useArrowNativeTypes && that_present_useArrowNativeTypes)) return false;
      if (!this.useArrowNativeTypes.equals(that.useArrowNativeTypes)) return false;
    }

    boolean this_present_resultRowLimit = true && this.isSetResultRowLimit();
    boolean that_present_resultRowLimit = true && that.isSetResultRowLimit();
    if (this_present_resultRowLimit || that_present_resultRowLimit) {
      if (!(this_present_resultRowLimit && that_present_resultRowLimit)) return false;
      if (this.resultRowLimit != that.resultRowLimit) return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters)) return false;
      if (!this.parameters.equals(that.parameters)) return false;
    }

    boolean this_present_maxBytesPerBatch = true && this.isSetMaxBytesPerBatch();
    boolean that_present_maxBytesPerBatch = true && that.isSetMaxBytesPerBatch();
    if (this_present_maxBytesPerBatch || that_present_maxBytesPerBatch) {
      if (!(this_present_maxBytesPerBatch && that_present_maxBytesPerBatch)) return false;
      if (this.maxBytesPerBatch != that.maxBytesPerBatch) return false;
    }

    boolean this_present_statementConf = true && this.isSetStatementConf();
    boolean that_present_statementConf = true && that.isSetStatementConf();
    if (this_present_statementConf || that_present_statementConf) {
      if (!(this_present_statementConf && that_present_statementConf)) return false;
      if (!this.statementConf.equals(that.statementConf)) return false;
    }

    boolean this_present_operationId = true && this.isSetOperationId();
    boolean that_present_operationId = true && that.isSetOperationId();
    if (this_present_operationId || that_present_operationId) {
      if (!(this_present_operationId && that_present_operationId)) return false;
      if (!this.operationId.equals(that.operationId)) return false;
    }

    boolean this_present_sessionConf = true && this.isSetSessionConf();
    boolean that_present_sessionConf = true && that.isSetSessionConf();
    if (this_present_sessionConf || that_present_sessionConf) {
      if (!(this_present_sessionConf && that_present_sessionConf)) return false;
      if (!this.sessionConf.equals(that.sessionConf)) return false;
    }

    boolean this_present_rejectHighCostQueries = true && this.isSetRejectHighCostQueries();
    boolean that_present_rejectHighCostQueries = true && that.isSetRejectHighCostQueries();
    if (this_present_rejectHighCostQueries || that_present_rejectHighCostQueries) {
      if (!(this_present_rejectHighCostQueries && that_present_rejectHighCostQueries)) return false;
      if (this.rejectHighCostQueries != that.rejectHighCostQueries) return false;
    }

    boolean this_present_estimatedCost = true && this.isSetEstimatedCost();
    boolean that_present_estimatedCost = true && that.isSetEstimatedCost();
    if (this_present_estimatedCost || that_present_estimatedCost) {
      if (!(this_present_estimatedCost && that_present_estimatedCost)) return false;
      if (this.estimatedCost != that.estimatedCost) return false;
    }

    boolean this_present_executionVersion = true && this.isSetExecutionVersion();
    boolean that_present_executionVersion = true && that.isSetExecutionVersion();
    if (this_present_executionVersion || that_present_executionVersion) {
      if (!(this_present_executionVersion && that_present_executionVersion)) return false;
      if (this.executionVersion != that.executionVersion) return false;
    }

    boolean this_present_requestValidation = true && this.isSetRequestValidation();
    boolean that_present_requestValidation = true && that.isSetRequestValidation();
    if (this_present_requestValidation || that_present_requestValidation) {
      if (!(this_present_requestValidation && that_present_requestValidation)) return false;
      if (!this.requestValidation.equals(that.requestValidation)) return false;
    }

    boolean this_present_resultPersistenceMode = true && this.isSetResultPersistenceMode();
    boolean that_present_resultPersistenceMode = true && that.isSetResultPersistenceMode();
    if (this_present_resultPersistenceMode || that_present_resultPersistenceMode) {
      if (!(this_present_resultPersistenceMode && that_present_resultPersistenceMode)) return false;
      if (!this.resultPersistenceMode.equals(that.resultPersistenceMode)) return false;
    }

    boolean this_present_trimArrowBatchesToLimit = true && this.isSetTrimArrowBatchesToLimit();
    boolean that_present_trimArrowBatchesToLimit = true && that.isSetTrimArrowBatchesToLimit();
    if (this_present_trimArrowBatchesToLimit || that_present_trimArrowBatchesToLimit) {
      if (!(this_present_trimArrowBatchesToLimit && that_present_trimArrowBatchesToLimit))
        return false;
      if (this.trimArrowBatchesToLimit != that.trimArrowBatchesToLimit) return false;
    }

    boolean this_present_fetchDisposition = true && this.isSetFetchDisposition();
    boolean that_present_fetchDisposition = true && that.isSetFetchDisposition();
    if (this_present_fetchDisposition || that_present_fetchDisposition) {
      if (!(this_present_fetchDisposition && that_present_fetchDisposition)) return false;
      if (!this.fetchDisposition.equals(that.fetchDisposition)) return false;
    }

    boolean this_present_enforceResultPersistenceMode =
        true && this.isSetEnforceResultPersistenceMode();
    boolean that_present_enforceResultPersistenceMode =
        true && that.isSetEnforceResultPersistenceMode();
    if (this_present_enforceResultPersistenceMode || that_present_enforceResultPersistenceMode) {
      if (!(this_present_enforceResultPersistenceMode && that_present_enforceResultPersistenceMode))
        return false;
      if (this.enforceResultPersistenceMode != that.enforceResultPersistenceMode) return false;
    }

    boolean this_present_statementList = true && this.isSetStatementList();
    boolean that_present_statementList = true && that.isSetStatementList();
    if (this_present_statementList || that_present_statementList) {
      if (!(this_present_statementList && that_present_statementList)) return false;
      if (!this.statementList.equals(that.statementList)) return false;
    }

    boolean this_present_persistResultManifest = true && this.isSetPersistResultManifest();
    boolean that_present_persistResultManifest = true && that.isSetPersistResultManifest();
    if (this_present_persistResultManifest || that_present_persistResultManifest) {
      if (!(this_present_persistResultManifest && that_present_persistResultManifest)) return false;
      if (this.persistResultManifest != that.persistResultManifest) return false;
    }

    boolean this_present_resultRetentionSeconds = true && this.isSetResultRetentionSeconds();
    boolean that_present_resultRetentionSeconds = true && that.isSetResultRetentionSeconds();
    if (this_present_resultRetentionSeconds || that_present_resultRetentionSeconds) {
      if (!(this_present_resultRetentionSeconds && that_present_resultRetentionSeconds))
        return false;
      if (this.resultRetentionSeconds != that.resultRetentionSeconds) return false;
    }

    boolean this_present_resultByteLimit = true && this.isSetResultByteLimit();
    boolean that_present_resultByteLimit = true && that.isSetResultByteLimit();
    if (this_present_resultByteLimit || that_present_resultByteLimit) {
      if (!(this_present_resultByteLimit && that_present_resultByteLimit)) return false;
      if (this.resultByteLimit != that.resultByteLimit) return false;
    }

    boolean this_present_resultDataFormat = true && this.isSetResultDataFormat();
    boolean that_present_resultDataFormat = true && that.isSetResultDataFormat();
    if (this_present_resultDataFormat || that_present_resultDataFormat) {
      if (!(this_present_resultDataFormat && that_present_resultDataFormat)) return false;
      if (!this.resultDataFormat.equals(that.resultDataFormat)) return false;
    }

    boolean this_present_originatingClientIdentity = true && this.isSetOriginatingClientIdentity();
    boolean that_present_originatingClientIdentity = true && that.isSetOriginatingClientIdentity();
    if (this_present_originatingClientIdentity || that_present_originatingClientIdentity) {
      if (!(this_present_originatingClientIdentity && that_present_originatingClientIdentity))
        return false;
      if (!this.originatingClientIdentity.equals(that.originatingClientIdentity)) return false;
    }

    boolean this_present_preferSingleFileResult = true && this.isSetPreferSingleFileResult();
    boolean that_present_preferSingleFileResult = true && that.isSetPreferSingleFileResult();
    if (this_present_preferSingleFileResult || that_present_preferSingleFileResult) {
      if (!(this_present_preferSingleFileResult && that_present_preferSingleFileResult))
        return false;
      if (this.preferSingleFileResult != that.preferSingleFileResult) return false;
    }

    boolean this_present_preferDriverOnlyUpload = true && this.isSetPreferDriverOnlyUpload();
    boolean that_present_preferDriverOnlyUpload = true && that.isSetPreferDriverOnlyUpload();
    if (this_present_preferDriverOnlyUpload || that_present_preferDriverOnlyUpload) {
      if (!(this_present_preferDriverOnlyUpload && that_present_preferDriverOnlyUpload))
        return false;
      if (this.preferDriverOnlyUpload != that.preferDriverOnlyUpload) return false;
    }

    boolean this_present_enforceEmbeddedSchemaCorrectness =
        true && this.isSetEnforceEmbeddedSchemaCorrectness();
    boolean that_present_enforceEmbeddedSchemaCorrectness =
        true && that.isSetEnforceEmbeddedSchemaCorrectness();
    if (this_present_enforceEmbeddedSchemaCorrectness
        || that_present_enforceEmbeddedSchemaCorrectness) {
      if (!(this_present_enforceEmbeddedSchemaCorrectness
          && that_present_enforceEmbeddedSchemaCorrectness)) return false;
      if (this.enforceEmbeddedSchemaCorrectness != that.enforceEmbeddedSchemaCorrectness)
        return false;
    }

    boolean this_present_idempotencyToken = true && this.isSetIdempotencyToken();
    boolean that_present_idempotencyToken = true && that.isSetIdempotencyToken();
    if (this_present_idempotencyToken || that_present_idempotencyToken) {
      if (!(this_present_idempotencyToken && that_present_idempotencyToken)) return false;
      if (!this.idempotencyToken.equals(that.idempotencyToken)) return false;
    }

    boolean this_present_throwErrorOnByteLimitTruncation =
        true && this.isSetThrowErrorOnByteLimitTruncation();
    boolean that_present_throwErrorOnByteLimitTruncation =
        true && that.isSetThrowErrorOnByteLimitTruncation();
    if (this_present_throwErrorOnByteLimitTruncation
        || that_present_throwErrorOnByteLimitTruncation) {
      if (!(this_present_throwErrorOnByteLimitTruncation
          && that_present_throwErrorOnByteLimitTruncation)) return false;
      if (this.throwErrorOnByteLimitTruncation != that.throwErrorOnByteLimitTruncation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSessionHandle()) ? 131071 : 524287);
    if (isSetSessionHandle()) hashCode = hashCode * 8191 + sessionHandle.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatement()) ? 131071 : 524287);
    if (isSetStatement()) hashCode = hashCode * 8191 + statement.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfOverlay()) ? 131071 : 524287);
    if (isSetConfOverlay()) hashCode = hashCode * 8191 + confOverlay.hashCode();

    hashCode = hashCode * 8191 + ((isSetRunAsync()) ? 131071 : 524287);
    if (isSetRunAsync()) hashCode = hashCode * 8191 + ((runAsync) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetGetDirectResults()) ? 131071 : 524287);
    if (isSetGetDirectResults()) hashCode = hashCode * 8191 + getDirectResults.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryTimeout()) ? 131071 : 524287);
    if (isSetQueryTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryTimeout);

    hashCode = hashCode * 8191 + ((isSetCanReadArrowResult()) ? 131071 : 524287);
    if (isSetCanReadArrowResult())
      hashCode = hashCode * 8191 + ((canReadArrowResult) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCanDownloadResult()) ? 131071 : 524287);
    if (isSetCanDownloadResult())
      hashCode = hashCode * 8191 + ((canDownloadResult) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCanDecompressLZ4Result()) ? 131071 : 524287);
    if (isSetCanDecompressLZ4Result())
      hashCode = hashCode * 8191 + ((canDecompressLZ4Result) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMaxBytesPerFile()) ? 131071 : 524287);
    if (isSetMaxBytesPerFile())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxBytesPerFile);

    hashCode = hashCode * 8191 + ((isSetUseArrowNativeTypes()) ? 131071 : 524287);
    if (isSetUseArrowNativeTypes()) hashCode = hashCode * 8191 + useArrowNativeTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultRowLimit()) ? 131071 : 524287);
    if (isSetResultRowLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resultRowLimit);

    hashCode = hashCode * 8191 + ((isSetParameters()) ? 131071 : 524287);
    if (isSetParameters()) hashCode = hashCode * 8191 + parameters.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxBytesPerBatch()) ? 131071 : 524287);
    if (isSetMaxBytesPerBatch())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxBytesPerBatch);

    hashCode = hashCode * 8191 + ((isSetStatementConf()) ? 131071 : 524287);
    if (isSetStatementConf()) hashCode = hashCode * 8191 + statementConf.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperationId()) ? 131071 : 524287);
    if (isSetOperationId()) hashCode = hashCode * 8191 + operationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionConf()) ? 131071 : 524287);
    if (isSetSessionConf()) hashCode = hashCode * 8191 + sessionConf.hashCode();

    hashCode = hashCode * 8191 + ((isSetRejectHighCostQueries()) ? 131071 : 524287);
    if (isSetRejectHighCostQueries())
      hashCode = hashCode * 8191 + ((rejectHighCostQueries) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEstimatedCost()) ? 131071 : 524287);
    if (isSetEstimatedCost())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(estimatedCost);

    hashCode = hashCode * 8191 + ((isSetExecutionVersion()) ? 131071 : 524287);
    if (isSetExecutionVersion()) hashCode = hashCode * 8191 + executionVersion;

    hashCode = hashCode * 8191 + ((isSetRequestValidation()) ? 131071 : 524287);
    if (isSetRequestValidation()) hashCode = hashCode * 8191 + requestValidation.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultPersistenceMode()) ? 131071 : 524287);
    if (isSetResultPersistenceMode()) hashCode = hashCode * 8191 + resultPersistenceMode.getValue();

    hashCode = hashCode * 8191 + ((isSetTrimArrowBatchesToLimit()) ? 131071 : 524287);
    if (isSetTrimArrowBatchesToLimit())
      hashCode = hashCode * 8191 + ((trimArrowBatchesToLimit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFetchDisposition()) ? 131071 : 524287);
    if (isSetFetchDisposition()) hashCode = hashCode * 8191 + fetchDisposition.getValue();

    hashCode = hashCode * 8191 + ((isSetEnforceResultPersistenceMode()) ? 131071 : 524287);
    if (isSetEnforceResultPersistenceMode())
      hashCode = hashCode * 8191 + ((enforceResultPersistenceMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStatementList()) ? 131071 : 524287);
    if (isSetStatementList()) hashCode = hashCode * 8191 + statementList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPersistResultManifest()) ? 131071 : 524287);
    if (isSetPersistResultManifest())
      hashCode = hashCode * 8191 + ((persistResultManifest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResultRetentionSeconds()) ? 131071 : 524287);
    if (isSetResultRetentionSeconds())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resultRetentionSeconds);

    hashCode = hashCode * 8191 + ((isSetResultByteLimit()) ? 131071 : 524287);
    if (isSetResultByteLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resultByteLimit);

    hashCode = hashCode * 8191 + ((isSetResultDataFormat()) ? 131071 : 524287);
    if (isSetResultDataFormat()) hashCode = hashCode * 8191 + resultDataFormat.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginatingClientIdentity()) ? 131071 : 524287);
    if (isSetOriginatingClientIdentity())
      hashCode = hashCode * 8191 + originatingClientIdentity.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreferSingleFileResult()) ? 131071 : 524287);
    if (isSetPreferSingleFileResult())
      hashCode = hashCode * 8191 + ((preferSingleFileResult) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPreferDriverOnlyUpload()) ? 131071 : 524287);
    if (isSetPreferDriverOnlyUpload())
      hashCode = hashCode * 8191 + ((preferDriverOnlyUpload) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnforceEmbeddedSchemaCorrectness()) ? 131071 : 524287);
    if (isSetEnforceEmbeddedSchemaCorrectness())
      hashCode = hashCode * 8191 + ((enforceEmbeddedSchemaCorrectness) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIdempotencyToken()) ? 131071 : 524287);
    if (isSetIdempotencyToken()) hashCode = hashCode * 8191 + idempotencyToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetThrowErrorOnByteLimitTruncation()) ? 131071 : 524287);
    if (isSetThrowErrorOnByteLimitTruncation())
      hashCode = hashCode * 8191 + ((throwErrorOnByteLimitTruncation) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TExecuteStatementReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionHandle(), other.isSetSessionHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionHandle()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.sessionHandle, other.sessionHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatement(), other.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConfOverlay(), other.isSetConfOverlay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfOverlay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confOverlay, other.confOverlay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRunAsync(), other.isSetRunAsync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunAsync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runAsync, other.runAsync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetGetDirectResults(), other.isSetGetDirectResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetDirectResults()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.getDirectResults, other.getDirectResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryTimeout(), other.isSetQueryTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTimeout()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.queryTimeout, other.queryTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCanReadArrowResult(), other.isSetCanReadArrowResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanReadArrowResult()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.canReadArrowResult, other.canReadArrowResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCanDownloadResult(), other.isSetCanDownloadResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanDownloadResult()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.canDownloadResult, other.canDownloadResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetCanDecompressLZ4Result(), other.isSetCanDecompressLZ4Result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanDecompressLZ4Result()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.canDecompressLZ4Result, other.canDecompressLZ4Result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetMaxBytesPerFile(), other.isSetMaxBytesPerFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBytesPerFile()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.maxBytesPerFile, other.maxBytesPerFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetUseArrowNativeTypes(), other.isSetUseArrowNativeTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseArrowNativeTypes()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.useArrowNativeTypes, other.useArrowNativeTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultRowLimit(), other.isSetResultRowLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultRowLimit()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultRowLimit, other.resultRowLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParameters(), other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetMaxBytesPerBatch(), other.isSetMaxBytesPerBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBytesPerBatch()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.maxBytesPerBatch, other.maxBytesPerBatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatementConf(), other.isSetStatementConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementConf()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.statementConf, other.statementConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperationId(), other.isSetOperationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationId, other.operationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSessionConf(), other.isSetSessionConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionConf, other.sessionConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetRejectHighCostQueries(), other.isSetRejectHighCostQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejectHighCostQueries()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.rejectHighCostQueries, other.rejectHighCostQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEstimatedCost(), other.isSetEstimatedCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedCost()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.estimatedCost, other.estimatedCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetExecutionVersion(), other.isSetExecutionVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionVersion()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.executionVersion, other.executionVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetRequestValidation(), other.isSetRequestValidation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestValidation()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.requestValidation, other.requestValidation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetResultPersistenceMode(), other.isSetResultPersistenceMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultPersistenceMode()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.resultPersistenceMode, other.resultPersistenceMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetTrimArrowBatchesToLimit(), other.isSetTrimArrowBatchesToLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrimArrowBatchesToLimit()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.trimArrowBatchesToLimit, other.trimArrowBatchesToLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetFetchDisposition(), other.isSetFetchDisposition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchDisposition()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.fetchDisposition, other.fetchDisposition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetEnforceResultPersistenceMode(), other.isSetEnforceResultPersistenceMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnforceResultPersistenceMode()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.enforceResultPersistenceMode, other.enforceResultPersistenceMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatementList(), other.isSetStatementList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementList()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.statementList, other.statementList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetPersistResultManifest(), other.isSetPersistResultManifest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistResultManifest()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.persistResultManifest, other.persistResultManifest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetResultRetentionSeconds(), other.isSetResultRetentionSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultRetentionSeconds()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.resultRetentionSeconds, other.resultRetentionSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetResultByteLimit(), other.isSetResultByteLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultByteLimit()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultByteLimit, other.resultByteLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetResultDataFormat(), other.isSetResultDataFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultDataFormat()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultDataFormat, other.resultDataFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetOriginatingClientIdentity(), other.isSetOriginatingClientIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginatingClientIdentity()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.originatingClientIdentity, other.originatingClientIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetPreferSingleFileResult(), other.isSetPreferSingleFileResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferSingleFileResult()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.preferSingleFileResult, other.preferSingleFileResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetPreferDriverOnlyUpload(), other.isSetPreferDriverOnlyUpload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferDriverOnlyUpload()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.preferDriverOnlyUpload, other.preferDriverOnlyUpload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetEnforceEmbeddedSchemaCorrectness(), other.isSetEnforceEmbeddedSchemaCorrectness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnforceEmbeddedSchemaCorrectness()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.enforceEmbeddedSchemaCorrectness, other.enforceEmbeddedSchemaCorrectness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetIdempotencyToken(), other.isSetIdempotencyToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdempotencyToken()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.idempotencyToken, other.idempotencyToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetThrowErrorOnByteLimitTruncation(), other.isSetThrowErrorOnByteLimitTruncation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrowErrorOnByteLimitTruncation()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.throwErrorOnByteLimitTruncation, other.throwErrorOnByteLimitTruncation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecuteStatementReq(");
    boolean first = true;

    sb.append("sessionHandle:");
    if (this.sessionHandle == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionHandle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (isSetConfOverlay()) {
      if (!first) sb.append(", ");
      sb.append("confOverlay:");
      if (this.confOverlay == null) {
        sb.append("null");
      } else {
        sb.append(this.confOverlay);
      }
      first = false;
    }
    if (isSetRunAsync()) {
      if (!first) sb.append(", ");
      sb.append("runAsync:");
      sb.append(this.runAsync);
      first = false;
    }
    if (isSetGetDirectResults()) {
      if (!first) sb.append(", ");
      sb.append("getDirectResults:");
      if (this.getDirectResults == null) {
        sb.append("null");
      } else {
        sb.append(this.getDirectResults);
      }
      first = false;
    }
    if (isSetQueryTimeout()) {
      if (!first) sb.append(", ");
      sb.append("queryTimeout:");
      sb.append(this.queryTimeout);
      first = false;
    }
    if (isSetCanReadArrowResult()) {
      if (!first) sb.append(", ");
      sb.append("canReadArrowResult:");
      sb.append(this.canReadArrowResult);
      first = false;
    }
    if (isSetCanDownloadResult()) {
      if (!first) sb.append(", ");
      sb.append("canDownloadResult:");
      sb.append(this.canDownloadResult);
      first = false;
    }
    if (isSetCanDecompressLZ4Result()) {
      if (!first) sb.append(", ");
      sb.append("canDecompressLZ4Result:");
      sb.append(this.canDecompressLZ4Result);
      first = false;
    }
    if (isSetMaxBytesPerFile()) {
      if (!first) sb.append(", ");
      sb.append("maxBytesPerFile:");
      sb.append(this.maxBytesPerFile);
      first = false;
    }
    if (isSetUseArrowNativeTypes()) {
      if (!first) sb.append(", ");
      sb.append("useArrowNativeTypes:");
      if (this.useArrowNativeTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.useArrowNativeTypes);
      }
      first = false;
    }
    if (isSetResultRowLimit()) {
      if (!first) sb.append(", ");
      sb.append("resultRowLimit:");
      sb.append(this.resultRowLimit);
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    if (isSetMaxBytesPerBatch()) {
      if (!first) sb.append(", ");
      sb.append("maxBytesPerBatch:");
      sb.append(this.maxBytesPerBatch);
      first = false;
    }
    if (isSetStatementConf()) {
      if (!first) sb.append(", ");
      sb.append("statementConf:");
      if (this.statementConf == null) {
        sb.append("null");
      } else {
        sb.append(this.statementConf);
      }
      first = false;
    }
    if (isSetOperationId()) {
      if (!first) sb.append(", ");
      sb.append("operationId:");
      if (this.operationId == null) {
        sb.append("null");
      } else {
        sb.append(this.operationId);
      }
      first = false;
    }
    if (isSetSessionConf()) {
      if (!first) sb.append(", ");
      sb.append("sessionConf:");
      if (this.sessionConf == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionConf);
      }
      first = false;
    }
    if (isSetRejectHighCostQueries()) {
      if (!first) sb.append(", ");
      sb.append("rejectHighCostQueries:");
      sb.append(this.rejectHighCostQueries);
      first = false;
    }
    if (isSetEstimatedCost()) {
      if (!first) sb.append(", ");
      sb.append("estimatedCost:");
      sb.append(this.estimatedCost);
      first = false;
    }
    if (isSetExecutionVersion()) {
      if (!first) sb.append(", ");
      sb.append("executionVersion:");
      sb.append(this.executionVersion);
      first = false;
    }
    if (isSetRequestValidation()) {
      if (!first) sb.append(", ");
      sb.append("requestValidation:");
      if (this.requestValidation == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.requestValidation, sb);
      }
      first = false;
    }
    if (isSetResultPersistenceMode()) {
      if (!first) sb.append(", ");
      sb.append("resultPersistenceMode:");
      if (this.resultPersistenceMode == null) {
        sb.append("null");
      } else {
        sb.append(this.resultPersistenceMode);
      }
      first = false;
    }
    if (isSetTrimArrowBatchesToLimit()) {
      if (!first) sb.append(", ");
      sb.append("trimArrowBatchesToLimit:");
      sb.append(this.trimArrowBatchesToLimit);
      first = false;
    }
    if (isSetFetchDisposition()) {
      if (!first) sb.append(", ");
      sb.append("fetchDisposition:");
      if (this.fetchDisposition == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchDisposition);
      }
      first = false;
    }
    if (isSetEnforceResultPersistenceMode()) {
      if (!first) sb.append(", ");
      sb.append("enforceResultPersistenceMode:");
      sb.append(this.enforceResultPersistenceMode);
      first = false;
    }
    if (isSetStatementList()) {
      if (!first) sb.append(", ");
      sb.append("statementList:");
      if (this.statementList == null) {
        sb.append("null");
      } else {
        sb.append(this.statementList);
      }
      first = false;
    }
    if (isSetPersistResultManifest()) {
      if (!first) sb.append(", ");
      sb.append("persistResultManifest:");
      sb.append(this.persistResultManifest);
      first = false;
    }
    if (isSetResultRetentionSeconds()) {
      if (!first) sb.append(", ");
      sb.append("resultRetentionSeconds:");
      sb.append(this.resultRetentionSeconds);
      first = false;
    }
    if (isSetResultByteLimit()) {
      if (!first) sb.append(", ");
      sb.append("resultByteLimit:");
      sb.append(this.resultByteLimit);
      first = false;
    }
    if (isSetResultDataFormat()) {
      if (!first) sb.append(", ");
      sb.append("resultDataFormat:");
      if (this.resultDataFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.resultDataFormat);
      }
      first = false;
    }
    if (isSetOriginatingClientIdentity()) {
      if (!first) sb.append(", ");
      sb.append("originatingClientIdentity:");
      if (this.originatingClientIdentity == null) {
        sb.append("null");
      } else {
        sb.append(this.originatingClientIdentity);
      }
      first = false;
    }
    if (isSetPreferSingleFileResult()) {
      if (!first) sb.append(", ");
      sb.append("preferSingleFileResult:");
      sb.append(this.preferSingleFileResult);
      first = false;
    }
    if (isSetPreferDriverOnlyUpload()) {
      if (!first) sb.append(", ");
      sb.append("preferDriverOnlyUpload:");
      sb.append(this.preferDriverOnlyUpload);
      first = false;
    }
    if (isSetEnforceEmbeddedSchemaCorrectness()) {
      if (!first) sb.append(", ");
      sb.append("enforceEmbeddedSchemaCorrectness:");
      sb.append(this.enforceEmbeddedSchemaCorrectness);
      first = false;
    }
    if (isSetIdempotencyToken()) {
      if (!first) sb.append(", ");
      sb.append("idempotencyToken:");
      if (this.idempotencyToken == null) {
        sb.append("null");
      } else {
        sb.append(this.idempotencyToken);
      }
      first = false;
    }
    if (isSetThrowErrorOnByteLimitTruncation()) {
      if (!first) sb.append(", ");
      sb.append("throwErrorOnByteLimitTruncation:");
      sb.append(this.throwErrorOnByteLimitTruncation);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionHandle == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'sessionHandle' was not present! Struct: " + toString());
    }
    if (statement == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'statement' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sessionHandle != null) {
      sessionHandle.validate();
    }
    if (getDirectResults != null) {
      getDirectResults.validate();
    }
    if (useArrowNativeTypes != null) {
      useArrowNativeTypes.validate();
    }
    if (statementConf != null) {
      statementConf.validate();
    }
    if (operationId != null) {
      operationId.validate();
    }
    if (sessionConf != null) {
      sessionConf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecuteStatementReqStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecuteStatementReqStandardScheme getScheme() {
      return new TExecuteStatementReqStandardScheme();
    }
  }

  private static class TExecuteStatementReqStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TExecuteStatementReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecuteStatementReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionHandle = new TSessionHandle();
              struct.sessionHandle.read(iprot);
              struct.setSessionHandleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONF_OVERLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map278 = iprot.readMapBegin();
                struct.confOverlay =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map278.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key279;
                @org.apache.thrift.annotation.Nullable java.lang.String _val280;
                for (int _i281 = 0; _i281 < _map278.size; ++_i281) {
                  _key279 = iprot.readString();
                  _val280 = iprot.readString();
                  struct.confOverlay.put(_key279, _val280);
                }
                iprot.readMapEnd();
              }
              struct.setConfOverlayIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUN_ASYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.runAsync = iprot.readBool();
              struct.setRunAsyncIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // GET_DIRECT_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.getDirectResults = new TSparkGetDirectResults();
              struct.getDirectResults.read(iprot);
              struct.setGetDirectResultsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryTimeout = iprot.readI64();
              struct.setQueryTimeoutIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1282: // CAN_READ_ARROW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canReadArrowResult = iprot.readBool();
              struct.setCanReadArrowResultIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1283: // CAN_DOWNLOAD_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canDownloadResult = iprot.readBool();
              struct.setCanDownloadResultIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1284: // CAN_DECOMPRESS_LZ4_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canDecompressLZ4Result = iprot.readBool();
              struct.setCanDecompressLZ4ResultIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1285: // MAX_BYTES_PER_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxBytesPerFile = iprot.readI64();
              struct.setMaxBytesPerFileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1286: // USE_ARROW_NATIVE_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.useArrowNativeTypes = new TSparkArrowTypes();
              struct.useArrowNativeTypes.read(iprot);
              struct.setUseArrowNativeTypesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1287: // RESULT_ROW_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resultRowLimit = iprot.readI64();
              struct.setResultRowLimitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1288: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list282 = iprot.readListBegin();
                struct.parameters = new java.util.ArrayList<TSparkParameter>(_list282.size);
                @org.apache.thrift.annotation.Nullable TSparkParameter _elem283;
                for (int _i284 = 0; _i284 < _list282.size; ++_i284) {
                  _elem283 = new TSparkParameter();
                  _elem283.read(iprot);
                  struct.parameters.add(_elem283);
                }
                iprot.readListEnd();
              }
              struct.setParametersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1289: // MAX_BYTES_PER_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxBytesPerBatch = iprot.readI64();
              struct.setMaxBytesPerBatchIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1296: // STATEMENT_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.statementConf = new TStatementConf();
              struct.statementConf.read(iprot);
              struct.setStatementConfIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3329: // OPERATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.operationId = new THandleIdentifier();
              struct.operationId.read(iprot);
              struct.setOperationIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3330: // SESSION_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionConf = new TDBSqlSessionConf();
              struct.sessionConf.read(iprot);
              struct.setSessionConfIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3331: // REJECT_HIGH_COST_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rejectHighCostQueries = iprot.readBool();
              struct.setRejectHighCostQueriesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3332: // ESTIMATED_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.estimatedCost = iprot.readDouble();
              struct.setEstimatedCostIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3333: // EXECUTION_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.executionVersion = iprot.readI16();
              struct.setExecutionVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3334: // REQUEST_VALIDATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestValidation = iprot.readBinary();
              struct.setRequestValidationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3335: // RESULT_PERSISTENCE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultPersistenceMode =
                  com.databricks.jdbc.client.impl.thrift.generated.TResultPersistenceMode
                      .findByValue(iprot.readI32());
              struct.setResultPersistenceModeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3336: // TRIM_ARROW_BATCHES_TO_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trimArrowBatchesToLimit = iprot.readBool();
              struct.setTrimArrowBatchesToLimitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3337: // FETCH_DISPOSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchDisposition =
                  com.databricks.jdbc.client.impl.thrift.generated.TDBSqlFetchDisposition
                      .findByValue(iprot.readI32());
              struct.setFetchDispositionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3344: // ENFORCE_RESULT_PERSISTENCE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enforceResultPersistenceMode = iprot.readBool();
              struct.setEnforceResultPersistenceModeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3345: // STATEMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list285 = iprot.readListBegin();
                struct.statementList = new java.util.ArrayList<TDBSqlStatement>(_list285.size);
                @org.apache.thrift.annotation.Nullable TDBSqlStatement _elem286;
                for (int _i287 = 0; _i287 < _list285.size; ++_i287) {
                  _elem286 = new TDBSqlStatement();
                  _elem286.read(iprot);
                  struct.statementList.add(_elem286);
                }
                iprot.readListEnd();
              }
              struct.setStatementListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3346: // PERSIST_RESULT_MANIFEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.persistResultManifest = iprot.readBool();
              struct.setPersistResultManifestIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3347: // RESULT_RETENTION_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resultRetentionSeconds = iprot.readI64();
              struct.setResultRetentionSecondsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3348: // RESULT_BYTE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resultByteLimit = iprot.readI64();
              struct.setResultByteLimitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3349: // RESULT_DATA_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultDataFormat = new TDBSqlResultFormat();
              struct.resultDataFormat.read(iprot);
              struct.setResultDataFormatIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3350: // ORIGINATING_CLIENT_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originatingClientIdentity = iprot.readString();
              struct.setOriginatingClientIdentityIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3351: // PREFER_SINGLE_FILE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.preferSingleFileResult = iprot.readBool();
              struct.setPreferSingleFileResultIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3352: // PREFER_DRIVER_ONLY_UPLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.preferDriverOnlyUpload = iprot.readBool();
              struct.setPreferDriverOnlyUploadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3353: // ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enforceEmbeddedSchemaCorrectness = iprot.readBool();
              struct.setEnforceEmbeddedSchemaCorrectnessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3360: // IDEMPOTENCY_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idempotencyToken = iprot.readString();
              struct.setIdempotencyTokenIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3361: // THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.throwErrorOnByteLimitTruncation = iprot.readBool();
              struct.setThrowErrorOnByteLimitTruncationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecuteStatementReq struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sessionHandle != null) {
        oprot.writeFieldBegin(SESSION_HANDLE_FIELD_DESC);
        struct.sessionHandle.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.statement != null) {
        oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
        oprot.writeString(struct.statement);
        oprot.writeFieldEnd();
      }
      if (struct.confOverlay != null) {
        if (struct.isSetConfOverlay()) {
          oprot.writeFieldBegin(CONF_OVERLAY_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.confOverlay.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter288 :
                struct.confOverlay.entrySet()) {
              oprot.writeString(_iter288.getKey());
              oprot.writeString(_iter288.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRunAsync()) {
        oprot.writeFieldBegin(RUN_ASYNC_FIELD_DESC);
        oprot.writeBool(struct.runAsync);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.queryTimeout);
        oprot.writeFieldEnd();
      }
      if (struct.getDirectResults != null) {
        if (struct.isSetGetDirectResults()) {
          oprot.writeFieldBegin(GET_DIRECT_RESULTS_FIELD_DESC);
          struct.getDirectResults.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCanReadArrowResult()) {
        oprot.writeFieldBegin(CAN_READ_ARROW_RESULT_FIELD_DESC);
        oprot.writeBool(struct.canReadArrowResult);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCanDownloadResult()) {
        oprot.writeFieldBegin(CAN_DOWNLOAD_RESULT_FIELD_DESC);
        oprot.writeBool(struct.canDownloadResult);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCanDecompressLZ4Result()) {
        oprot.writeFieldBegin(CAN_DECOMPRESS_LZ4_RESULT_FIELD_DESC);
        oprot.writeBool(struct.canDecompressLZ4Result);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxBytesPerFile()) {
        oprot.writeFieldBegin(MAX_BYTES_PER_FILE_FIELD_DESC);
        oprot.writeI64(struct.maxBytesPerFile);
        oprot.writeFieldEnd();
      }
      if (struct.useArrowNativeTypes != null) {
        if (struct.isSetUseArrowNativeTypes()) {
          oprot.writeFieldBegin(USE_ARROW_NATIVE_TYPES_FIELD_DESC);
          struct.useArrowNativeTypes.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResultRowLimit()) {
        oprot.writeFieldBegin(RESULT_ROW_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.resultRowLimit);
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.parameters.size()));
            for (TSparkParameter _iter289 : struct.parameters) {
              _iter289.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxBytesPerBatch()) {
        oprot.writeFieldBegin(MAX_BYTES_PER_BATCH_FIELD_DESC);
        oprot.writeI64(struct.maxBytesPerBatch);
        oprot.writeFieldEnd();
      }
      if (struct.statementConf != null) {
        if (struct.isSetStatementConf()) {
          oprot.writeFieldBegin(STATEMENT_CONF_FIELD_DESC);
          struct.statementConf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operationId != null) {
        if (struct.isSetOperationId()) {
          oprot.writeFieldBegin(OPERATION_ID_FIELD_DESC);
          struct.operationId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionConf != null) {
        if (struct.isSetSessionConf()) {
          oprot.writeFieldBegin(SESSION_CONF_FIELD_DESC);
          struct.sessionConf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRejectHighCostQueries()) {
        oprot.writeFieldBegin(REJECT_HIGH_COST_QUERIES_FIELD_DESC);
        oprot.writeBool(struct.rejectHighCostQueries);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstimatedCost()) {
        oprot.writeFieldBegin(ESTIMATED_COST_FIELD_DESC);
        oprot.writeDouble(struct.estimatedCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecutionVersion()) {
        oprot.writeFieldBegin(EXECUTION_VERSION_FIELD_DESC);
        oprot.writeI16(struct.executionVersion);
        oprot.writeFieldEnd();
      }
      if (struct.requestValidation != null) {
        if (struct.isSetRequestValidation()) {
          oprot.writeFieldBegin(REQUEST_VALIDATION_FIELD_DESC);
          oprot.writeBinary(struct.requestValidation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultPersistenceMode != null) {
        if (struct.isSetResultPersistenceMode()) {
          oprot.writeFieldBegin(RESULT_PERSISTENCE_MODE_FIELD_DESC);
          oprot.writeI32(struct.resultPersistenceMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrimArrowBatchesToLimit()) {
        oprot.writeFieldBegin(TRIM_ARROW_BATCHES_TO_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.trimArrowBatchesToLimit);
        oprot.writeFieldEnd();
      }
      if (struct.fetchDisposition != null) {
        if (struct.isSetFetchDisposition()) {
          oprot.writeFieldBegin(FETCH_DISPOSITION_FIELD_DESC);
          oprot.writeI32(struct.fetchDisposition.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnforceResultPersistenceMode()) {
        oprot.writeFieldBegin(ENFORCE_RESULT_PERSISTENCE_MODE_FIELD_DESC);
        oprot.writeBool(struct.enforceResultPersistenceMode);
        oprot.writeFieldEnd();
      }
      if (struct.statementList != null) {
        if (struct.isSetStatementList()) {
          oprot.writeFieldBegin(STATEMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.statementList.size()));
            for (TDBSqlStatement _iter290 : struct.statementList) {
              _iter290.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPersistResultManifest()) {
        oprot.writeFieldBegin(PERSIST_RESULT_MANIFEST_FIELD_DESC);
        oprot.writeBool(struct.persistResultManifest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResultRetentionSeconds()) {
        oprot.writeFieldBegin(RESULT_RETENTION_SECONDS_FIELD_DESC);
        oprot.writeI64(struct.resultRetentionSeconds);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResultByteLimit()) {
        oprot.writeFieldBegin(RESULT_BYTE_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.resultByteLimit);
        oprot.writeFieldEnd();
      }
      if (struct.resultDataFormat != null) {
        if (struct.isSetResultDataFormat()) {
          oprot.writeFieldBegin(RESULT_DATA_FORMAT_FIELD_DESC);
          struct.resultDataFormat.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.originatingClientIdentity != null) {
        if (struct.isSetOriginatingClientIdentity()) {
          oprot.writeFieldBegin(ORIGINATING_CLIENT_IDENTITY_FIELD_DESC);
          oprot.writeString(struct.originatingClientIdentity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPreferSingleFileResult()) {
        oprot.writeFieldBegin(PREFER_SINGLE_FILE_RESULT_FIELD_DESC);
        oprot.writeBool(struct.preferSingleFileResult);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreferDriverOnlyUpload()) {
        oprot.writeFieldBegin(PREFER_DRIVER_ONLY_UPLOAD_FIELD_DESC);
        oprot.writeBool(struct.preferDriverOnlyUpload);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnforceEmbeddedSchemaCorrectness()) {
        oprot.writeFieldBegin(ENFORCE_EMBEDDED_SCHEMA_CORRECTNESS_FIELD_DESC);
        oprot.writeBool(struct.enforceEmbeddedSchemaCorrectness);
        oprot.writeFieldEnd();
      }
      if (struct.idempotencyToken != null) {
        if (struct.isSetIdempotencyToken()) {
          oprot.writeFieldBegin(IDEMPOTENCY_TOKEN_FIELD_DESC);
          oprot.writeString(struct.idempotencyToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThrowErrorOnByteLimitTruncation()) {
        oprot.writeFieldBegin(THROW_ERROR_ON_BYTE_LIMIT_TRUNCATION_FIELD_DESC);
        oprot.writeBool(struct.throwErrorOnByteLimitTruncation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TExecuteStatementReqTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecuteStatementReqTupleScheme getScheme() {
      return new TExecuteStatementReqTupleScheme();
    }
  }

  private static class TExecuteStatementReqTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TExecuteStatementReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecuteStatementReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionHandle.write(oprot);
      oprot.writeString(struct.statement);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConfOverlay()) {
        optionals.set(0);
      }
      if (struct.isSetRunAsync()) {
        optionals.set(1);
      }
      if (struct.isSetGetDirectResults()) {
        optionals.set(2);
      }
      if (struct.isSetQueryTimeout()) {
        optionals.set(3);
      }
      if (struct.isSetCanReadArrowResult()) {
        optionals.set(4);
      }
      if (struct.isSetCanDownloadResult()) {
        optionals.set(5);
      }
      if (struct.isSetCanDecompressLZ4Result()) {
        optionals.set(6);
      }
      if (struct.isSetMaxBytesPerFile()) {
        optionals.set(7);
      }
      if (struct.isSetUseArrowNativeTypes()) {
        optionals.set(8);
      }
      if (struct.isSetResultRowLimit()) {
        optionals.set(9);
      }
      if (struct.isSetParameters()) {
        optionals.set(10);
      }
      if (struct.isSetMaxBytesPerBatch()) {
        optionals.set(11);
      }
      if (struct.isSetStatementConf()) {
        optionals.set(12);
      }
      if (struct.isSetOperationId()) {
        optionals.set(13);
      }
      if (struct.isSetSessionConf()) {
        optionals.set(14);
      }
      if (struct.isSetRejectHighCostQueries()) {
        optionals.set(15);
      }
      if (struct.isSetEstimatedCost()) {
        optionals.set(16);
      }
      if (struct.isSetExecutionVersion()) {
        optionals.set(17);
      }
      if (struct.isSetRequestValidation()) {
        optionals.set(18);
      }
      if (struct.isSetResultPersistenceMode()) {
        optionals.set(19);
      }
      if (struct.isSetTrimArrowBatchesToLimit()) {
        optionals.set(20);
      }
      if (struct.isSetFetchDisposition()) {
        optionals.set(21);
      }
      if (struct.isSetEnforceResultPersistenceMode()) {
        optionals.set(22);
      }
      if (struct.isSetStatementList()) {
        optionals.set(23);
      }
      if (struct.isSetPersistResultManifest()) {
        optionals.set(24);
      }
      if (struct.isSetResultRetentionSeconds()) {
        optionals.set(25);
      }
      if (struct.isSetResultByteLimit()) {
        optionals.set(26);
      }
      if (struct.isSetResultDataFormat()) {
        optionals.set(27);
      }
      if (struct.isSetOriginatingClientIdentity()) {
        optionals.set(28);
      }
      if (struct.isSetPreferSingleFileResult()) {
        optionals.set(29);
      }
      if (struct.isSetPreferDriverOnlyUpload()) {
        optionals.set(30);
      }
      if (struct.isSetEnforceEmbeddedSchemaCorrectness()) {
        optionals.set(31);
      }
      if (struct.isSetIdempotencyToken()) {
        optionals.set(32);
      }
      if (struct.isSetThrowErrorOnByteLimitTruncation()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetConfOverlay()) {
        {
          oprot.writeI32(struct.confOverlay.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter291 :
              struct.confOverlay.entrySet()) {
            oprot.writeString(_iter291.getKey());
            oprot.writeString(_iter291.getValue());
          }
        }
      }
      if (struct.isSetRunAsync()) {
        oprot.writeBool(struct.runAsync);
      }
      if (struct.isSetGetDirectResults()) {
        struct.getDirectResults.write(oprot);
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeI64(struct.queryTimeout);
      }
      if (struct.isSetCanReadArrowResult()) {
        oprot.writeBool(struct.canReadArrowResult);
      }
      if (struct.isSetCanDownloadResult()) {
        oprot.writeBool(struct.canDownloadResult);
      }
      if (struct.isSetCanDecompressLZ4Result()) {
        oprot.writeBool(struct.canDecompressLZ4Result);
      }
      if (struct.isSetMaxBytesPerFile()) {
        oprot.writeI64(struct.maxBytesPerFile);
      }
      if (struct.isSetUseArrowNativeTypes()) {
        struct.useArrowNativeTypes.write(oprot);
      }
      if (struct.isSetResultRowLimit()) {
        oprot.writeI64(struct.resultRowLimit);
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.parameters.size());
          for (TSparkParameter _iter292 : struct.parameters) {
            _iter292.write(oprot);
          }
        }
      }
      if (struct.isSetMaxBytesPerBatch()) {
        oprot.writeI64(struct.maxBytesPerBatch);
      }
      if (struct.isSetStatementConf()) {
        struct.statementConf.write(oprot);
      }
      if (struct.isSetOperationId()) {
        struct.operationId.write(oprot);
      }
      if (struct.isSetSessionConf()) {
        struct.sessionConf.write(oprot);
      }
      if (struct.isSetRejectHighCostQueries()) {
        oprot.writeBool(struct.rejectHighCostQueries);
      }
      if (struct.isSetEstimatedCost()) {
        oprot.writeDouble(struct.estimatedCost);
      }
      if (struct.isSetExecutionVersion()) {
        oprot.writeI16(struct.executionVersion);
      }
      if (struct.isSetRequestValidation()) {
        oprot.writeBinary(struct.requestValidation);
      }
      if (struct.isSetResultPersistenceMode()) {
        oprot.writeI32(struct.resultPersistenceMode.getValue());
      }
      if (struct.isSetTrimArrowBatchesToLimit()) {
        oprot.writeBool(struct.trimArrowBatchesToLimit);
      }
      if (struct.isSetFetchDisposition()) {
        oprot.writeI32(struct.fetchDisposition.getValue());
      }
      if (struct.isSetEnforceResultPersistenceMode()) {
        oprot.writeBool(struct.enforceResultPersistenceMode);
      }
      if (struct.isSetStatementList()) {
        {
          oprot.writeI32(struct.statementList.size());
          for (TDBSqlStatement _iter293 : struct.statementList) {
            _iter293.write(oprot);
          }
        }
      }
      if (struct.isSetPersistResultManifest()) {
        oprot.writeBool(struct.persistResultManifest);
      }
      if (struct.isSetResultRetentionSeconds()) {
        oprot.writeI64(struct.resultRetentionSeconds);
      }
      if (struct.isSetResultByteLimit()) {
        oprot.writeI64(struct.resultByteLimit);
      }
      if (struct.isSetResultDataFormat()) {
        struct.resultDataFormat.write(oprot);
      }
      if (struct.isSetOriginatingClientIdentity()) {
        oprot.writeString(struct.originatingClientIdentity);
      }
      if (struct.isSetPreferSingleFileResult()) {
        oprot.writeBool(struct.preferSingleFileResult);
      }
      if (struct.isSetPreferDriverOnlyUpload()) {
        oprot.writeBool(struct.preferDriverOnlyUpload);
      }
      if (struct.isSetEnforceEmbeddedSchemaCorrectness()) {
        oprot.writeBool(struct.enforceEmbeddedSchemaCorrectness);
      }
      if (struct.isSetIdempotencyToken()) {
        oprot.writeString(struct.idempotencyToken);
      }
      if (struct.isSetThrowErrorOnByteLimitTruncation()) {
        oprot.writeBool(struct.throwErrorOnByteLimitTruncation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecuteStatementReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionHandle = new TSessionHandle();
      struct.sessionHandle.read(iprot);
      struct.setSessionHandleIsSet(true);
      struct.statement = iprot.readString();
      struct.setStatementIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map294 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.confOverlay =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map294.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key295;
          @org.apache.thrift.annotation.Nullable java.lang.String _val296;
          for (int _i297 = 0; _i297 < _map294.size; ++_i297) {
            _key295 = iprot.readString();
            _val296 = iprot.readString();
            struct.confOverlay.put(_key295, _val296);
          }
        }
        struct.setConfOverlayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.runAsync = iprot.readBool();
        struct.setRunAsyncIsSet(true);
      }
      if (incoming.get(2)) {
        struct.getDirectResults = new TSparkGetDirectResults();
        struct.getDirectResults.read(iprot);
        struct.setGetDirectResultsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryTimeout = iprot.readI64();
        struct.setQueryTimeoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.canReadArrowResult = iprot.readBool();
        struct.setCanReadArrowResultIsSet(true);
      }
      if (incoming.get(5)) {
        struct.canDownloadResult = iprot.readBool();
        struct.setCanDownloadResultIsSet(true);
      }
      if (incoming.get(6)) {
        struct.canDecompressLZ4Result = iprot.readBool();
        struct.setCanDecompressLZ4ResultIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxBytesPerFile = iprot.readI64();
        struct.setMaxBytesPerFileIsSet(true);
      }
      if (incoming.get(8)) {
        struct.useArrowNativeTypes = new TSparkArrowTypes();
        struct.useArrowNativeTypes.read(iprot);
        struct.setUseArrowNativeTypesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.resultRowLimit = iprot.readI64();
        struct.setResultRowLimitIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list298 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.parameters = new java.util.ArrayList<TSparkParameter>(_list298.size);
          @org.apache.thrift.annotation.Nullable TSparkParameter _elem299;
          for (int _i300 = 0; _i300 < _list298.size; ++_i300) {
            _elem299 = new TSparkParameter();
            _elem299.read(iprot);
            struct.parameters.add(_elem299);
          }
        }
        struct.setParametersIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxBytesPerBatch = iprot.readI64();
        struct.setMaxBytesPerBatchIsSet(true);
      }
      if (incoming.get(12)) {
        struct.statementConf = new TStatementConf();
        struct.statementConf.read(iprot);
        struct.setStatementConfIsSet(true);
      }
      if (incoming.get(13)) {
        struct.operationId = new THandleIdentifier();
        struct.operationId.read(iprot);
        struct.setOperationIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sessionConf = new TDBSqlSessionConf();
        struct.sessionConf.read(iprot);
        struct.setSessionConfIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rejectHighCostQueries = iprot.readBool();
        struct.setRejectHighCostQueriesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.estimatedCost = iprot.readDouble();
        struct.setEstimatedCostIsSet(true);
      }
      if (incoming.get(17)) {
        struct.executionVersion = iprot.readI16();
        struct.setExecutionVersionIsSet(true);
      }
      if (incoming.get(18)) {
        struct.requestValidation = iprot.readBinary();
        struct.setRequestValidationIsSet(true);
      }
      if (incoming.get(19)) {
        struct.resultPersistenceMode =
            com.databricks.jdbc.client.impl.thrift.generated.TResultPersistenceMode.findByValue(
                iprot.readI32());
        struct.setResultPersistenceModeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.trimArrowBatchesToLimit = iprot.readBool();
        struct.setTrimArrowBatchesToLimitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.fetchDisposition =
            com.databricks.jdbc.client.impl.thrift.generated.TDBSqlFetchDisposition.findByValue(
                iprot.readI32());
        struct.setFetchDispositionIsSet(true);
      }
      if (incoming.get(22)) {
        struct.enforceResultPersistenceMode = iprot.readBool();
        struct.setEnforceResultPersistenceModeIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list301 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.statementList = new java.util.ArrayList<TDBSqlStatement>(_list301.size);
          @org.apache.thrift.annotation.Nullable TDBSqlStatement _elem302;
          for (int _i303 = 0; _i303 < _list301.size; ++_i303) {
            _elem302 = new TDBSqlStatement();
            _elem302.read(iprot);
            struct.statementList.add(_elem302);
          }
        }
        struct.setStatementListIsSet(true);
      }
      if (incoming.get(24)) {
        struct.persistResultManifest = iprot.readBool();
        struct.setPersistResultManifestIsSet(true);
      }
      if (incoming.get(25)) {
        struct.resultRetentionSeconds = iprot.readI64();
        struct.setResultRetentionSecondsIsSet(true);
      }
      if (incoming.get(26)) {
        struct.resultByteLimit = iprot.readI64();
        struct.setResultByteLimitIsSet(true);
      }
      if (incoming.get(27)) {
        struct.resultDataFormat = new TDBSqlResultFormat();
        struct.resultDataFormat.read(iprot);
        struct.setResultDataFormatIsSet(true);
      }
      if (incoming.get(28)) {
        struct.originatingClientIdentity = iprot.readString();
        struct.setOriginatingClientIdentityIsSet(true);
      }
      if (incoming.get(29)) {
        struct.preferSingleFileResult = iprot.readBool();
        struct.setPreferSingleFileResultIsSet(true);
      }
      if (incoming.get(30)) {
        struct.preferDriverOnlyUpload = iprot.readBool();
        struct.setPreferDriverOnlyUploadIsSet(true);
      }
      if (incoming.get(31)) {
        struct.enforceEmbeddedSchemaCorrectness = iprot.readBool();
        struct.setEnforceEmbeddedSchemaCorrectnessIsSet(true);
      }
      if (incoming.get(32)) {
        struct.idempotencyToken = iprot.readString();
        struct.setIdempotencyTokenIsSet(true);
      }
      if (incoming.get(33)) {
        struct.throwErrorOnByteLimitTruncation = iprot.readBool();
        struct.setThrowErrorOnByteLimitTruncationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
