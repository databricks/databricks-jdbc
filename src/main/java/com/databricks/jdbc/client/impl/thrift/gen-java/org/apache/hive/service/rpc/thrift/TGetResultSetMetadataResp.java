/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.hive.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-02-23")
public class TGetResultSetMetadataResp
    implements org.apache.thrift.TBase<
            TGetResultSetMetadataResp, TGetResultSetMetadataResp._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TGetResultSetMetadataResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TGetResultSetMetadataResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "status", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "schema", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
  private static final org.apache.thrift.protocol.TField RESULT_FORMAT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultFormat", org.apache.thrift.protocol.TType.I32, (short) 1281);
  private static final org.apache.thrift.protocol.TField LZ4_COMPRESSED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "lz4Compressed", org.apache.thrift.protocol.TType.BOOL, (short) 1282);
  private static final org.apache.thrift.protocol.TField ARROW_SCHEMA_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "arrowSchema", org.apache.thrift.protocol.TType.STRING, (short) 1283);
  private static final org.apache.thrift.protocol.TField CACHE_LOOKUP_RESULT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "cacheLookupResult", org.apache.thrift.protocol.TType.I32, (short) 1284);
  private static final org.apache.thrift.protocol.TField UNCOMPRESSED_BYTES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "uncompressedBytes", org.apache.thrift.protocol.TType.I64, (short) 1285);
  private static final org.apache.thrift.protocol.TField COMPRESSED_BYTES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "compressedBytes", org.apache.thrift.protocol.TType.I64, (short) 1286);
  private static final org.apache.thrift.protocol.TField IS_STAGING_OPERATION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "isStagingOperation", org.apache.thrift.protocol.TType.BOOL, (short) 1287);
  private static final org.apache.thrift.protocol.TField REASON_FOR_NO_CLOUD_FETCH_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "reasonForNoCloudFetch", org.apache.thrift.protocol.TType.I32, (short) 3329);
  private static final org.apache.thrift.protocol.TField RESULT_FILES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultFiles", org.apache.thrift.protocol.TType.LIST, (short) 3330);
  private static final org.apache.thrift.protocol.TField MANIFEST_FILE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "manifestFile", org.apache.thrift.protocol.TType.STRING, (short) 3331);
  private static final org.apache.thrift.protocol.TField MANIFEST_FILE_FORMAT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "manifestFileFormat", org.apache.thrift.protocol.TType.I32, (short) 3332);
  private static final org.apache.thrift.protocol.TField CACHE_LOOKUP_LATENCY_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "cacheLookupLatency", org.apache.thrift.protocol.TType.I64, (short) 3333);
  private static final org.apache.thrift.protocol.TField REMOTE_CACHE_MISS_REASON_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "remoteCacheMissReason", org.apache.thrift.protocol.TType.STRING, (short) 3334);
  private static final org.apache.thrift.protocol.TField FETCH_DISPOSITION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "fetchDisposition", org.apache.thrift.protocol.TType.I32, (short) 3335);
  private static final org.apache.thrift.protocol.TField REMOTE_RESULT_CACHE_ENABLED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "remoteResultCacheEnabled", org.apache.thrift.protocol.TType.BOOL, (short) 3336);
  private static final org.apache.thrift.protocol.TField IS_SERVERLESS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "isServerless", org.apache.thrift.protocol.TType.BOOL, (short) 3337);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FORMAT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultDataFormat", org.apache.thrift.protocol.TType.STRUCT, (short) 3344);
  private static final org.apache.thrift.protocol.TField TRUNCATED_BY_THRIFT_LIMIT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "truncatedByThriftLimit", org.apache.thrift.protocol.TType.BOOL, (short) 3345);
  private static final org.apache.thrift.protocol.TField RESULT_BYTE_LIMIT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultByteLimit", org.apache.thrift.protocol.TType.I64, (short) 3346);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TGetResultSetMetadataRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TGetResultSetMetadataRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TStatus status; // required
  public @org.apache.thrift.annotation.Nullable TTableSchema schema; // optional

  /**
   * @see TSparkRowSetType
   */
  public @org.apache.thrift.annotation.Nullable TSparkRowSetType resultFormat; // optional

  public boolean lz4Compressed; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer arrowSchema; // optional

  /**
   * @see TCacheLookupResult
   */
  public @org.apache.thrift.annotation.Nullable TCacheLookupResult cacheLookupResult; // optional

  public long uncompressedBytes; // optional
  public long compressedBytes; // optional
  public boolean isStagingOperation; // optional

  /**
   * @see TCloudFetchDisabledReason
   */
  public @org.apache.thrift.annotation.Nullable TCloudFetchDisabledReason
      reasonForNoCloudFetch; // optional

  public @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlCloudResultFile>
      resultFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String manifestFile; // optional

  /**
   * @see TDBSqlManifestFileFormat
   */
  public @org.apache.thrift.annotation.Nullable TDBSqlManifestFileFormat
      manifestFileFormat; // optional

  public long cacheLookupLatency; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String remoteCacheMissReason; // optional

  /**
   * @see TDBSqlFetchDisposition
   */
  public @org.apache.thrift.annotation.Nullable TDBSqlFetchDisposition fetchDisposition; // optional

  public boolean remoteResultCacheEnabled; // optional
  public boolean isServerless; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlResultFormat resultDataFormat; // optional
  public boolean truncatedByThriftLimit; // optional
  public long resultByteLimit; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short) 1, "status"),
    SCHEMA((short) 2, "schema"),
    /**
     * @see TSparkRowSetType
     */
    RESULT_FORMAT((short) 1281, "resultFormat"),
    LZ4_COMPRESSED((short) 1282, "lz4Compressed"),
    ARROW_SCHEMA((short) 1283, "arrowSchema"),
    /**
     * @see TCacheLookupResult
     */
    CACHE_LOOKUP_RESULT((short) 1284, "cacheLookupResult"),
    UNCOMPRESSED_BYTES((short) 1285, "uncompressedBytes"),
    COMPRESSED_BYTES((short) 1286, "compressedBytes"),
    IS_STAGING_OPERATION((short) 1287, "isStagingOperation"),
    /**
     * @see TCloudFetchDisabledReason
     */
    REASON_FOR_NO_CLOUD_FETCH((short) 3329, "reasonForNoCloudFetch"),
    RESULT_FILES((short) 3330, "resultFiles"),
    MANIFEST_FILE((short) 3331, "manifestFile"),
    /**
     * @see TDBSqlManifestFileFormat
     */
    MANIFEST_FILE_FORMAT((short) 3332, "manifestFileFormat"),
    CACHE_LOOKUP_LATENCY((short) 3333, "cacheLookupLatency"),
    REMOTE_CACHE_MISS_REASON((short) 3334, "remoteCacheMissReason"),
    /**
     * @see TDBSqlFetchDisposition
     */
    FETCH_DISPOSITION((short) 3335, "fetchDisposition"),
    REMOTE_RESULT_CACHE_ENABLED((short) 3336, "remoteResultCacheEnabled"),
    IS_SERVERLESS((short) 3337, "isServerless"),
    RESULT_DATA_FORMAT((short) 3344, "resultDataFormat"),
    TRUNCATED_BY_THRIFT_LIMIT((short) 3345, "truncatedByThriftLimit"),
    RESULT_BYTE_LIMIT((short) 3346, "resultByteLimit");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // SCHEMA
          return SCHEMA;
        case 1281: // RESULT_FORMAT
          return RESULT_FORMAT;
        case 1282: // LZ4_COMPRESSED
          return LZ4_COMPRESSED;
        case 1283: // ARROW_SCHEMA
          return ARROW_SCHEMA;
        case 1284: // CACHE_LOOKUP_RESULT
          return CACHE_LOOKUP_RESULT;
        case 1285: // UNCOMPRESSED_BYTES
          return UNCOMPRESSED_BYTES;
        case 1286: // COMPRESSED_BYTES
          return COMPRESSED_BYTES;
        case 1287: // IS_STAGING_OPERATION
          return IS_STAGING_OPERATION;
        case 3329: // REASON_FOR_NO_CLOUD_FETCH
          return REASON_FOR_NO_CLOUD_FETCH;
        case 3330: // RESULT_FILES
          return RESULT_FILES;
        case 3331: // MANIFEST_FILE
          return MANIFEST_FILE;
        case 3332: // MANIFEST_FILE_FORMAT
          return MANIFEST_FILE_FORMAT;
        case 3333: // CACHE_LOOKUP_LATENCY
          return CACHE_LOOKUP_LATENCY;
        case 3334: // REMOTE_CACHE_MISS_REASON
          return REMOTE_CACHE_MISS_REASON;
        case 3335: // FETCH_DISPOSITION
          return FETCH_DISPOSITION;
        case 3336: // REMOTE_RESULT_CACHE_ENABLED
          return REMOTE_RESULT_CACHE_ENABLED;
        case 3337: // IS_SERVERLESS
          return IS_SERVERLESS;
        case 3344: // RESULT_DATA_FORMAT
          return RESULT_DATA_FORMAT;
        case 3345: // TRUNCATED_BY_THRIFT_LIMIT
          return TRUNCATED_BY_THRIFT_LIMIT;
        case 3346: // RESULT_BYTE_LIMIT
          return RESULT_BYTE_LIMIT;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LZ4COMPRESSED_ISSET_ID = 0;
  private static final int __UNCOMPRESSEDBYTES_ISSET_ID = 1;
  private static final int __COMPRESSEDBYTES_ISSET_ID = 2;
  private static final int __ISSTAGINGOPERATION_ISSET_ID = 3;
  private static final int __CACHELOOKUPLATENCY_ISSET_ID = 4;
  private static final int __REMOTERESULTCACHEENABLED_ISSET_ID = 5;
  private static final int __ISSERVERLESS_ISSET_ID = 6;
  private static final int __TRUNCATEDBYTHRIFTLIMIT_ISSET_ID = 7;
  private static final int __RESULTBYTELIMIT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.SCHEMA,
    _Fields.RESULT_FORMAT,
    _Fields.LZ4_COMPRESSED,
    _Fields.ARROW_SCHEMA,
    _Fields.CACHE_LOOKUP_RESULT,
    _Fields.UNCOMPRESSED_BYTES,
    _Fields.COMPRESSED_BYTES,
    _Fields.IS_STAGING_OPERATION,
    _Fields.REASON_FOR_NO_CLOUD_FETCH,
    _Fields.RESULT_FILES,
    _Fields.MANIFEST_FILE,
    _Fields.MANIFEST_FILE_FORMAT,
    _Fields.CACHE_LOOKUP_LATENCY,
    _Fields.REMOTE_CACHE_MISS_REASON,
    _Fields.FETCH_DISPOSITION,
    _Fields.REMOTE_RESULT_CACHE_ENABLED,
    _Fields.IS_SERVERLESS,
    _Fields.RESULT_DATA_FORMAT,
    _Fields.TRUNCATED_BY_THRIFT_LIMIT,
    _Fields.RESULT_BYTE_LIMIT
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.STATUS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "status",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TStatus.class)));
    tmpMap.put(
        _Fields.SCHEMA,
        new org.apache.thrift.meta_data.FieldMetaData(
            "schema",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TTableSchema.class)));
    tmpMap.put(
        _Fields.RESULT_FORMAT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultFormat",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TSparkRowSetType.class)));
    tmpMap.put(
        _Fields.LZ4_COMPRESSED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "lz4Compressed",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.ARROW_SCHEMA,
        new org.apache.thrift.meta_data.FieldMetaData(
            "arrowSchema",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING, true)));
    tmpMap.put(
        _Fields.CACHE_LOOKUP_RESULT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "cacheLookupResult",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TCacheLookupResult.class)));
    tmpMap.put(
        _Fields.UNCOMPRESSED_BYTES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "uncompressedBytes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.COMPRESSED_BYTES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "compressedBytes",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.IS_STAGING_OPERATION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "isStagingOperation",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.REASON_FOR_NO_CLOUD_FETCH,
        new org.apache.thrift.meta_data.FieldMetaData(
            "reasonForNoCloudFetch",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TCloudFetchDisabledReason.class)));
    tmpMap.put(
        _Fields.RESULT_FILES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultFiles",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TDBSqlCloudResultFile.class))));
    tmpMap.put(
        _Fields.MANIFEST_FILE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "manifestFile",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.MANIFEST_FILE_FORMAT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "manifestFileFormat",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TDBSqlManifestFileFormat.class)));
    tmpMap.put(
        _Fields.CACHE_LOOKUP_LATENCY,
        new org.apache.thrift.meta_data.FieldMetaData(
            "cacheLookupLatency",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.REMOTE_CACHE_MISS_REASON,
        new org.apache.thrift.meta_data.FieldMetaData(
            "remoteCacheMissReason",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.FETCH_DISPOSITION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "fetchDisposition",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TDBSqlFetchDisposition.class)));
    tmpMap.put(
        _Fields.REMOTE_RESULT_CACHE_ENABLED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "remoteResultCacheEnabled",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.IS_SERVERLESS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "isServerless",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.RESULT_DATA_FORMAT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultDataFormat",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlResultFormat.class)));
    tmpMap.put(
        _Fields.TRUNCATED_BY_THRIFT_LIMIT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "truncatedByThriftLimit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.RESULT_BYTE_LIMIT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultByteLimit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TGetResultSetMetadataResp.class, metaDataMap);
  }

  public TGetResultSetMetadataResp() {}

  public TGetResultSetMetadataResp(TStatus status) {
    this();
    this.status = status;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TGetResultSetMetadataResp(TGetResultSetMetadataResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new TStatus(other.status);
    }
    if (other.isSetSchema()) {
      this.schema = new TTableSchema(other.schema);
    }
    if (other.isSetResultFormat()) {
      this.resultFormat = other.resultFormat;
    }
    this.lz4Compressed = other.lz4Compressed;
    if (other.isSetArrowSchema()) {
      this.arrowSchema = org.apache.thrift.TBaseHelper.copyBinary(other.arrowSchema);
    }
    if (other.isSetCacheLookupResult()) {
      this.cacheLookupResult = other.cacheLookupResult;
    }
    this.uncompressedBytes = other.uncompressedBytes;
    this.compressedBytes = other.compressedBytes;
    this.isStagingOperation = other.isStagingOperation;
    if (other.isSetReasonForNoCloudFetch()) {
      this.reasonForNoCloudFetch = other.reasonForNoCloudFetch;
    }
    if (other.isSetResultFiles()) {
      java.util.List<TDBSqlCloudResultFile> __this__resultFiles =
          new java.util.ArrayList<TDBSqlCloudResultFile>(other.resultFiles.size());
      for (TDBSqlCloudResultFile other_element : other.resultFiles) {
        __this__resultFiles.add(new TDBSqlCloudResultFile(other_element));
      }
      this.resultFiles = __this__resultFiles;
    }
    if (other.isSetManifestFile()) {
      this.manifestFile = other.manifestFile;
    }
    if (other.isSetManifestFileFormat()) {
      this.manifestFileFormat = other.manifestFileFormat;
    }
    this.cacheLookupLatency = other.cacheLookupLatency;
    if (other.isSetRemoteCacheMissReason()) {
      this.remoteCacheMissReason = other.remoteCacheMissReason;
    }
    if (other.isSetFetchDisposition()) {
      this.fetchDisposition = other.fetchDisposition;
    }
    this.remoteResultCacheEnabled = other.remoteResultCacheEnabled;
    this.isServerless = other.isServerless;
    if (other.isSetResultDataFormat()) {
      this.resultDataFormat = new TDBSqlResultFormat(other.resultDataFormat);
    }
    this.truncatedByThriftLimit = other.truncatedByThriftLimit;
    this.resultByteLimit = other.resultByteLimit;
  }

  @Override
  public TGetResultSetMetadataResp deepCopy() {
    return new TGetResultSetMetadataResp(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.schema = null;
    this.resultFormat = null;
    setLz4CompressedIsSet(false);
    this.lz4Compressed = false;
    this.arrowSchema = null;
    this.cacheLookupResult = null;
    setUncompressedBytesIsSet(false);
    this.uncompressedBytes = 0;
    setCompressedBytesIsSet(false);
    this.compressedBytes = 0;
    setIsStagingOperationIsSet(false);
    this.isStagingOperation = false;
    this.reasonForNoCloudFetch = null;
    this.resultFiles = null;
    this.manifestFile = null;
    this.manifestFileFormat = null;
    setCacheLookupLatencyIsSet(false);
    this.cacheLookupLatency = 0;
    this.remoteCacheMissReason = null;
    this.fetchDisposition = null;
    setRemoteResultCacheEnabledIsSet(false);
    this.remoteResultCacheEnabled = false;
    setIsServerlessIsSet(false);
    this.isServerless = false;
    this.resultDataFormat = null;
    setTruncatedByThriftLimitIsSet(false);
    this.truncatedByThriftLimit = false;
    setResultByteLimitIsSet(false);
    this.resultByteLimit = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public TStatus getStatus() {
    return this.status;
  }

  public TGetResultSetMetadataResp setStatus(
      @org.apache.thrift.annotation.Nullable TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTableSchema getSchema() {
    return this.schema;
  }

  public TGetResultSetMetadataResp setSchema(
      @org.apache.thrift.annotation.Nullable TTableSchema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  /**
   * @see TSparkRowSetType
   */
  @org.apache.thrift.annotation.Nullable
  public TSparkRowSetType getResultFormat() {
    return this.resultFormat;
  }

  /**
   * @see TSparkRowSetType
   */
  public TGetResultSetMetadataResp setResultFormat(
      @org.apache.thrift.annotation.Nullable TSparkRowSetType resultFormat) {
    this.resultFormat = resultFormat;
    return this;
  }

  public void unsetResultFormat() {
    this.resultFormat = null;
  }

  /** Returns true if field resultFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetResultFormat() {
    return this.resultFormat != null;
  }

  public void setResultFormatIsSet(boolean value) {
    if (!value) {
      this.resultFormat = null;
    }
  }

  public boolean isLz4Compressed() {
    return this.lz4Compressed;
  }

  public TGetResultSetMetadataResp setLz4Compressed(boolean lz4Compressed) {
    this.lz4Compressed = lz4Compressed;
    setLz4CompressedIsSet(true);
    return this;
  }

  public void unsetLz4Compressed() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LZ4COMPRESSED_ISSET_ID);
  }

  /** Returns true if field lz4Compressed is set (has been assigned a value) and false otherwise */
  public boolean isSetLz4Compressed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LZ4COMPRESSED_ISSET_ID);
  }

  public void setLz4CompressedIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LZ4COMPRESSED_ISSET_ID, value);
  }

  public byte[] getArrowSchema() {
    setArrowSchema(org.apache.thrift.TBaseHelper.rightSize(arrowSchema));
    return arrowSchema == null ? null : arrowSchema.array();
  }

  public java.nio.ByteBuffer bufferForArrowSchema() {
    return org.apache.thrift.TBaseHelper.copyBinary(arrowSchema);
  }

  public TGetResultSetMetadataResp setArrowSchema(byte[] arrowSchema) {
    this.arrowSchema =
        arrowSchema == null
            ? (java.nio.ByteBuffer) null
            : java.nio.ByteBuffer.wrap(arrowSchema.clone());
    return this;
  }

  public TGetResultSetMetadataResp setArrowSchema(
      @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer arrowSchema) {
    this.arrowSchema = org.apache.thrift.TBaseHelper.copyBinary(arrowSchema);
    return this;
  }

  public void unsetArrowSchema() {
    this.arrowSchema = null;
  }

  /** Returns true if field arrowSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetArrowSchema() {
    return this.arrowSchema != null;
  }

  public void setArrowSchemaIsSet(boolean value) {
    if (!value) {
      this.arrowSchema = null;
    }
  }

  /**
   * @see TCacheLookupResult
   */
  @org.apache.thrift.annotation.Nullable
  public TCacheLookupResult getCacheLookupResult() {
    return this.cacheLookupResult;
  }

  /**
   * @see TCacheLookupResult
   */
  public TGetResultSetMetadataResp setCacheLookupResult(
      @org.apache.thrift.annotation.Nullable TCacheLookupResult cacheLookupResult) {
    this.cacheLookupResult = cacheLookupResult;
    return this;
  }

  public void unsetCacheLookupResult() {
    this.cacheLookupResult = null;
  }

  /**
   * Returns true if field cacheLookupResult is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCacheLookupResult() {
    return this.cacheLookupResult != null;
  }

  public void setCacheLookupResultIsSet(boolean value) {
    if (!value) {
      this.cacheLookupResult = null;
    }
  }

  public long getUncompressedBytes() {
    return this.uncompressedBytes;
  }

  public TGetResultSetMetadataResp setUncompressedBytes(long uncompressedBytes) {
    this.uncompressedBytes = uncompressedBytes;
    setUncompressedBytesIsSet(true);
    return this;
  }

  public void unsetUncompressedBytes() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID);
  }

  /**
   * Returns true if field uncompressedBytes is set (has been assigned a value) and false otherwise
   */
  public boolean isSetUncompressedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID);
  }

  public void setUncompressedBytesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __UNCOMPRESSEDBYTES_ISSET_ID, value);
  }

  public long getCompressedBytes() {
    return this.compressedBytes;
  }

  public TGetResultSetMetadataResp setCompressedBytes(long compressedBytes) {
    this.compressedBytes = compressedBytes;
    setCompressedBytesIsSet(true);
    return this;
  }

  public void unsetCompressedBytes() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID);
  }

  /**
   * Returns true if field compressedBytes is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCompressedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID);
  }

  public void setCompressedBytesIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPRESSEDBYTES_ISSET_ID, value);
  }

  public boolean isIsStagingOperation() {
    return this.isStagingOperation;
  }

  public TGetResultSetMetadataResp setIsStagingOperation(boolean isStagingOperation) {
    this.isStagingOperation = isStagingOperation;
    setIsStagingOperationIsSet(true);
    return this;
  }

  public void unsetIsStagingOperation() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAGINGOPERATION_ISSET_ID);
  }

  /**
   * Returns true if field isStagingOperation is set (has been assigned a value) and false otherwise
   */
  public boolean isSetIsStagingOperation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAGINGOPERATION_ISSET_ID);
  }

  public void setIsStagingOperationIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __ISSTAGINGOPERATION_ISSET_ID, value);
  }

  /**
   * @see TCloudFetchDisabledReason
   */
  @org.apache.thrift.annotation.Nullable
  public TCloudFetchDisabledReason getReasonForNoCloudFetch() {
    return this.reasonForNoCloudFetch;
  }

  /**
   * @see TCloudFetchDisabledReason
   */
  public TGetResultSetMetadataResp setReasonForNoCloudFetch(
      @org.apache.thrift.annotation.Nullable TCloudFetchDisabledReason reasonForNoCloudFetch) {
    this.reasonForNoCloudFetch = reasonForNoCloudFetch;
    return this;
  }

  public void unsetReasonForNoCloudFetch() {
    this.reasonForNoCloudFetch = null;
  }

  /**
   * Returns true if field reasonForNoCloudFetch is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetReasonForNoCloudFetch() {
    return this.reasonForNoCloudFetch != null;
  }

  public void setReasonForNoCloudFetchIsSet(boolean value) {
    if (!value) {
      this.reasonForNoCloudFetch = null;
    }
  }

  public int getResultFilesSize() {
    return (this.resultFiles == null) ? 0 : this.resultFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TDBSqlCloudResultFile> getResultFilesIterator() {
    return (this.resultFiles == null) ? null : this.resultFiles.iterator();
  }

  public void addToResultFiles(TDBSqlCloudResultFile elem) {
    if (this.resultFiles == null) {
      this.resultFiles = new java.util.ArrayList<TDBSqlCloudResultFile>();
    }
    this.resultFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TDBSqlCloudResultFile> getResultFiles() {
    return this.resultFiles;
  }

  public TGetResultSetMetadataResp setResultFiles(
      @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlCloudResultFile> resultFiles) {
    this.resultFiles = resultFiles;
    return this;
  }

  public void unsetResultFiles() {
    this.resultFiles = null;
  }

  /** Returns true if field resultFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetResultFiles() {
    return this.resultFiles != null;
  }

  public void setResultFilesIsSet(boolean value) {
    if (!value) {
      this.resultFiles = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getManifestFile() {
    return this.manifestFile;
  }

  public TGetResultSetMetadataResp setManifestFile(
      @org.apache.thrift.annotation.Nullable java.lang.String manifestFile) {
    this.manifestFile = manifestFile;
    return this;
  }

  public void unsetManifestFile() {
    this.manifestFile = null;
  }

  /** Returns true if field manifestFile is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestFile() {
    return this.manifestFile != null;
  }

  public void setManifestFileIsSet(boolean value) {
    if (!value) {
      this.manifestFile = null;
    }
  }

  /**
   * @see TDBSqlManifestFileFormat
   */
  @org.apache.thrift.annotation.Nullable
  public TDBSqlManifestFileFormat getManifestFileFormat() {
    return this.manifestFileFormat;
  }

  /**
   * @see TDBSqlManifestFileFormat
   */
  public TGetResultSetMetadataResp setManifestFileFormat(
      @org.apache.thrift.annotation.Nullable TDBSqlManifestFileFormat manifestFileFormat) {
    this.manifestFileFormat = manifestFileFormat;
    return this;
  }

  public void unsetManifestFileFormat() {
    this.manifestFileFormat = null;
  }

  /**
   * Returns true if field manifestFileFormat is set (has been assigned a value) and false otherwise
   */
  public boolean isSetManifestFileFormat() {
    return this.manifestFileFormat != null;
  }

  public void setManifestFileFormatIsSet(boolean value) {
    if (!value) {
      this.manifestFileFormat = null;
    }
  }

  public long getCacheLookupLatency() {
    return this.cacheLookupLatency;
  }

  public TGetResultSetMetadataResp setCacheLookupLatency(long cacheLookupLatency) {
    this.cacheLookupLatency = cacheLookupLatency;
    setCacheLookupLatencyIsSet(true);
    return this;
  }

  public void unsetCacheLookupLatency() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHELOOKUPLATENCY_ISSET_ID);
  }

  /**
   * Returns true if field cacheLookupLatency is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCacheLookupLatency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHELOOKUPLATENCY_ISSET_ID);
  }

  public void setCacheLookupLatencyIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CACHELOOKUPLATENCY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRemoteCacheMissReason() {
    return this.remoteCacheMissReason;
  }

  public TGetResultSetMetadataResp setRemoteCacheMissReason(
      @org.apache.thrift.annotation.Nullable java.lang.String remoteCacheMissReason) {
    this.remoteCacheMissReason = remoteCacheMissReason;
    return this;
  }

  public void unsetRemoteCacheMissReason() {
    this.remoteCacheMissReason = null;
  }

  /**
   * Returns true if field remoteCacheMissReason is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetRemoteCacheMissReason() {
    return this.remoteCacheMissReason != null;
  }

  public void setRemoteCacheMissReasonIsSet(boolean value) {
    if (!value) {
      this.remoteCacheMissReason = null;
    }
  }

  /**
   * @see TDBSqlFetchDisposition
   */
  @org.apache.thrift.annotation.Nullable
  public TDBSqlFetchDisposition getFetchDisposition() {
    return this.fetchDisposition;
  }

  /**
   * @see TDBSqlFetchDisposition
   */
  public TGetResultSetMetadataResp setFetchDisposition(
      @org.apache.thrift.annotation.Nullable TDBSqlFetchDisposition fetchDisposition) {
    this.fetchDisposition = fetchDisposition;
    return this;
  }

  public void unsetFetchDisposition() {
    this.fetchDisposition = null;
  }

  /**
   * Returns true if field fetchDisposition is set (has been assigned a value) and false otherwise
   */
  public boolean isSetFetchDisposition() {
    return this.fetchDisposition != null;
  }

  public void setFetchDispositionIsSet(boolean value) {
    if (!value) {
      this.fetchDisposition = null;
    }
  }

  public boolean isRemoteResultCacheEnabled() {
    return this.remoteResultCacheEnabled;
  }

  public TGetResultSetMetadataResp setRemoteResultCacheEnabled(boolean remoteResultCacheEnabled) {
    this.remoteResultCacheEnabled = remoteResultCacheEnabled;
    setRemoteResultCacheEnabledIsSet(true);
    return this;
  }

  public void unsetRemoteResultCacheEnabled() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID);
  }

  /**
   * Returns true if field remoteResultCacheEnabled is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetRemoteResultCacheEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID);
  }

  public void setRemoteResultCacheEnabledIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID, value);
  }

  public boolean isIsServerless() {
    return this.isServerless;
  }

  public TGetResultSetMetadataResp setIsServerless(boolean isServerless) {
    this.isServerless = isServerless;
    setIsServerlessIsSet(true);
    return this;
  }

  public void unsetIsServerless() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID);
  }

  /** Returns true if field isServerless is set (has been assigned a value) and false otherwise */
  public boolean isSetIsServerless() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID);
  }

  public void setIsServerlessIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlResultFormat getResultDataFormat() {
    return this.resultDataFormat;
  }

  public TGetResultSetMetadataResp setResultDataFormat(
      @org.apache.thrift.annotation.Nullable TDBSqlResultFormat resultDataFormat) {
    this.resultDataFormat = resultDataFormat;
    return this;
  }

  public void unsetResultDataFormat() {
    this.resultDataFormat = null;
  }

  /**
   * Returns true if field resultDataFormat is set (has been assigned a value) and false otherwise
   */
  public boolean isSetResultDataFormat() {
    return this.resultDataFormat != null;
  }

  public void setResultDataFormatIsSet(boolean value) {
    if (!value) {
      this.resultDataFormat = null;
    }
  }

  public boolean isTruncatedByThriftLimit() {
    return this.truncatedByThriftLimit;
  }

  public TGetResultSetMetadataResp setTruncatedByThriftLimit(boolean truncatedByThriftLimit) {
    this.truncatedByThriftLimit = truncatedByThriftLimit;
    setTruncatedByThriftLimitIsSet(true);
    return this;
  }

  public void unsetTruncatedByThriftLimit() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __TRUNCATEDBYTHRIFTLIMIT_ISSET_ID);
  }

  /**
   * Returns true if field truncatedByThriftLimit is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetTruncatedByThriftLimit() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __TRUNCATEDBYTHRIFTLIMIT_ISSET_ID);
  }

  public void setTruncatedByThriftLimitIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __TRUNCATEDBYTHRIFTLIMIT_ISSET_ID, value);
  }

  public long getResultByteLimit() {
    return this.resultByteLimit;
  }

  public TGetResultSetMetadataResp setResultByteLimit(long resultByteLimit) {
    this.resultByteLimit = resultByteLimit;
    setResultByteLimitIsSet(true);
    return this;
  }

  public void unsetResultByteLimit() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID);
  }

  /**
   * Returns true if field resultByteLimit is set (has been assigned a value) and false otherwise
   */
  public boolean isSetResultByteLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID);
  }

  public void setResultByteLimitIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTBYTELIMIT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TStatus) value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((TTableSchema) value);
        }
        break;

      case RESULT_FORMAT:
        if (value == null) {
          unsetResultFormat();
        } else {
          setResultFormat((TSparkRowSetType) value);
        }
        break;

      case LZ4_COMPRESSED:
        if (value == null) {
          unsetLz4Compressed();
        } else {
          setLz4Compressed((java.lang.Boolean) value);
        }
        break;

      case ARROW_SCHEMA:
        if (value == null) {
          unsetArrowSchema();
        } else {
          if (value instanceof byte[]) {
            setArrowSchema((byte[]) value);
          } else {
            setArrowSchema((java.nio.ByteBuffer) value);
          }
        }
        break;

      case CACHE_LOOKUP_RESULT:
        if (value == null) {
          unsetCacheLookupResult();
        } else {
          setCacheLookupResult((TCacheLookupResult) value);
        }
        break;

      case UNCOMPRESSED_BYTES:
        if (value == null) {
          unsetUncompressedBytes();
        } else {
          setUncompressedBytes((java.lang.Long) value);
        }
        break;

      case COMPRESSED_BYTES:
        if (value == null) {
          unsetCompressedBytes();
        } else {
          setCompressedBytes((java.lang.Long) value);
        }
        break;

      case IS_STAGING_OPERATION:
        if (value == null) {
          unsetIsStagingOperation();
        } else {
          setIsStagingOperation((java.lang.Boolean) value);
        }
        break;

      case REASON_FOR_NO_CLOUD_FETCH:
        if (value == null) {
          unsetReasonForNoCloudFetch();
        } else {
          setReasonForNoCloudFetch((TCloudFetchDisabledReason) value);
        }
        break;

      case RESULT_FILES:
        if (value == null) {
          unsetResultFiles();
        } else {
          setResultFiles((java.util.List<TDBSqlCloudResultFile>) value);
        }
        break;

      case MANIFEST_FILE:
        if (value == null) {
          unsetManifestFile();
        } else {
          setManifestFile((java.lang.String) value);
        }
        break;

      case MANIFEST_FILE_FORMAT:
        if (value == null) {
          unsetManifestFileFormat();
        } else {
          setManifestFileFormat((TDBSqlManifestFileFormat) value);
        }
        break;

      case CACHE_LOOKUP_LATENCY:
        if (value == null) {
          unsetCacheLookupLatency();
        } else {
          setCacheLookupLatency((java.lang.Long) value);
        }
        break;

      case REMOTE_CACHE_MISS_REASON:
        if (value == null) {
          unsetRemoteCacheMissReason();
        } else {
          setRemoteCacheMissReason((java.lang.String) value);
        }
        break;

      case FETCH_DISPOSITION:
        if (value == null) {
          unsetFetchDisposition();
        } else {
          setFetchDisposition((TDBSqlFetchDisposition) value);
        }
        break;

      case REMOTE_RESULT_CACHE_ENABLED:
        if (value == null) {
          unsetRemoteResultCacheEnabled();
        } else {
          setRemoteResultCacheEnabled((java.lang.Boolean) value);
        }
        break;

      case IS_SERVERLESS:
        if (value == null) {
          unsetIsServerless();
        } else {
          setIsServerless((java.lang.Boolean) value);
        }
        break;

      case RESULT_DATA_FORMAT:
        if (value == null) {
          unsetResultDataFormat();
        } else {
          setResultDataFormat((TDBSqlResultFormat) value);
        }
        break;

      case TRUNCATED_BY_THRIFT_LIMIT:
        if (value == null) {
          unsetTruncatedByThriftLimit();
        } else {
          setTruncatedByThriftLimit((java.lang.Boolean) value);
        }
        break;

      case RESULT_BYTE_LIMIT:
        if (value == null) {
          unsetResultByteLimit();
        } else {
          setResultByteLimit((java.lang.Long) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case STATUS:
        return getStatus();

      case SCHEMA:
        return getSchema();

      case RESULT_FORMAT:
        return getResultFormat();

      case LZ4_COMPRESSED:
        return isLz4Compressed();

      case ARROW_SCHEMA:
        return getArrowSchema();

      case CACHE_LOOKUP_RESULT:
        return getCacheLookupResult();

      case UNCOMPRESSED_BYTES:
        return getUncompressedBytes();

      case COMPRESSED_BYTES:
        return getCompressedBytes();

      case IS_STAGING_OPERATION:
        return isIsStagingOperation();

      case REASON_FOR_NO_CLOUD_FETCH:
        return getReasonForNoCloudFetch();

      case RESULT_FILES:
        return getResultFiles();

      case MANIFEST_FILE:
        return getManifestFile();

      case MANIFEST_FILE_FORMAT:
        return getManifestFileFormat();

      case CACHE_LOOKUP_LATENCY:
        return getCacheLookupLatency();

      case REMOTE_CACHE_MISS_REASON:
        return getRemoteCacheMissReason();

      case FETCH_DISPOSITION:
        return getFetchDisposition();

      case REMOTE_RESULT_CACHE_ENABLED:
        return isRemoteResultCacheEnabled();

      case IS_SERVERLESS:
        return isIsServerless();

      case RESULT_DATA_FORMAT:
        return getResultDataFormat();

      case TRUNCATED_BY_THRIFT_LIMIT:
        return isTruncatedByThriftLimit();

      case RESULT_BYTE_LIMIT:
        return getResultByteLimit();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case STATUS:
        return isSetStatus();
      case SCHEMA:
        return isSetSchema();
      case RESULT_FORMAT:
        return isSetResultFormat();
      case LZ4_COMPRESSED:
        return isSetLz4Compressed();
      case ARROW_SCHEMA:
        return isSetArrowSchema();
      case CACHE_LOOKUP_RESULT:
        return isSetCacheLookupResult();
      case UNCOMPRESSED_BYTES:
        return isSetUncompressedBytes();
      case COMPRESSED_BYTES:
        return isSetCompressedBytes();
      case IS_STAGING_OPERATION:
        return isSetIsStagingOperation();
      case REASON_FOR_NO_CLOUD_FETCH:
        return isSetReasonForNoCloudFetch();
      case RESULT_FILES:
        return isSetResultFiles();
      case MANIFEST_FILE:
        return isSetManifestFile();
      case MANIFEST_FILE_FORMAT:
        return isSetManifestFileFormat();
      case CACHE_LOOKUP_LATENCY:
        return isSetCacheLookupLatency();
      case REMOTE_CACHE_MISS_REASON:
        return isSetRemoteCacheMissReason();
      case FETCH_DISPOSITION:
        return isSetFetchDisposition();
      case REMOTE_RESULT_CACHE_ENABLED:
        return isSetRemoteResultCacheEnabled();
      case IS_SERVERLESS:
        return isSetIsServerless();
      case RESULT_DATA_FORMAT:
        return isSetResultDataFormat();
      case TRUNCATED_BY_THRIFT_LIMIT:
        return isSetTruncatedByThriftLimit();
      case RESULT_BYTE_LIMIT:
        return isSetResultByteLimit();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetResultSetMetadataResp)
      return this.equals((TGetResultSetMetadataResp) that);
    return false;
  }

  public boolean equals(TGetResultSetMetadataResp that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status)) return false;
      if (!this.status.equals(that.status)) return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema)) return false;
      if (!this.schema.equals(that.schema)) return false;
    }

    boolean this_present_resultFormat = true && this.isSetResultFormat();
    boolean that_present_resultFormat = true && that.isSetResultFormat();
    if (this_present_resultFormat || that_present_resultFormat) {
      if (!(this_present_resultFormat && that_present_resultFormat)) return false;
      if (!this.resultFormat.equals(that.resultFormat)) return false;
    }

    boolean this_present_lz4Compressed = true && this.isSetLz4Compressed();
    boolean that_present_lz4Compressed = true && that.isSetLz4Compressed();
    if (this_present_lz4Compressed || that_present_lz4Compressed) {
      if (!(this_present_lz4Compressed && that_present_lz4Compressed)) return false;
      if (this.lz4Compressed != that.lz4Compressed) return false;
    }

    boolean this_present_arrowSchema = true && this.isSetArrowSchema();
    boolean that_present_arrowSchema = true && that.isSetArrowSchema();
    if (this_present_arrowSchema || that_present_arrowSchema) {
      if (!(this_present_arrowSchema && that_present_arrowSchema)) return false;
      if (!this.arrowSchema.equals(that.arrowSchema)) return false;
    }

    boolean this_present_cacheLookupResult = true && this.isSetCacheLookupResult();
    boolean that_present_cacheLookupResult = true && that.isSetCacheLookupResult();
    if (this_present_cacheLookupResult || that_present_cacheLookupResult) {
      if (!(this_present_cacheLookupResult && that_present_cacheLookupResult)) return false;
      if (!this.cacheLookupResult.equals(that.cacheLookupResult)) return false;
    }

    boolean this_present_uncompressedBytes = true && this.isSetUncompressedBytes();
    boolean that_present_uncompressedBytes = true && that.isSetUncompressedBytes();
    if (this_present_uncompressedBytes || that_present_uncompressedBytes) {
      if (!(this_present_uncompressedBytes && that_present_uncompressedBytes)) return false;
      if (this.uncompressedBytes != that.uncompressedBytes) return false;
    }

    boolean this_present_compressedBytes = true && this.isSetCompressedBytes();
    boolean that_present_compressedBytes = true && that.isSetCompressedBytes();
    if (this_present_compressedBytes || that_present_compressedBytes) {
      if (!(this_present_compressedBytes && that_present_compressedBytes)) return false;
      if (this.compressedBytes != that.compressedBytes) return false;
    }

    boolean this_present_isStagingOperation = true && this.isSetIsStagingOperation();
    boolean that_present_isStagingOperation = true && that.isSetIsStagingOperation();
    if (this_present_isStagingOperation || that_present_isStagingOperation) {
      if (!(this_present_isStagingOperation && that_present_isStagingOperation)) return false;
      if (this.isStagingOperation != that.isStagingOperation) return false;
    }

    boolean this_present_reasonForNoCloudFetch = true && this.isSetReasonForNoCloudFetch();
    boolean that_present_reasonForNoCloudFetch = true && that.isSetReasonForNoCloudFetch();
    if (this_present_reasonForNoCloudFetch || that_present_reasonForNoCloudFetch) {
      if (!(this_present_reasonForNoCloudFetch && that_present_reasonForNoCloudFetch)) return false;
      if (!this.reasonForNoCloudFetch.equals(that.reasonForNoCloudFetch)) return false;
    }

    boolean this_present_resultFiles = true && this.isSetResultFiles();
    boolean that_present_resultFiles = true && that.isSetResultFiles();
    if (this_present_resultFiles || that_present_resultFiles) {
      if (!(this_present_resultFiles && that_present_resultFiles)) return false;
      if (!this.resultFiles.equals(that.resultFiles)) return false;
    }

    boolean this_present_manifestFile = true && this.isSetManifestFile();
    boolean that_present_manifestFile = true && that.isSetManifestFile();
    if (this_present_manifestFile || that_present_manifestFile) {
      if (!(this_present_manifestFile && that_present_manifestFile)) return false;
      if (!this.manifestFile.equals(that.manifestFile)) return false;
    }

    boolean this_present_manifestFileFormat = true && this.isSetManifestFileFormat();
    boolean that_present_manifestFileFormat = true && that.isSetManifestFileFormat();
    if (this_present_manifestFileFormat || that_present_manifestFileFormat) {
      if (!(this_present_manifestFileFormat && that_present_manifestFileFormat)) return false;
      if (!this.manifestFileFormat.equals(that.manifestFileFormat)) return false;
    }

    boolean this_present_cacheLookupLatency = true && this.isSetCacheLookupLatency();
    boolean that_present_cacheLookupLatency = true && that.isSetCacheLookupLatency();
    if (this_present_cacheLookupLatency || that_present_cacheLookupLatency) {
      if (!(this_present_cacheLookupLatency && that_present_cacheLookupLatency)) return false;
      if (this.cacheLookupLatency != that.cacheLookupLatency) return false;
    }

    boolean this_present_remoteCacheMissReason = true && this.isSetRemoteCacheMissReason();
    boolean that_present_remoteCacheMissReason = true && that.isSetRemoteCacheMissReason();
    if (this_present_remoteCacheMissReason || that_present_remoteCacheMissReason) {
      if (!(this_present_remoteCacheMissReason && that_present_remoteCacheMissReason)) return false;
      if (!this.remoteCacheMissReason.equals(that.remoteCacheMissReason)) return false;
    }

    boolean this_present_fetchDisposition = true && this.isSetFetchDisposition();
    boolean that_present_fetchDisposition = true && that.isSetFetchDisposition();
    if (this_present_fetchDisposition || that_present_fetchDisposition) {
      if (!(this_present_fetchDisposition && that_present_fetchDisposition)) return false;
      if (!this.fetchDisposition.equals(that.fetchDisposition)) return false;
    }

    boolean this_present_remoteResultCacheEnabled = true && this.isSetRemoteResultCacheEnabled();
    boolean that_present_remoteResultCacheEnabled = true && that.isSetRemoteResultCacheEnabled();
    if (this_present_remoteResultCacheEnabled || that_present_remoteResultCacheEnabled) {
      if (!(this_present_remoteResultCacheEnabled && that_present_remoteResultCacheEnabled))
        return false;
      if (this.remoteResultCacheEnabled != that.remoteResultCacheEnabled) return false;
    }

    boolean this_present_isServerless = true && this.isSetIsServerless();
    boolean that_present_isServerless = true && that.isSetIsServerless();
    if (this_present_isServerless || that_present_isServerless) {
      if (!(this_present_isServerless && that_present_isServerless)) return false;
      if (this.isServerless != that.isServerless) return false;
    }

    boolean this_present_resultDataFormat = true && this.isSetResultDataFormat();
    boolean that_present_resultDataFormat = true && that.isSetResultDataFormat();
    if (this_present_resultDataFormat || that_present_resultDataFormat) {
      if (!(this_present_resultDataFormat && that_present_resultDataFormat)) return false;
      if (!this.resultDataFormat.equals(that.resultDataFormat)) return false;
    }

    boolean this_present_truncatedByThriftLimit = true && this.isSetTruncatedByThriftLimit();
    boolean that_present_truncatedByThriftLimit = true && that.isSetTruncatedByThriftLimit();
    if (this_present_truncatedByThriftLimit || that_present_truncatedByThriftLimit) {
      if (!(this_present_truncatedByThriftLimit && that_present_truncatedByThriftLimit))
        return false;
      if (this.truncatedByThriftLimit != that.truncatedByThriftLimit) return false;
    }

    boolean this_present_resultByteLimit = true && this.isSetResultByteLimit();
    boolean that_present_resultByteLimit = true && that.isSetResultByteLimit();
    if (this_present_resultByteLimit || that_present_resultByteLimit) {
      if (!(this_present_resultByteLimit && that_present_resultByteLimit)) return false;
      if (this.resultByteLimit != that.resultByteLimit) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus()) hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema()) hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultFormat()) ? 131071 : 524287);
    if (isSetResultFormat()) hashCode = hashCode * 8191 + resultFormat.getValue();

    hashCode = hashCode * 8191 + ((isSetLz4Compressed()) ? 131071 : 524287);
    if (isSetLz4Compressed()) hashCode = hashCode * 8191 + ((lz4Compressed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetArrowSchema()) ? 131071 : 524287);
    if (isSetArrowSchema()) hashCode = hashCode * 8191 + arrowSchema.hashCode();

    hashCode = hashCode * 8191 + ((isSetCacheLookupResult()) ? 131071 : 524287);
    if (isSetCacheLookupResult()) hashCode = hashCode * 8191 + cacheLookupResult.getValue();

    hashCode = hashCode * 8191 + ((isSetUncompressedBytes()) ? 131071 : 524287);
    if (isSetUncompressedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uncompressedBytes);

    hashCode = hashCode * 8191 + ((isSetCompressedBytes()) ? 131071 : 524287);
    if (isSetCompressedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compressedBytes);

    hashCode = hashCode * 8191 + ((isSetIsStagingOperation()) ? 131071 : 524287);
    if (isSetIsStagingOperation())
      hashCode = hashCode * 8191 + ((isStagingOperation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetReasonForNoCloudFetch()) ? 131071 : 524287);
    if (isSetReasonForNoCloudFetch()) hashCode = hashCode * 8191 + reasonForNoCloudFetch.getValue();

    hashCode = hashCode * 8191 + ((isSetResultFiles()) ? 131071 : 524287);
    if (isSetResultFiles()) hashCode = hashCode * 8191 + resultFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestFile()) ? 131071 : 524287);
    if (isSetManifestFile()) hashCode = hashCode * 8191 + manifestFile.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestFileFormat()) ? 131071 : 524287);
    if (isSetManifestFileFormat()) hashCode = hashCode * 8191 + manifestFileFormat.getValue();

    hashCode = hashCode * 8191 + ((isSetCacheLookupLatency()) ? 131071 : 524287);
    if (isSetCacheLookupLatency())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheLookupLatency);

    hashCode = hashCode * 8191 + ((isSetRemoteCacheMissReason()) ? 131071 : 524287);
    if (isSetRemoteCacheMissReason()) hashCode = hashCode * 8191 + remoteCacheMissReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetFetchDisposition()) ? 131071 : 524287);
    if (isSetFetchDisposition()) hashCode = hashCode * 8191 + fetchDisposition.getValue();

    hashCode = hashCode * 8191 + ((isSetRemoteResultCacheEnabled()) ? 131071 : 524287);
    if (isSetRemoteResultCacheEnabled())
      hashCode = hashCode * 8191 + ((remoteResultCacheEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsServerless()) ? 131071 : 524287);
    if (isSetIsServerless()) hashCode = hashCode * 8191 + ((isServerless) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResultDataFormat()) ? 131071 : 524287);
    if (isSetResultDataFormat()) hashCode = hashCode * 8191 + resultDataFormat.hashCode();

    hashCode = hashCode * 8191 + ((isSetTruncatedByThriftLimit()) ? 131071 : 524287);
    if (isSetTruncatedByThriftLimit())
      hashCode = hashCode * 8191 + ((truncatedByThriftLimit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResultByteLimit()) ? 131071 : 524287);
    if (isSetResultByteLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resultByteLimit);

    return hashCode;
  }

  @Override
  public int compareTo(TGetResultSetMetadataResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema(), other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultFormat(), other.isSetResultFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultFormat()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultFormat, other.resultFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLz4Compressed(), other.isSetLz4Compressed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLz4Compressed()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.lz4Compressed, other.lz4Compressed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArrowSchema(), other.isSetArrowSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrowSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrowSchema, other.arrowSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCacheLookupResult(), other.isSetCacheLookupResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheLookupResult()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.cacheLookupResult, other.cacheLookupResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetUncompressedBytes(), other.isSetUncompressedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncompressedBytes()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.uncompressedBytes, other.uncompressedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCompressedBytes(), other.isSetCompressedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressedBytes()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.compressedBytes, other.compressedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetIsStagingOperation(), other.isSetIsStagingOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStagingOperation()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.isStagingOperation, other.isStagingOperation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetReasonForNoCloudFetch(), other.isSetReasonForNoCloudFetch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasonForNoCloudFetch()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.reasonForNoCloudFetch, other.reasonForNoCloudFetch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultFiles(), other.isSetResultFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultFiles, other.resultFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetManifestFile(), other.isSetManifestFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestFile()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.manifestFile, other.manifestFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetManifestFileFormat(), other.isSetManifestFileFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestFileFormat()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.manifestFileFormat, other.manifestFileFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCacheLookupLatency(), other.isSetCacheLookupLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheLookupLatency()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.cacheLookupLatency, other.cacheLookupLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetRemoteCacheMissReason(), other.isSetRemoteCacheMissReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteCacheMissReason()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.remoteCacheMissReason, other.remoteCacheMissReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetFetchDisposition(), other.isSetFetchDisposition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchDisposition()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.fetchDisposition, other.fetchDisposition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetRemoteResultCacheEnabled(), other.isSetRemoteResultCacheEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteResultCacheEnabled()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.remoteResultCacheEnabled, other.remoteResultCacheEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsServerless(), other.isSetIsServerless());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsServerless()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.isServerless, other.isServerless);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetResultDataFormat(), other.isSetResultDataFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultDataFormat()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultDataFormat, other.resultDataFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetTruncatedByThriftLimit(), other.isSetTruncatedByThriftLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncatedByThriftLimit()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.truncatedByThriftLimit, other.truncatedByThriftLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetResultByteLimit(), other.isSetResultByteLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultByteLimit()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.resultByteLimit, other.resultByteLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetResultSetMetadataResp(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetSchema()) {
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
    }
    if (isSetResultFormat()) {
      if (!first) sb.append(", ");
      sb.append("resultFormat:");
      if (this.resultFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.resultFormat);
      }
      first = false;
    }
    if (isSetLz4Compressed()) {
      if (!first) sb.append(", ");
      sb.append("lz4Compressed:");
      sb.append(this.lz4Compressed);
      first = false;
    }
    if (isSetArrowSchema()) {
      if (!first) sb.append(", ");
      sb.append("arrowSchema:");
      if (this.arrowSchema == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.arrowSchema, sb);
      }
      first = false;
    }
    if (isSetCacheLookupResult()) {
      if (!first) sb.append(", ");
      sb.append("cacheLookupResult:");
      if (this.cacheLookupResult == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheLookupResult);
      }
      first = false;
    }
    if (isSetUncompressedBytes()) {
      if (!first) sb.append(", ");
      sb.append("uncompressedBytes:");
      sb.append(this.uncompressedBytes);
      first = false;
    }
    if (isSetCompressedBytes()) {
      if (!first) sb.append(", ");
      sb.append("compressedBytes:");
      sb.append(this.compressedBytes);
      first = false;
    }
    if (isSetIsStagingOperation()) {
      if (!first) sb.append(", ");
      sb.append("isStagingOperation:");
      sb.append(this.isStagingOperation);
      first = false;
    }
    if (isSetReasonForNoCloudFetch()) {
      if (!first) sb.append(", ");
      sb.append("reasonForNoCloudFetch:");
      if (this.reasonForNoCloudFetch == null) {
        sb.append("null");
      } else {
        sb.append(this.reasonForNoCloudFetch);
      }
      first = false;
    }
    if (isSetResultFiles()) {
      if (!first) sb.append(", ");
      sb.append("resultFiles:");
      if (this.resultFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.resultFiles);
      }
      first = false;
    }
    if (isSetManifestFile()) {
      if (!first) sb.append(", ");
      sb.append("manifestFile:");
      if (this.manifestFile == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestFile);
      }
      first = false;
    }
    if (isSetManifestFileFormat()) {
      if (!first) sb.append(", ");
      sb.append("manifestFileFormat:");
      if (this.manifestFileFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestFileFormat);
      }
      first = false;
    }
    if (isSetCacheLookupLatency()) {
      if (!first) sb.append(", ");
      sb.append("cacheLookupLatency:");
      sb.append(this.cacheLookupLatency);
      first = false;
    }
    if (isSetRemoteCacheMissReason()) {
      if (!first) sb.append(", ");
      sb.append("remoteCacheMissReason:");
      if (this.remoteCacheMissReason == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteCacheMissReason);
      }
      first = false;
    }
    if (isSetFetchDisposition()) {
      if (!first) sb.append(", ");
      sb.append("fetchDisposition:");
      if (this.fetchDisposition == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchDisposition);
      }
      first = false;
    }
    if (isSetRemoteResultCacheEnabled()) {
      if (!first) sb.append(", ");
      sb.append("remoteResultCacheEnabled:");
      sb.append(this.remoteResultCacheEnabled);
      first = false;
    }
    if (isSetIsServerless()) {
      if (!first) sb.append(", ");
      sb.append("isServerless:");
      sb.append(this.isServerless);
      first = false;
    }
    if (isSetResultDataFormat()) {
      if (!first) sb.append(", ");
      sb.append("resultDataFormat:");
      if (this.resultDataFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.resultDataFormat);
      }
      first = false;
    }
    if (isSetTruncatedByThriftLimit()) {
      if (!first) sb.append(", ");
      sb.append("truncatedByThriftLimit:");
      sb.append(this.truncatedByThriftLimit);
      first = false;
    }
    if (isSetResultByteLimit()) {
      if (!first) sb.append(", ");
      sb.append("resultByteLimit:");
      sb.append(this.resultByteLimit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (schema != null) {
      schema.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetResultSetMetadataRespStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetResultSetMetadataRespStandardScheme getScheme() {
      return new TGetResultSetMetadataRespStandardScheme();
    }
  }

  private static class TGetResultSetMetadataRespStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TGetResultSetMetadataResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetResultSetMetadataResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new TTableSchema();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // RESULT_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultFormat =
                  org.apache.hive.service.rpc.thrift.TSparkRowSetType.findByValue(iprot.readI32());
              struct.setResultFormatIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1282: // LZ4_COMPRESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.lz4Compressed = iprot.readBool();
              struct.setLz4CompressedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1283: // ARROW_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrowSchema = iprot.readBinary();
              struct.setArrowSchemaIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1284: // CACHE_LOOKUP_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cacheLookupResult =
                  org.apache.hive.service.rpc.thrift.TCacheLookupResult.findByValue(
                      iprot.readI32());
              struct.setCacheLookupResultIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1285: // UNCOMPRESSED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uncompressedBytes = iprot.readI64();
              struct.setUncompressedBytesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1286: // COMPRESSED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compressedBytes = iprot.readI64();
              struct.setCompressedBytesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1287: // IS_STAGING_OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStagingOperation = iprot.readBool();
              struct.setIsStagingOperationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3329: // REASON_FOR_NO_CLOUD_FETCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reasonForNoCloudFetch =
                  org.apache.hive.service.rpc.thrift.TCloudFetchDisabledReason.findByValue(
                      iprot.readI32());
              struct.setReasonForNoCloudFetchIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3330: // RESULT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                struct.resultFiles = new java.util.ArrayList<TDBSqlCloudResultFile>(_list320.size);
                @org.apache.thrift.annotation.Nullable TDBSqlCloudResultFile _elem321;
                for (int _i322 = 0; _i322 < _list320.size; ++_i322) {
                  _elem321 = new TDBSqlCloudResultFile();
                  _elem321.read(iprot);
                  struct.resultFiles.add(_elem321);
                }
                iprot.readListEnd();
              }
              struct.setResultFilesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3331: // MANIFEST_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manifestFile = iprot.readString();
              struct.setManifestFileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3332: // MANIFEST_FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.manifestFileFormat =
                  org.apache.hive.service.rpc.thrift.TDBSqlManifestFileFormat.findByValue(
                      iprot.readI32());
              struct.setManifestFileFormatIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3333: // CACHE_LOOKUP_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheLookupLatency = iprot.readI64();
              struct.setCacheLookupLatencyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3334: // REMOTE_CACHE_MISS_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteCacheMissReason = iprot.readString();
              struct.setRemoteCacheMissReasonIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3335: // FETCH_DISPOSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchDisposition =
                  org.apache.hive.service.rpc.thrift.TDBSqlFetchDisposition.findByValue(
                      iprot.readI32());
              struct.setFetchDispositionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3336: // REMOTE_RESULT_CACHE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.remoteResultCacheEnabled = iprot.readBool();
              struct.setRemoteResultCacheEnabledIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3337: // IS_SERVERLESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isServerless = iprot.readBool();
              struct.setIsServerlessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3344: // RESULT_DATA_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultDataFormat = new TDBSqlResultFormat();
              struct.resultDataFormat.read(iprot);
              struct.setResultDataFormatIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3345: // TRUNCATED_BY_THRIFT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.truncatedByThriftLimit = iprot.readBool();
              struct.setTruncatedByThriftLimitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3346: // RESULT_BYTE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resultByteLimit = iprot.readI64();
              struct.setResultByteLimitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetResultSetMetadataResp struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.schema != null) {
        if (struct.isSetSchema()) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          struct.schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultFormat != null) {
        if (struct.isSetResultFormat()) {
          oprot.writeFieldBegin(RESULT_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.resultFormat.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLz4Compressed()) {
        oprot.writeFieldBegin(LZ4_COMPRESSED_FIELD_DESC);
        oprot.writeBool(struct.lz4Compressed);
        oprot.writeFieldEnd();
      }
      if (struct.arrowSchema != null) {
        if (struct.isSetArrowSchema()) {
          oprot.writeFieldBegin(ARROW_SCHEMA_FIELD_DESC);
          oprot.writeBinary(struct.arrowSchema);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cacheLookupResult != null) {
        if (struct.isSetCacheLookupResult()) {
          oprot.writeFieldBegin(CACHE_LOOKUP_RESULT_FIELD_DESC);
          oprot.writeI32(struct.cacheLookupResult.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUncompressedBytes()) {
        oprot.writeFieldBegin(UNCOMPRESSED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.uncompressedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompressedBytes()) {
        oprot.writeFieldBegin(COMPRESSED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.compressedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsStagingOperation()) {
        oprot.writeFieldBegin(IS_STAGING_OPERATION_FIELD_DESC);
        oprot.writeBool(struct.isStagingOperation);
        oprot.writeFieldEnd();
      }
      if (struct.reasonForNoCloudFetch != null) {
        if (struct.isSetReasonForNoCloudFetch()) {
          oprot.writeFieldBegin(REASON_FOR_NO_CLOUD_FETCH_FIELD_DESC);
          oprot.writeI32(struct.reasonForNoCloudFetch.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultFiles != null) {
        if (struct.isSetResultFiles()) {
          oprot.writeFieldBegin(RESULT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.resultFiles.size()));
            for (TDBSqlCloudResultFile _iter323 : struct.resultFiles) {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestFile != null) {
        if (struct.isSetManifestFile()) {
          oprot.writeFieldBegin(MANIFEST_FILE_FIELD_DESC);
          oprot.writeString(struct.manifestFile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestFileFormat != null) {
        if (struct.isSetManifestFileFormat()) {
          oprot.writeFieldBegin(MANIFEST_FILE_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.manifestFileFormat.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCacheLookupLatency()) {
        oprot.writeFieldBegin(CACHE_LOOKUP_LATENCY_FIELD_DESC);
        oprot.writeI64(struct.cacheLookupLatency);
        oprot.writeFieldEnd();
      }
      if (struct.remoteCacheMissReason != null) {
        if (struct.isSetRemoteCacheMissReason()) {
          oprot.writeFieldBegin(REMOTE_CACHE_MISS_REASON_FIELD_DESC);
          oprot.writeString(struct.remoteCacheMissReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchDisposition != null) {
        if (struct.isSetFetchDisposition()) {
          oprot.writeFieldBegin(FETCH_DISPOSITION_FIELD_DESC);
          oprot.writeI32(struct.fetchDisposition.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        oprot.writeFieldBegin(REMOTE_RESULT_CACHE_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.remoteResultCacheEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsServerless()) {
        oprot.writeFieldBegin(IS_SERVERLESS_FIELD_DESC);
        oprot.writeBool(struct.isServerless);
        oprot.writeFieldEnd();
      }
      if (struct.resultDataFormat != null) {
        if (struct.isSetResultDataFormat()) {
          oprot.writeFieldBegin(RESULT_DATA_FORMAT_FIELD_DESC);
          struct.resultDataFormat.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTruncatedByThriftLimit()) {
        oprot.writeFieldBegin(TRUNCATED_BY_THRIFT_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.truncatedByThriftLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResultByteLimit()) {
        oprot.writeFieldBegin(RESULT_BYTE_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.resultByteLimit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TGetResultSetMetadataRespTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetResultSetMetadataRespTupleScheme getScheme() {
      return new TGetResultSetMetadataRespTupleScheme();
    }
  }

  private static class TGetResultSetMetadataRespTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TGetResultSetMetadataResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetResultSetMetadataResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSchema()) {
        optionals.set(0);
      }
      if (struct.isSetResultFormat()) {
        optionals.set(1);
      }
      if (struct.isSetLz4Compressed()) {
        optionals.set(2);
      }
      if (struct.isSetArrowSchema()) {
        optionals.set(3);
      }
      if (struct.isSetCacheLookupResult()) {
        optionals.set(4);
      }
      if (struct.isSetUncompressedBytes()) {
        optionals.set(5);
      }
      if (struct.isSetCompressedBytes()) {
        optionals.set(6);
      }
      if (struct.isSetIsStagingOperation()) {
        optionals.set(7);
      }
      if (struct.isSetReasonForNoCloudFetch()) {
        optionals.set(8);
      }
      if (struct.isSetResultFiles()) {
        optionals.set(9);
      }
      if (struct.isSetManifestFile()) {
        optionals.set(10);
      }
      if (struct.isSetManifestFileFormat()) {
        optionals.set(11);
      }
      if (struct.isSetCacheLookupLatency()) {
        optionals.set(12);
      }
      if (struct.isSetRemoteCacheMissReason()) {
        optionals.set(13);
      }
      if (struct.isSetFetchDisposition()) {
        optionals.set(14);
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        optionals.set(15);
      }
      if (struct.isSetIsServerless()) {
        optionals.set(16);
      }
      if (struct.isSetResultDataFormat()) {
        optionals.set(17);
      }
      if (struct.isSetTruncatedByThriftLimit()) {
        optionals.set(18);
      }
      if (struct.isSetResultByteLimit()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetResultFormat()) {
        oprot.writeI32(struct.resultFormat.getValue());
      }
      if (struct.isSetLz4Compressed()) {
        oprot.writeBool(struct.lz4Compressed);
      }
      if (struct.isSetArrowSchema()) {
        oprot.writeBinary(struct.arrowSchema);
      }
      if (struct.isSetCacheLookupResult()) {
        oprot.writeI32(struct.cacheLookupResult.getValue());
      }
      if (struct.isSetUncompressedBytes()) {
        oprot.writeI64(struct.uncompressedBytes);
      }
      if (struct.isSetCompressedBytes()) {
        oprot.writeI64(struct.compressedBytes);
      }
      if (struct.isSetIsStagingOperation()) {
        oprot.writeBool(struct.isStagingOperation);
      }
      if (struct.isSetReasonForNoCloudFetch()) {
        oprot.writeI32(struct.reasonForNoCloudFetch.getValue());
      }
      if (struct.isSetResultFiles()) {
        {
          oprot.writeI32(struct.resultFiles.size());
          for (TDBSqlCloudResultFile _iter324 : struct.resultFiles) {
            _iter324.write(oprot);
          }
        }
      }
      if (struct.isSetManifestFile()) {
        oprot.writeString(struct.manifestFile);
      }
      if (struct.isSetManifestFileFormat()) {
        oprot.writeI32(struct.manifestFileFormat.getValue());
      }
      if (struct.isSetCacheLookupLatency()) {
        oprot.writeI64(struct.cacheLookupLatency);
      }
      if (struct.isSetRemoteCacheMissReason()) {
        oprot.writeString(struct.remoteCacheMissReason);
      }
      if (struct.isSetFetchDisposition()) {
        oprot.writeI32(struct.fetchDisposition.getValue());
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        oprot.writeBool(struct.remoteResultCacheEnabled);
      }
      if (struct.isSetIsServerless()) {
        oprot.writeBool(struct.isServerless);
      }
      if (struct.isSetResultDataFormat()) {
        struct.resultDataFormat.write(oprot);
      }
      if (struct.isSetTruncatedByThriftLimit()) {
        oprot.writeBool(struct.truncatedByThriftLimit);
      }
      if (struct.isSetResultByteLimit()) {
        oprot.writeI64(struct.resultByteLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetResultSetMetadataResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.schema = new TTableSchema();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultFormat =
            org.apache.hive.service.rpc.thrift.TSparkRowSetType.findByValue(iprot.readI32());
        struct.setResultFormatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lz4Compressed = iprot.readBool();
        struct.setLz4CompressedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.arrowSchema = iprot.readBinary();
        struct.setArrowSchemaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cacheLookupResult =
            org.apache.hive.service.rpc.thrift.TCacheLookupResult.findByValue(iprot.readI32());
        struct.setCacheLookupResultIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uncompressedBytes = iprot.readI64();
        struct.setUncompressedBytesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.compressedBytes = iprot.readI64();
        struct.setCompressedBytesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isStagingOperation = iprot.readBool();
        struct.setIsStagingOperationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reasonForNoCloudFetch =
            org.apache.hive.service.rpc.thrift.TCloudFetchDisabledReason.findByValue(
                iprot.readI32());
        struct.setReasonForNoCloudFetchIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list325 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.resultFiles = new java.util.ArrayList<TDBSqlCloudResultFile>(_list325.size);
          @org.apache.thrift.annotation.Nullable TDBSqlCloudResultFile _elem326;
          for (int _i327 = 0; _i327 < _list325.size; ++_i327) {
            _elem326 = new TDBSqlCloudResultFile();
            _elem326.read(iprot);
            struct.resultFiles.add(_elem326);
          }
        }
        struct.setResultFilesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.manifestFile = iprot.readString();
        struct.setManifestFileIsSet(true);
      }
      if (incoming.get(11)) {
        struct.manifestFileFormat =
            org.apache.hive.service.rpc.thrift.TDBSqlManifestFileFormat.findByValue(
                iprot.readI32());
        struct.setManifestFileFormatIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cacheLookupLatency = iprot.readI64();
        struct.setCacheLookupLatencyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.remoteCacheMissReason = iprot.readString();
        struct.setRemoteCacheMissReasonIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fetchDisposition =
            org.apache.hive.service.rpc.thrift.TDBSqlFetchDisposition.findByValue(iprot.readI32());
        struct.setFetchDispositionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remoteResultCacheEnabled = iprot.readBool();
        struct.setRemoteResultCacheEnabledIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isServerless = iprot.readBool();
        struct.setIsServerlessIsSet(true);
      }
      if (incoming.get(17)) {
        struct.resultDataFormat = new TDBSqlResultFormat();
        struct.resultDataFormat.read(iprot);
        struct.setResultDataFormatIsSet(true);
      }
      if (incoming.get(18)) {
        struct.truncatedByThriftLimit = iprot.readBool();
        struct.setTruncatedByThriftLimitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.resultByteLimit = iprot.readI64();
        struct.setResultByteLimitIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
