/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.hive.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-02-23")
public class TDBSqlCsvFormat
    implements org.apache.thrift.TBase<TDBSqlCsvFormat, TDBSqlCsvFormat._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TDBSqlCsvFormat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TDBSqlCsvFormat");

  private static final org.apache.thrift.protocol.TField COMPRESSION_CODEC_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "compressionCodec", org.apache.thrift.protocol.TType.I32, (short) 1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TDBSqlCsvFormatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TDBSqlCsvFormatTupleSchemeFactory();

  /**
   * @see TDBSqlCompressionCodec
   */
  public @org.apache.thrift.annotation.Nullable TDBSqlCompressionCodec compressionCodec; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * @see TDBSqlCompressionCodec
     */
    COMPRESSION_CODEC((short) 1, "compressionCodec");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // COMPRESSION_CODEC
          return COMPRESSION_CODEC;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMPRESSION_CODEC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.COMPRESSION_CODEC,
        new org.apache.thrift.meta_data.FieldMetaData(
            "compressionCodec",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TDBSqlCompressionCodec.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TDBSqlCsvFormat.class, metaDataMap);
  }

  public TDBSqlCsvFormat() {}

  /** Performs a deep copy on <i>other</i>. */
  public TDBSqlCsvFormat(TDBSqlCsvFormat other) {
    if (other.isSetCompressionCodec()) {
      this.compressionCodec = other.compressionCodec;
    }
  }

  @Override
  public TDBSqlCsvFormat deepCopy() {
    return new TDBSqlCsvFormat(this);
  }

  @Override
  public void clear() {
    this.compressionCodec = null;
  }

  /**
   * @see TDBSqlCompressionCodec
   */
  @org.apache.thrift.annotation.Nullable
  public TDBSqlCompressionCodec getCompressionCodec() {
    return this.compressionCodec;
  }

  /**
   * @see TDBSqlCompressionCodec
   */
  public TDBSqlCsvFormat setCompressionCodec(
      @org.apache.thrift.annotation.Nullable TDBSqlCompressionCodec compressionCodec) {
    this.compressionCodec = compressionCodec;
    return this;
  }

  public void unsetCompressionCodec() {
    this.compressionCodec = null;
  }

  /**
   * Returns true if field compressionCodec is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCompressionCodec() {
    return this.compressionCodec != null;
  }

  public void setCompressionCodecIsSet(boolean value) {
    if (!value) {
      this.compressionCodec = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case COMPRESSION_CODEC:
        if (value == null) {
          unsetCompressionCodec();
        } else {
          setCompressionCodec((TDBSqlCompressionCodec) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case COMPRESSION_CODEC:
        return getCompressionCodec();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case COMPRESSION_CODEC:
        return isSetCompressionCodec();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDBSqlCsvFormat) return this.equals((TDBSqlCsvFormat) that);
    return false;
  }

  public boolean equals(TDBSqlCsvFormat that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_compressionCodec = true && this.isSetCompressionCodec();
    boolean that_present_compressionCodec = true && that.isSetCompressionCodec();
    if (this_present_compressionCodec || that_present_compressionCodec) {
      if (!(this_present_compressionCodec && that_present_compressionCodec)) return false;
      if (!this.compressionCodec.equals(that.compressionCodec)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCompressionCodec()) ? 131071 : 524287);
    if (isSetCompressionCodec()) hashCode = hashCode * 8191 + compressionCodec.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDBSqlCsvFormat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison =
        java.lang.Boolean.compare(isSetCompressionCodec(), other.isSetCompressionCodec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressionCodec()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.compressionCodec, other.compressionCodec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDBSqlCsvFormat(");
    boolean first = true;

    if (isSetCompressionCodec()) {
      sb.append("compressionCodec:");
      if (this.compressionCodec == null) {
        sb.append("null");
      } else {
        sb.append(this.compressionCodec);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDBSqlCsvFormatStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlCsvFormatStandardScheme getScheme() {
      return new TDBSqlCsvFormatStandardScheme();
    }
  }

  private static class TDBSqlCsvFormatStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TDBSqlCsvFormat> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDBSqlCsvFormat struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPRESSION_CODEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compressionCodec =
                  org.apache.hive.service.rpc.thrift.TDBSqlCompressionCodec.findByValue(
                      iprot.readI32());
              struct.setCompressionCodecIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDBSqlCsvFormat struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.compressionCodec != null) {
        if (struct.isSetCompressionCodec()) {
          oprot.writeFieldBegin(COMPRESSION_CODEC_FIELD_DESC);
          oprot.writeI32(struct.compressionCodec.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TDBSqlCsvFormatTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlCsvFormatTupleScheme getScheme() {
      return new TDBSqlCsvFormatTupleScheme();
    }
  }

  private static class TDBSqlCsvFormatTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TDBSqlCsvFormat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDBSqlCsvFormat struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCompressionCodec()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCompressionCodec()) {
        oprot.writeI32(struct.compressionCodec.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDBSqlCsvFormat struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.compressionCodec =
            org.apache.hive.service.rpc.thrift.TDBSqlCompressionCodec.findByValue(iprot.readI32());
        struct.setCompressionCodecIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
