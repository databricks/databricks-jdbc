/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.client.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-03-01")
public class TRowSet
    implements org.apache.thrift.TBase<TRowSet, TRowSet._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TRowSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TRowSet");

  private static final org.apache.thrift.protocol.TField START_ROW_OFFSET_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "startRowOffset", org.apache.thrift.protocol.TType.I64, (short) 1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "rows", org.apache.thrift.protocol.TType.LIST, (short) 2);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "columns", org.apache.thrift.protocol.TType.LIST, (short) 3);
  private static final org.apache.thrift.protocol.TField BINARY_COLUMNS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "binaryColumns", org.apache.thrift.protocol.TType.STRING, (short) 4);
  private static final org.apache.thrift.protocol.TField COLUMN_COUNT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "columnCount", org.apache.thrift.protocol.TType.I32, (short) 5);
  private static final org.apache.thrift.protocol.TField ARROW_BATCHES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "arrowBatches", org.apache.thrift.protocol.TType.LIST, (short) 1281);
  private static final org.apache.thrift.protocol.TField RESULT_LINKS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "resultLinks", org.apache.thrift.protocol.TType.LIST, (short) 1282);
  private static final org.apache.thrift.protocol.TField CLOUD_FETCH_RESULTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "cloudFetchResults", org.apache.thrift.protocol.TType.LIST, (short) 3329);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TRowSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TRowSetTupleSchemeFactory();

  public long startRowOffset; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TRow> rows; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryColumns; // optional
  public int columnCount; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TSparkArrowBatch>
      arrowBatches; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TSparkArrowResultLink>
      resultLinks; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlCloudResultFile>
      cloudFetchResults; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_ROW_OFFSET((short) 1, "startRowOffset"),
    ROWS((short) 2, "rows"),
    COLUMNS((short) 3, "columns"),
    BINARY_COLUMNS((short) 4, "binaryColumns"),
    COLUMN_COUNT((short) 5, "columnCount"),
    ARROW_BATCHES((short) 1281, "arrowBatches"),
    RESULT_LINKS((short) 1282, "resultLinks"),
    CLOUD_FETCH_RESULTS((short) 3329, "cloudFetchResults");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // START_ROW_OFFSET
          return START_ROW_OFFSET;
        case 2: // ROWS
          return ROWS;
        case 3: // COLUMNS
          return COLUMNS;
        case 4: // BINARY_COLUMNS
          return BINARY_COLUMNS;
        case 5: // COLUMN_COUNT
          return COLUMN_COUNT;
        case 1281: // ARROW_BATCHES
          return ARROW_BATCHES;
        case 1282: // RESULT_LINKS
          return RESULT_LINKS;
        case 3329: // CLOUD_FETCH_RESULTS
          return CLOUD_FETCH_RESULTS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTROWOFFSET_ISSET_ID = 0;
  private static final int __COLUMNCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.COLUMNS,
    _Fields.BINARY_COLUMNS,
    _Fields.COLUMN_COUNT,
    _Fields.ARROW_BATCHES,
    _Fields.RESULT_LINKS,
    _Fields.CLOUD_FETCH_RESULTS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.START_ROW_OFFSET,
        new org.apache.thrift.meta_data.FieldMetaData(
            "startRowOffset",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.ROWS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "rows",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TRow.class))));
    tmpMap.put(
        _Fields.COLUMNS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "columns",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(
        _Fields.BINARY_COLUMNS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "binaryColumns",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING, true)));
    tmpMap.put(
        _Fields.COLUMN_COUNT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "columnCount",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(
        _Fields.ARROW_BATCHES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "arrowBatches",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TSparkArrowBatch.class))));
    tmpMap.put(
        _Fields.RESULT_LINKS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "resultLinks",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TSparkArrowResultLink.class))));
    tmpMap.put(
        _Fields.CLOUD_FETCH_RESULTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "cloudFetchResults",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TDBSqlCloudResultFile.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRowSet.class, metaDataMap);
  }

  public TRowSet() {}

  public TRowSet(long startRowOffset, java.util.List<TRow> rows) {
    this();
    this.startRowOffset = startRowOffset;
    setStartRowOffsetIsSet(true);
    this.rows = rows;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TRowSet(TRowSet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startRowOffset = other.startRowOffset;
    if (other.isSetRows()) {
      java.util.List<TRow> __this__rows = new java.util.ArrayList<TRow>(other.rows.size());
      for (TRow other_element : other.rows) {
        __this__rows.add(new TRow(other_element));
      }
      this.rows = __this__rows;
    }
    if (other.isSetColumns()) {
      java.util.List<TColumn> __this__columns =
          new java.util.ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetBinaryColumns()) {
      this.binaryColumns = org.apache.thrift.TBaseHelper.copyBinary(other.binaryColumns);
    }
    this.columnCount = other.columnCount;
    if (other.isSetArrowBatches()) {
      java.util.List<TSparkArrowBatch> __this__arrowBatches =
          new java.util.ArrayList<TSparkArrowBatch>(other.arrowBatches.size());
      for (TSparkArrowBatch other_element : other.arrowBatches) {
        __this__arrowBatches.add(new TSparkArrowBatch(other_element));
      }
      this.arrowBatches = __this__arrowBatches;
    }
    if (other.isSetResultLinks()) {
      java.util.List<TSparkArrowResultLink> __this__resultLinks =
          new java.util.ArrayList<TSparkArrowResultLink>(other.resultLinks.size());
      for (TSparkArrowResultLink other_element : other.resultLinks) {
        __this__resultLinks.add(new TSparkArrowResultLink(other_element));
      }
      this.resultLinks = __this__resultLinks;
    }
    if (other.isSetCloudFetchResults()) {
      java.util.List<TDBSqlCloudResultFile> __this__cloudFetchResults =
          new java.util.ArrayList<TDBSqlCloudResultFile>(other.cloudFetchResults.size());
      for (TDBSqlCloudResultFile other_element : other.cloudFetchResults) {
        __this__cloudFetchResults.add(new TDBSqlCloudResultFile(other_element));
      }
      this.cloudFetchResults = __this__cloudFetchResults;
    }
  }

  @Override
  public TRowSet deepCopy() {
    return new TRowSet(this);
  }

  @Override
  public void clear() {
    setStartRowOffsetIsSet(false);
    this.startRowOffset = 0;
    this.rows = null;
    this.columns = null;
    this.binaryColumns = null;
    setColumnCountIsSet(false);
    this.columnCount = 0;
    this.arrowBatches = null;
    this.resultLinks = null;
    this.cloudFetchResults = null;
  }

  public long getStartRowOffset() {
    return this.startRowOffset;
  }

  public TRowSet setStartRowOffset(long startRowOffset) {
    this.startRowOffset = startRowOffset;
    setStartRowOffsetIsSet(true);
    return this;
  }

  public void unsetStartRowOffset() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID);
  }

  /** Returns true if field startRowOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRowOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID);
  }

  public void setStartRowOffsetIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTROWOFFSET_ISSET_ID, value);
  }

  public int getRowsSize() {
    return (this.rows == null) ? 0 : this.rows.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TRow> getRowsIterator() {
    return (this.rows == null) ? null : this.rows.iterator();
  }

  public void addToRows(TRow elem) {
    if (this.rows == null) {
      this.rows = new java.util.ArrayList<TRow>();
    }
    this.rows.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TRow> getRows() {
    return this.rows;
  }

  public TRowSet setRows(@org.apache.thrift.annotation.Nullable java.util.List<TRow> rows) {
    this.rows = rows;
    return this;
  }

  public void unsetRows() {
    this.rows = null;
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return this.rows != null;
  }

  public void setRowsIsSet(boolean value) {
    if (!value) {
      this.rows = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getColumns() {
    return this.columns;
  }

  public TRowSet setColumns(
      @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public byte[] getBinaryColumns() {
    setBinaryColumns(org.apache.thrift.TBaseHelper.rightSize(binaryColumns));
    return binaryColumns == null ? null : binaryColumns.array();
  }

  public java.nio.ByteBuffer bufferForBinaryColumns() {
    return org.apache.thrift.TBaseHelper.copyBinary(binaryColumns);
  }

  public TRowSet setBinaryColumns(byte[] binaryColumns) {
    this.binaryColumns =
        binaryColumns == null
            ? (java.nio.ByteBuffer) null
            : java.nio.ByteBuffer.wrap(binaryColumns.clone());
    return this;
  }

  public TRowSet setBinaryColumns(
      @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryColumns) {
    this.binaryColumns = org.apache.thrift.TBaseHelper.copyBinary(binaryColumns);
    return this;
  }

  public void unsetBinaryColumns() {
    this.binaryColumns = null;
  }

  /** Returns true if field binaryColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryColumns() {
    return this.binaryColumns != null;
  }

  public void setBinaryColumnsIsSet(boolean value) {
    if (!value) {
      this.binaryColumns = null;
    }
  }

  public int getColumnCount() {
    return this.columnCount;
  }

  public TRowSet setColumnCount(int columnCount) {
    this.columnCount = columnCount;
    setColumnCountIsSet(true);
    return this;
  }

  public void unsetColumnCount() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  /** Returns true if field columnCount is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  public void setColumnCountIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID, value);
  }

  public int getArrowBatchesSize() {
    return (this.arrowBatches == null) ? 0 : this.arrowBatches.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSparkArrowBatch> getArrowBatchesIterator() {
    return (this.arrowBatches == null) ? null : this.arrowBatches.iterator();
  }

  public void addToArrowBatches(TSparkArrowBatch elem) {
    if (this.arrowBatches == null) {
      this.arrowBatches = new java.util.ArrayList<TSparkArrowBatch>();
    }
    this.arrowBatches.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSparkArrowBatch> getArrowBatches() {
    return this.arrowBatches;
  }

  public TRowSet setArrowBatches(
      @org.apache.thrift.annotation.Nullable java.util.List<TSparkArrowBatch> arrowBatches) {
    this.arrowBatches = arrowBatches;
    return this;
  }

  public void unsetArrowBatches() {
    this.arrowBatches = null;
  }

  /** Returns true if field arrowBatches is set (has been assigned a value) and false otherwise */
  public boolean isSetArrowBatches() {
    return this.arrowBatches != null;
  }

  public void setArrowBatchesIsSet(boolean value) {
    if (!value) {
      this.arrowBatches = null;
    }
  }

  public int getResultLinksSize() {
    return (this.resultLinks == null) ? 0 : this.resultLinks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSparkArrowResultLink> getResultLinksIterator() {
    return (this.resultLinks == null) ? null : this.resultLinks.iterator();
  }

  public void addToResultLinks(TSparkArrowResultLink elem) {
    if (this.resultLinks == null) {
      this.resultLinks = new java.util.ArrayList<TSparkArrowResultLink>();
    }
    this.resultLinks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSparkArrowResultLink> getResultLinks() {
    return this.resultLinks;
  }

  public TRowSet setResultLinks(
      @org.apache.thrift.annotation.Nullable java.util.List<TSparkArrowResultLink> resultLinks) {
    this.resultLinks = resultLinks;
    return this;
  }

  public void unsetResultLinks() {
    this.resultLinks = null;
  }

  /** Returns true if field resultLinks is set (has been assigned a value) and false otherwise */
  public boolean isSetResultLinks() {
    return this.resultLinks != null;
  }

  public void setResultLinksIsSet(boolean value) {
    if (!value) {
      this.resultLinks = null;
    }
  }

  public int getCloudFetchResultsSize() {
    return (this.cloudFetchResults == null) ? 0 : this.cloudFetchResults.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TDBSqlCloudResultFile> getCloudFetchResultsIterator() {
    return (this.cloudFetchResults == null) ? null : this.cloudFetchResults.iterator();
  }

  public void addToCloudFetchResults(TDBSqlCloudResultFile elem) {
    if (this.cloudFetchResults == null) {
      this.cloudFetchResults = new java.util.ArrayList<TDBSqlCloudResultFile>();
    }
    this.cloudFetchResults.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TDBSqlCloudResultFile> getCloudFetchResults() {
    return this.cloudFetchResults;
  }

  public TRowSet setCloudFetchResults(
      @org.apache.thrift.annotation.Nullable
          java.util.List<TDBSqlCloudResultFile> cloudFetchResults) {
    this.cloudFetchResults = cloudFetchResults;
    return this;
  }

  public void unsetCloudFetchResults() {
    this.cloudFetchResults = null;
  }

  /**
   * Returns true if field cloudFetchResults is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCloudFetchResults() {
    return this.cloudFetchResults != null;
  }

  public void setCloudFetchResultsIsSet(boolean value) {
    if (!value) {
      this.cloudFetchResults = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case START_ROW_OFFSET:
        if (value == null) {
          unsetStartRowOffset();
        } else {
          setStartRowOffset((java.lang.Long) value);
        }
        break;

      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          setRows((java.util.List<TRow>) value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((java.util.List<TColumn>) value);
        }
        break;

      case BINARY_COLUMNS:
        if (value == null) {
          unsetBinaryColumns();
        } else {
          if (value instanceof byte[]) {
            setBinaryColumns((byte[]) value);
          } else {
            setBinaryColumns((java.nio.ByteBuffer) value);
          }
        }
        break;

      case COLUMN_COUNT:
        if (value == null) {
          unsetColumnCount();
        } else {
          setColumnCount((java.lang.Integer) value);
        }
        break;

      case ARROW_BATCHES:
        if (value == null) {
          unsetArrowBatches();
        } else {
          setArrowBatches((java.util.List<TSparkArrowBatch>) value);
        }
        break;

      case RESULT_LINKS:
        if (value == null) {
          unsetResultLinks();
        } else {
          setResultLinks((java.util.List<TSparkArrowResultLink>) value);
        }
        break;

      case CLOUD_FETCH_RESULTS:
        if (value == null) {
          unsetCloudFetchResults();
        } else {
          setCloudFetchResults((java.util.List<TDBSqlCloudResultFile>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case START_ROW_OFFSET:
        return getStartRowOffset();

      case ROWS:
        return getRows();

      case COLUMNS:
        return getColumns();

      case BINARY_COLUMNS:
        return getBinaryColumns();

      case COLUMN_COUNT:
        return getColumnCount();

      case ARROW_BATCHES:
        return getArrowBatches();

      case RESULT_LINKS:
        return getResultLinks();

      case CLOUD_FETCH_RESULTS:
        return getCloudFetchResults();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case START_ROW_OFFSET:
        return isSetStartRowOffset();
      case ROWS:
        return isSetRows();
      case COLUMNS:
        return isSetColumns();
      case BINARY_COLUMNS:
        return isSetBinaryColumns();
      case COLUMN_COUNT:
        return isSetColumnCount();
      case ARROW_BATCHES:
        return isSetArrowBatches();
      case RESULT_LINKS:
        return isSetResultLinks();
      case CLOUD_FETCH_RESULTS:
        return isSetCloudFetchResults();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRowSet) return this.equals((TRowSet) that);
    return false;
  }

  public boolean equals(TRowSet that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_startRowOffset = true;
    boolean that_present_startRowOffset = true;
    if (this_present_startRowOffset || that_present_startRowOffset) {
      if (!(this_present_startRowOffset && that_present_startRowOffset)) return false;
      if (this.startRowOffset != that.startRowOffset) return false;
    }

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows)) return false;
      if (!this.rows.equals(that.rows)) return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns)) return false;
      if (!this.columns.equals(that.columns)) return false;
    }

    boolean this_present_binaryColumns = true && this.isSetBinaryColumns();
    boolean that_present_binaryColumns = true && that.isSetBinaryColumns();
    if (this_present_binaryColumns || that_present_binaryColumns) {
      if (!(this_present_binaryColumns && that_present_binaryColumns)) return false;
      if (!this.binaryColumns.equals(that.binaryColumns)) return false;
    }

    boolean this_present_columnCount = true && this.isSetColumnCount();
    boolean that_present_columnCount = true && that.isSetColumnCount();
    if (this_present_columnCount || that_present_columnCount) {
      if (!(this_present_columnCount && that_present_columnCount)) return false;
      if (this.columnCount != that.columnCount) return false;
    }

    boolean this_present_arrowBatches = true && this.isSetArrowBatches();
    boolean that_present_arrowBatches = true && that.isSetArrowBatches();
    if (this_present_arrowBatches || that_present_arrowBatches) {
      if (!(this_present_arrowBatches && that_present_arrowBatches)) return false;
      if (!this.arrowBatches.equals(that.arrowBatches)) return false;
    }

    boolean this_present_resultLinks = true && this.isSetResultLinks();
    boolean that_present_resultLinks = true && that.isSetResultLinks();
    if (this_present_resultLinks || that_present_resultLinks) {
      if (!(this_present_resultLinks && that_present_resultLinks)) return false;
      if (!this.resultLinks.equals(that.resultLinks)) return false;
    }

    boolean this_present_cloudFetchResults = true && this.isSetCloudFetchResults();
    boolean that_present_cloudFetchResults = true && that.isSetCloudFetchResults();
    if (this_present_cloudFetchResults || that_present_cloudFetchResults) {
      if (!(this_present_cloudFetchResults && that_present_cloudFetchResults)) return false;
      if (!this.cloudFetchResults.equals(that.cloudFetchResults)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startRowOffset);

    hashCode = hashCode * 8191 + ((isSetRows()) ? 131071 : 524287);
    if (isSetRows()) hashCode = hashCode * 8191 + rows.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns()) hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinaryColumns()) ? 131071 : 524287);
    if (isSetBinaryColumns()) hashCode = hashCode * 8191 + binaryColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnCount()) ? 131071 : 524287);
    if (isSetColumnCount()) hashCode = hashCode * 8191 + columnCount;

    hashCode = hashCode * 8191 + ((isSetArrowBatches()) ? 131071 : 524287);
    if (isSetArrowBatches()) hashCode = hashCode * 8191 + arrowBatches.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultLinks()) ? 131071 : 524287);
    if (isSetResultLinks()) hashCode = hashCode * 8191 + resultLinks.hashCode();

    hashCode = hashCode * 8191 + ((isSetCloudFetchResults()) ? 131071 : 524287);
    if (isSetCloudFetchResults()) hashCode = hashCode * 8191 + cloudFetchResults.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRowSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStartRowOffset(), other.isSetStartRowOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRowOffset()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.startRowOffset, other.startRowOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRows(), other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinaryColumns(), other.isSetBinaryColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryColumns()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.binaryColumns, other.binaryColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnCount(), other.isSetColumnCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnCount, other.columnCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArrowBatches(), other.isSetArrowBatches());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrowBatches()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.arrowBatches, other.arrowBatches);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultLinks(), other.isSetResultLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultLinks, other.resultLinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCloudFetchResults(), other.isSetCloudFetchResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloudFetchResults()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.cloudFetchResults, other.cloudFetchResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRowSet(");
    boolean first = true;

    sb.append("startRowOffset:");
    sb.append(this.startRowOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    if (this.rows == null) {
      sb.append("null");
    } else {
      sb.append(this.rows);
    }
    first = false;
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetBinaryColumns()) {
      if (!first) sb.append(", ");
      sb.append("binaryColumns:");
      if (this.binaryColumns == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryColumns, sb);
      }
      first = false;
    }
    if (isSetColumnCount()) {
      if (!first) sb.append(", ");
      sb.append("columnCount:");
      sb.append(this.columnCount);
      first = false;
    }
    if (isSetArrowBatches()) {
      if (!first) sb.append(", ");
      sb.append("arrowBatches:");
      if (this.arrowBatches == null) {
        sb.append("null");
      } else {
        sb.append(this.arrowBatches);
      }
      first = false;
    }
    if (isSetResultLinks()) {
      if (!first) sb.append(", ");
      sb.append("resultLinks:");
      if (this.resultLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.resultLinks);
      }
      first = false;
    }
    if (isSetCloudFetchResults()) {
      if (!first) sb.append(", ");
      sb.append("cloudFetchResults:");
      if (this.cloudFetchResults == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudFetchResults);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'startRowOffset' because it's a primitive and you chose the non-beans
    // generator.
    if (rows == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'rows' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRowSetStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRowSetStandardScheme getScheme() {
      return new TRowSetStandardScheme();
    }
  }

  private static class TRowSetStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TRowSet> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRowSet struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // START_ROW_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startRowOffset = iprot.readI64();
              struct.setStartRowOffsetIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                struct.rows = new java.util.ArrayList<TRow>(_list138.size);
                @org.apache.thrift.annotation.Nullable TRow _elem139;
                for (int _i140 = 0; _i140 < _list138.size; ++_i140) {
                  _elem139 = new TRow();
                  _elem139.read(iprot);
                  struct.rows.add(_elem139);
                }
                iprot.readListEnd();
              }
              struct.setRowsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list141 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<TColumn>(_list141.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem142;
                for (int _i143 = 0; _i143 < _list141.size; ++_i143) {
                  _elem142 = new TColumn();
                  _elem142.read(iprot);
                  struct.columns.add(_elem142);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BINARY_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryColumns = iprot.readBinary();
              struct.setBinaryColumnsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnCount = iprot.readI32();
              struct.setColumnCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // ARROW_BATCHES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.arrowBatches = new java.util.ArrayList<TSparkArrowBatch>(_list144.size);
                @org.apache.thrift.annotation.Nullable TSparkArrowBatch _elem145;
                for (int _i146 = 0; _i146 < _list144.size; ++_i146) {
                  _elem145 = new TSparkArrowBatch();
                  _elem145.read(iprot);
                  struct.arrowBatches.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setArrowBatchesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1282: // RESULT_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.resultLinks = new java.util.ArrayList<TSparkArrowResultLink>(_list147.size);
                @org.apache.thrift.annotation.Nullable TSparkArrowResultLink _elem148;
                for (int _i149 = 0; _i149 < _list147.size; ++_i149) {
                  _elem148 = new TSparkArrowResultLink();
                  _elem148.read(iprot);
                  struct.resultLinks.add(_elem148);
                }
                iprot.readListEnd();
              }
              struct.setResultLinksIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3329: // CLOUD_FETCH_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.cloudFetchResults =
                    new java.util.ArrayList<TDBSqlCloudResultFile>(_list150.size);
                @org.apache.thrift.annotation.Nullable TDBSqlCloudResultFile _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152) {
                  _elem151 = new TDBSqlCloudResultFile();
                  _elem151.read(iprot);
                  struct.cloudFetchResults.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setCloudFetchResultsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartRowOffset()) {
        throw new org.apache.thrift.protocol.TProtocolException(
            "Required field 'startRowOffset' was not found in serialized data! Struct: "
                + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRowSet struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_ROW_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.startRowOffset);
      oprot.writeFieldEnd();
      if (struct.rows != null) {
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new org.apache.thrift.protocol.TList(
                  org.apache.thrift.protocol.TType.STRUCT, struct.rows.size()));
          for (TRow _iter153 : struct.rows) {
            _iter153.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (TColumn _iter154 : struct.columns) {
              _iter154.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryColumns != null) {
        if (struct.isSetBinaryColumns()) {
          oprot.writeFieldBegin(BINARY_COLUMNS_FIELD_DESC);
          oprot.writeBinary(struct.binaryColumns);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetColumnCount()) {
        oprot.writeFieldBegin(COLUMN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.columnCount);
        oprot.writeFieldEnd();
      }
      if (struct.arrowBatches != null) {
        if (struct.isSetArrowBatches()) {
          oprot.writeFieldBegin(ARROW_BATCHES_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.arrowBatches.size()));
            for (TSparkArrowBatch _iter155 : struct.arrowBatches) {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultLinks != null) {
        if (struct.isSetResultLinks()) {
          oprot.writeFieldBegin(RESULT_LINKS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.resultLinks.size()));
            for (TSparkArrowResultLink _iter156 : struct.resultLinks) {
              _iter156.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cloudFetchResults != null) {
        if (struct.isSetCloudFetchResults()) {
          oprot.writeFieldBegin(CLOUD_FETCH_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.cloudFetchResults.size()));
            for (TDBSqlCloudResultFile _iter157 : struct.cloudFetchResults) {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TRowSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRowSetTupleScheme getScheme() {
      return new TRowSetTupleScheme();
    }
  }

  private static class TRowSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRowSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRowSet struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.startRowOffset);
      {
        oprot.writeI32(struct.rows.size());
        for (TRow _iter158 : struct.rows) {
          _iter158.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumns()) {
        optionals.set(0);
      }
      if (struct.isSetBinaryColumns()) {
        optionals.set(1);
      }
      if (struct.isSetColumnCount()) {
        optionals.set(2);
      }
      if (struct.isSetArrowBatches()) {
        optionals.set(3);
      }
      if (struct.isSetResultLinks()) {
        optionals.set(4);
      }
      if (struct.isSetCloudFetchResults()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter159 : struct.columns) {
            _iter159.write(oprot);
          }
        }
      }
      if (struct.isSetBinaryColumns()) {
        oprot.writeBinary(struct.binaryColumns);
      }
      if (struct.isSetColumnCount()) {
        oprot.writeI32(struct.columnCount);
      }
      if (struct.isSetArrowBatches()) {
        {
          oprot.writeI32(struct.arrowBatches.size());
          for (TSparkArrowBatch _iter160 : struct.arrowBatches) {
            _iter160.write(oprot);
          }
        }
      }
      if (struct.isSetResultLinks()) {
        {
          oprot.writeI32(struct.resultLinks.size());
          for (TSparkArrowResultLink _iter161 : struct.resultLinks) {
            _iter161.write(oprot);
          }
        }
      }
      if (struct.isSetCloudFetchResults()) {
        {
          oprot.writeI32(struct.cloudFetchResults.size());
          for (TDBSqlCloudResultFile _iter162 : struct.cloudFetchResults) {
            _iter162.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRowSet struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.startRowOffset = iprot.readI64();
      struct.setStartRowOffsetIsSet(true);
      {
        org.apache.thrift.protocol.TList _list163 =
            iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.rows = new java.util.ArrayList<TRow>(_list163.size);
        @org.apache.thrift.annotation.Nullable TRow _elem164;
        for (int _i165 = 0; _i165 < _list163.size; ++_i165) {
          _elem164 = new TRow();
          _elem164.read(iprot);
          struct.rows.add(_elem164);
        }
      }
      struct.setRowsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list166 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<TColumn>(_list166.size);
          @org.apache.thrift.annotation.Nullable TColumn _elem167;
          for (int _i168 = 0; _i168 < _list166.size; ++_i168) {
            _elem167 = new TColumn();
            _elem167.read(iprot);
            struct.columns.add(_elem167);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.binaryColumns = iprot.readBinary();
        struct.setBinaryColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnCount = iprot.readI32();
        struct.setColumnCountIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list169 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.arrowBatches = new java.util.ArrayList<TSparkArrowBatch>(_list169.size);
          @org.apache.thrift.annotation.Nullable TSparkArrowBatch _elem170;
          for (int _i171 = 0; _i171 < _list169.size; ++_i171) {
            _elem170 = new TSparkArrowBatch();
            _elem170.read(iprot);
            struct.arrowBatches.add(_elem170);
          }
        }
        struct.setArrowBatchesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list172 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.resultLinks = new java.util.ArrayList<TSparkArrowResultLink>(_list172.size);
          @org.apache.thrift.annotation.Nullable TSparkArrowResultLink _elem173;
          for (int _i174 = 0; _i174 < _list172.size; ++_i174) {
            _elem173 = new TSparkArrowResultLink();
            _elem173.read(iprot);
            struct.resultLinks.add(_elem173);
          }
        }
        struct.setResultLinksIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list175 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.cloudFetchResults = new java.util.ArrayList<TDBSqlCloudResultFile>(_list175.size);
          @org.apache.thrift.annotation.Nullable TDBSqlCloudResultFile _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177) {
            _elem176 = new TDBSqlCloudResultFile();
            _elem176.read(iprot);
            struct.cloudFetchResults.add(_elem176);
          }
        }
        struct.setCloudFetchResultsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
