/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.hive.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-02-23")
public class TExecuteStatementResp
    implements org.apache.thrift.TBase<TExecuteStatementResp, TExecuteStatementResp._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TExecuteStatementResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TExecuteStatementResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "status", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField OPERATION_HANDLE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "operationHandle", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
  private static final org.apache.thrift.protocol.TField DIRECT_RESULTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "directResults", org.apache.thrift.protocol.TType.STRUCT, (short) 1281);
  private static final org.apache.thrift.protocol.TField EXECUTION_REJECTED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "executionRejected", org.apache.thrift.protocol.TType.BOOL, (short) 3329);
  private static final org.apache.thrift.protocol.TField MAX_CLUSTER_CAPACITY_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "maxClusterCapacity", org.apache.thrift.protocol.TType.DOUBLE, (short) 3330);
  private static final org.apache.thrift.protocol.TField QUERY_COST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "queryCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 3331);
  private static final org.apache.thrift.protocol.TField SESSION_CONF_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionConf", org.apache.thrift.protocol.TType.STRUCT, (short) 3332);
  private static final org.apache.thrift.protocol.TField CURRENT_CLUSTER_LOAD_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "currentClusterLoad", org.apache.thrift.protocol.TType.DOUBLE, (short) 3333);
  private static final org.apache.thrift.protocol.TField IDEMPOTENCY_TYPE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "idempotencyType", org.apache.thrift.protocol.TType.I32, (short) 3334);
  private static final org.apache.thrift.protocol.TField REMOTE_RESULT_CACHE_ENABLED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "remoteResultCacheEnabled", org.apache.thrift.protocol.TType.BOOL, (short) 3335);
  private static final org.apache.thrift.protocol.TField IS_SERVERLESS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "isServerless", org.apache.thrift.protocol.TType.BOOL, (short) 3336);
  private static final org.apache.thrift.protocol.TField OPERATION_HANDLES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "operationHandles", org.apache.thrift.protocol.TType.LIST, (short) 3337);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TExecuteStatementRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TExecuteStatementRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TStatus status; // required
  public @org.apache.thrift.annotation.Nullable TOperationHandle operationHandle; // optional
  public @org.apache.thrift.annotation.Nullable TSparkDirectResults directResults; // optional
  public boolean executionRejected; // optional
  public double maxClusterCapacity; // optional
  public double queryCost; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf; // optional
  public double currentClusterLoad; // optional

  /**
   * @see TOperationIdempotencyType
   */
  public @org.apache.thrift.annotation.Nullable TOperationIdempotencyType
      idempotencyType; // optional

  public boolean remoteResultCacheEnabled; // optional
  public boolean isServerless; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TOperationHandle>
      operationHandles; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short) 1, "status"),
    OPERATION_HANDLE((short) 2, "operationHandle"),
    DIRECT_RESULTS((short) 1281, "directResults"),
    EXECUTION_REJECTED((short) 3329, "executionRejected"),
    MAX_CLUSTER_CAPACITY((short) 3330, "maxClusterCapacity"),
    QUERY_COST((short) 3331, "queryCost"),
    SESSION_CONF((short) 3332, "sessionConf"),
    CURRENT_CLUSTER_LOAD((short) 3333, "currentClusterLoad"),
    /**
     * @see TOperationIdempotencyType
     */
    IDEMPOTENCY_TYPE((short) 3334, "idempotencyType"),
    REMOTE_RESULT_CACHE_ENABLED((short) 3335, "remoteResultCacheEnabled"),
    IS_SERVERLESS((short) 3336, "isServerless"),
    OPERATION_HANDLES((short) 3337, "operationHandles");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // OPERATION_HANDLE
          return OPERATION_HANDLE;
        case 1281: // DIRECT_RESULTS
          return DIRECT_RESULTS;
        case 3329: // EXECUTION_REJECTED
          return EXECUTION_REJECTED;
        case 3330: // MAX_CLUSTER_CAPACITY
          return MAX_CLUSTER_CAPACITY;
        case 3331: // QUERY_COST
          return QUERY_COST;
        case 3332: // SESSION_CONF
          return SESSION_CONF;
        case 3333: // CURRENT_CLUSTER_LOAD
          return CURRENT_CLUSTER_LOAD;
        case 3334: // IDEMPOTENCY_TYPE
          return IDEMPOTENCY_TYPE;
        case 3335: // REMOTE_RESULT_CACHE_ENABLED
          return REMOTE_RESULT_CACHE_ENABLED;
        case 3336: // IS_SERVERLESS
          return IS_SERVERLESS;
        case 3337: // OPERATION_HANDLES
          return OPERATION_HANDLES;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTIONREJECTED_ISSET_ID = 0;
  private static final int __MAXCLUSTERCAPACITY_ISSET_ID = 1;
  private static final int __QUERYCOST_ISSET_ID = 2;
  private static final int __CURRENTCLUSTERLOAD_ISSET_ID = 3;
  private static final int __REMOTERESULTCACHEENABLED_ISSET_ID = 4;
  private static final int __ISSERVERLESS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.OPERATION_HANDLE,
    _Fields.DIRECT_RESULTS,
    _Fields.EXECUTION_REJECTED,
    _Fields.MAX_CLUSTER_CAPACITY,
    _Fields.QUERY_COST,
    _Fields.SESSION_CONF,
    _Fields.CURRENT_CLUSTER_LOAD,
    _Fields.IDEMPOTENCY_TYPE,
    _Fields.REMOTE_RESULT_CACHE_ENABLED,
    _Fields.IS_SERVERLESS,
    _Fields.OPERATION_HANDLES
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.STATUS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "status",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TStatus.class)));
    tmpMap.put(
        _Fields.OPERATION_HANDLE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "operationHandle",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TOperationHandle.class)));
    tmpMap.put(
        _Fields.DIRECT_RESULTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "directResults",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSparkDirectResults.class)));
    tmpMap.put(
        _Fields.EXECUTION_REJECTED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "executionRejected",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.MAX_CLUSTER_CAPACITY,
        new org.apache.thrift.meta_data.FieldMetaData(
            "maxClusterCapacity",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.QUERY_COST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "queryCost",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.SESSION_CONF,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionConf",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlSessionConf.class)));
    tmpMap.put(
        _Fields.CURRENT_CLUSTER_LOAD,
        new org.apache.thrift.meta_data.FieldMetaData(
            "currentClusterLoad",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.IDEMPOTENCY_TYPE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "idempotencyType",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TOperationIdempotencyType.class)));
    tmpMap.put(
        _Fields.REMOTE_RESULT_CACHE_ENABLED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "remoteResultCacheEnabled",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.IS_SERVERLESS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "isServerless",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.OPERATION_HANDLES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "operationHandles",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TOperationHandle.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TExecuteStatementResp.class, metaDataMap);
  }

  public TExecuteStatementResp() {}

  public TExecuteStatementResp(TStatus status) {
    this();
    this.status = status;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TExecuteStatementResp(TExecuteStatementResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new TStatus(other.status);
    }
    if (other.isSetOperationHandle()) {
      this.operationHandle = new TOperationHandle(other.operationHandle);
    }
    if (other.isSetDirectResults()) {
      this.directResults = new TSparkDirectResults(other.directResults);
    }
    this.executionRejected = other.executionRejected;
    this.maxClusterCapacity = other.maxClusterCapacity;
    this.queryCost = other.queryCost;
    if (other.isSetSessionConf()) {
      this.sessionConf = new TDBSqlSessionConf(other.sessionConf);
    }
    this.currentClusterLoad = other.currentClusterLoad;
    if (other.isSetIdempotencyType()) {
      this.idempotencyType = other.idempotencyType;
    }
    this.remoteResultCacheEnabled = other.remoteResultCacheEnabled;
    this.isServerless = other.isServerless;
    if (other.isSetOperationHandles()) {
      java.util.List<TOperationHandle> __this__operationHandles =
          new java.util.ArrayList<TOperationHandle>(other.operationHandles.size());
      for (TOperationHandle other_element : other.operationHandles) {
        __this__operationHandles.add(new TOperationHandle(other_element));
      }
      this.operationHandles = __this__operationHandles;
    }
  }

  @Override
  public TExecuteStatementResp deepCopy() {
    return new TExecuteStatementResp(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.operationHandle = null;
    this.directResults = null;
    setExecutionRejectedIsSet(false);
    this.executionRejected = false;
    setMaxClusterCapacityIsSet(false);
    this.maxClusterCapacity = 0.0;
    setQueryCostIsSet(false);
    this.queryCost = 0.0;
    this.sessionConf = null;
    setCurrentClusterLoadIsSet(false);
    this.currentClusterLoad = 0.0;
    this.idempotencyType = null;
    setRemoteResultCacheEnabledIsSet(false);
    this.remoteResultCacheEnabled = false;
    setIsServerlessIsSet(false);
    this.isServerless = false;
    this.operationHandles = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TStatus getStatus() {
    return this.status;
  }

  public TExecuteStatementResp setStatus(@org.apache.thrift.annotation.Nullable TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOperationHandle getOperationHandle() {
    return this.operationHandle;
  }

  public TExecuteStatementResp setOperationHandle(
      @org.apache.thrift.annotation.Nullable TOperationHandle operationHandle) {
    this.operationHandle = operationHandle;
    return this;
  }

  public void unsetOperationHandle() {
    this.operationHandle = null;
  }

  /**
   * Returns true if field operationHandle is set (has been assigned a value) and false otherwise
   */
  public boolean isSetOperationHandle() {
    return this.operationHandle != null;
  }

  public void setOperationHandleIsSet(boolean value) {
    if (!value) {
      this.operationHandle = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSparkDirectResults getDirectResults() {
    return this.directResults;
  }

  public TExecuteStatementResp setDirectResults(
      @org.apache.thrift.annotation.Nullable TSparkDirectResults directResults) {
    this.directResults = directResults;
    return this;
  }

  public void unsetDirectResults() {
    this.directResults = null;
  }

  /** Returns true if field directResults is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectResults() {
    return this.directResults != null;
  }

  public void setDirectResultsIsSet(boolean value) {
    if (!value) {
      this.directResults = null;
    }
  }

  public boolean isExecutionRejected() {
    return this.executionRejected;
  }

  public TExecuteStatementResp setExecutionRejected(boolean executionRejected) {
    this.executionRejected = executionRejected;
    setExecutionRejectedIsSet(true);
    return this;
  }

  public void unsetExecutionRejected() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTIONREJECTED_ISSET_ID);
  }

  /**
   * Returns true if field executionRejected is set (has been assigned a value) and false otherwise
   */
  public boolean isSetExecutionRejected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTIONREJECTED_ISSET_ID);
  }

  public void setExecutionRejectedIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __EXECUTIONREJECTED_ISSET_ID, value);
  }

  public double getMaxClusterCapacity() {
    return this.maxClusterCapacity;
  }

  public TExecuteStatementResp setMaxClusterCapacity(double maxClusterCapacity) {
    this.maxClusterCapacity = maxClusterCapacity;
    setMaxClusterCapacityIsSet(true);
    return this;
  }

  public void unsetMaxClusterCapacity() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXCLUSTERCAPACITY_ISSET_ID);
  }

  /**
   * Returns true if field maxClusterCapacity is set (has been assigned a value) and false otherwise
   */
  public boolean isSetMaxClusterCapacity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXCLUSTERCAPACITY_ISSET_ID);
  }

  public void setMaxClusterCapacityIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __MAXCLUSTERCAPACITY_ISSET_ID, value);
  }

  public double getQueryCost() {
    return this.queryCost;
  }

  public TExecuteStatementResp setQueryCost(double queryCost) {
    this.queryCost = queryCost;
    setQueryCostIsSet(true);
    return this;
  }

  public void unsetQueryCost() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYCOST_ISSET_ID);
  }

  /** Returns true if field queryCost is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYCOST_ISSET_ID);
  }

  public void setQueryCostIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYCOST_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlSessionConf getSessionConf() {
    return this.sessionConf;
  }

  public TExecuteStatementResp setSessionConf(
      @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf) {
    this.sessionConf = sessionConf;
    return this;
  }

  public void unsetSessionConf() {
    this.sessionConf = null;
  }

  /** Returns true if field sessionConf is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionConf() {
    return this.sessionConf != null;
  }

  public void setSessionConfIsSet(boolean value) {
    if (!value) {
      this.sessionConf = null;
    }
  }

  public double getCurrentClusterLoad() {
    return this.currentClusterLoad;
  }

  public TExecuteStatementResp setCurrentClusterLoad(double currentClusterLoad) {
    this.currentClusterLoad = currentClusterLoad;
    setCurrentClusterLoadIsSet(true);
    return this;
  }

  public void unsetCurrentClusterLoad() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTCLUSTERLOAD_ISSET_ID);
  }

  /**
   * Returns true if field currentClusterLoad is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCurrentClusterLoad() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTCLUSTERLOAD_ISSET_ID);
  }

  public void setCurrentClusterLoadIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CURRENTCLUSTERLOAD_ISSET_ID, value);
  }

  /**
   * @see TOperationIdempotencyType
   */
  @org.apache.thrift.annotation.Nullable
  public TOperationIdempotencyType getIdempotencyType() {
    return this.idempotencyType;
  }

  /**
   * @see TOperationIdempotencyType
   */
  public TExecuteStatementResp setIdempotencyType(
      @org.apache.thrift.annotation.Nullable TOperationIdempotencyType idempotencyType) {
    this.idempotencyType = idempotencyType;
    return this;
  }

  public void unsetIdempotencyType() {
    this.idempotencyType = null;
  }

  /**
   * Returns true if field idempotencyType is set (has been assigned a value) and false otherwise
   */
  public boolean isSetIdempotencyType() {
    return this.idempotencyType != null;
  }

  public void setIdempotencyTypeIsSet(boolean value) {
    if (!value) {
      this.idempotencyType = null;
    }
  }

  public boolean isRemoteResultCacheEnabled() {
    return this.remoteResultCacheEnabled;
  }

  public TExecuteStatementResp setRemoteResultCacheEnabled(boolean remoteResultCacheEnabled) {
    this.remoteResultCacheEnabled = remoteResultCacheEnabled;
    setRemoteResultCacheEnabledIsSet(true);
    return this;
  }

  public void unsetRemoteResultCacheEnabled() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID);
  }

  /**
   * Returns true if field remoteResultCacheEnabled is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetRemoteResultCacheEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID);
  }

  public void setRemoteResultCacheEnabledIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __REMOTERESULTCACHEENABLED_ISSET_ID, value);
  }

  public boolean isIsServerless() {
    return this.isServerless;
  }

  public TExecuteStatementResp setIsServerless(boolean isServerless) {
    this.isServerless = isServerless;
    setIsServerlessIsSet(true);
    return this;
  }

  public void unsetIsServerless() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID);
  }

  /** Returns true if field isServerless is set (has been assigned a value) and false otherwise */
  public boolean isSetIsServerless() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID);
  }

  public void setIsServerlessIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSERVERLESS_ISSET_ID, value);
  }

  public int getOperationHandlesSize() {
    return (this.operationHandles == null) ? 0 : this.operationHandles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TOperationHandle> getOperationHandlesIterator() {
    return (this.operationHandles == null) ? null : this.operationHandles.iterator();
  }

  public void addToOperationHandles(TOperationHandle elem) {
    if (this.operationHandles == null) {
      this.operationHandles = new java.util.ArrayList<TOperationHandle>();
    }
    this.operationHandles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TOperationHandle> getOperationHandles() {
    return this.operationHandles;
  }

  public TExecuteStatementResp setOperationHandles(
      @org.apache.thrift.annotation.Nullable java.util.List<TOperationHandle> operationHandles) {
    this.operationHandles = operationHandles;
    return this;
  }

  public void unsetOperationHandles() {
    this.operationHandles = null;
  }

  /**
   * Returns true if field operationHandles is set (has been assigned a value) and false otherwise
   */
  public boolean isSetOperationHandles() {
    return this.operationHandles != null;
  }

  public void setOperationHandlesIsSet(boolean value) {
    if (!value) {
      this.operationHandles = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TStatus) value);
        }
        break;

      case OPERATION_HANDLE:
        if (value == null) {
          unsetOperationHandle();
        } else {
          setOperationHandle((TOperationHandle) value);
        }
        break;

      case DIRECT_RESULTS:
        if (value == null) {
          unsetDirectResults();
        } else {
          setDirectResults((TSparkDirectResults) value);
        }
        break;

      case EXECUTION_REJECTED:
        if (value == null) {
          unsetExecutionRejected();
        } else {
          setExecutionRejected((java.lang.Boolean) value);
        }
        break;

      case MAX_CLUSTER_CAPACITY:
        if (value == null) {
          unsetMaxClusterCapacity();
        } else {
          setMaxClusterCapacity((java.lang.Double) value);
        }
        break;

      case QUERY_COST:
        if (value == null) {
          unsetQueryCost();
        } else {
          setQueryCost((java.lang.Double) value);
        }
        break;

      case SESSION_CONF:
        if (value == null) {
          unsetSessionConf();
        } else {
          setSessionConf((TDBSqlSessionConf) value);
        }
        break;

      case CURRENT_CLUSTER_LOAD:
        if (value == null) {
          unsetCurrentClusterLoad();
        } else {
          setCurrentClusterLoad((java.lang.Double) value);
        }
        break;

      case IDEMPOTENCY_TYPE:
        if (value == null) {
          unsetIdempotencyType();
        } else {
          setIdempotencyType((TOperationIdempotencyType) value);
        }
        break;

      case REMOTE_RESULT_CACHE_ENABLED:
        if (value == null) {
          unsetRemoteResultCacheEnabled();
        } else {
          setRemoteResultCacheEnabled((java.lang.Boolean) value);
        }
        break;

      case IS_SERVERLESS:
        if (value == null) {
          unsetIsServerless();
        } else {
          setIsServerless((java.lang.Boolean) value);
        }
        break;

      case OPERATION_HANDLES:
        if (value == null) {
          unsetOperationHandles();
        } else {
          setOperationHandles((java.util.List<TOperationHandle>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case STATUS:
        return getStatus();

      case OPERATION_HANDLE:
        return getOperationHandle();

      case DIRECT_RESULTS:
        return getDirectResults();

      case EXECUTION_REJECTED:
        return isExecutionRejected();

      case MAX_CLUSTER_CAPACITY:
        return getMaxClusterCapacity();

      case QUERY_COST:
        return getQueryCost();

      case SESSION_CONF:
        return getSessionConf();

      case CURRENT_CLUSTER_LOAD:
        return getCurrentClusterLoad();

      case IDEMPOTENCY_TYPE:
        return getIdempotencyType();

      case REMOTE_RESULT_CACHE_ENABLED:
        return isRemoteResultCacheEnabled();

      case IS_SERVERLESS:
        return isIsServerless();

      case OPERATION_HANDLES:
        return getOperationHandles();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case STATUS:
        return isSetStatus();
      case OPERATION_HANDLE:
        return isSetOperationHandle();
      case DIRECT_RESULTS:
        return isSetDirectResults();
      case EXECUTION_REJECTED:
        return isSetExecutionRejected();
      case MAX_CLUSTER_CAPACITY:
        return isSetMaxClusterCapacity();
      case QUERY_COST:
        return isSetQueryCost();
      case SESSION_CONF:
        return isSetSessionConf();
      case CURRENT_CLUSTER_LOAD:
        return isSetCurrentClusterLoad();
      case IDEMPOTENCY_TYPE:
        return isSetIdempotencyType();
      case REMOTE_RESULT_CACHE_ENABLED:
        return isSetRemoteResultCacheEnabled();
      case IS_SERVERLESS:
        return isSetIsServerless();
      case OPERATION_HANDLES:
        return isSetOperationHandles();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecuteStatementResp) return this.equals((TExecuteStatementResp) that);
    return false;
  }

  public boolean equals(TExecuteStatementResp that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status)) return false;
      if (!this.status.equals(that.status)) return false;
    }

    boolean this_present_operationHandle = true && this.isSetOperationHandle();
    boolean that_present_operationHandle = true && that.isSetOperationHandle();
    if (this_present_operationHandle || that_present_operationHandle) {
      if (!(this_present_operationHandle && that_present_operationHandle)) return false;
      if (!this.operationHandle.equals(that.operationHandle)) return false;
    }

    boolean this_present_directResults = true && this.isSetDirectResults();
    boolean that_present_directResults = true && that.isSetDirectResults();
    if (this_present_directResults || that_present_directResults) {
      if (!(this_present_directResults && that_present_directResults)) return false;
      if (!this.directResults.equals(that.directResults)) return false;
    }

    boolean this_present_executionRejected = true && this.isSetExecutionRejected();
    boolean that_present_executionRejected = true && that.isSetExecutionRejected();
    if (this_present_executionRejected || that_present_executionRejected) {
      if (!(this_present_executionRejected && that_present_executionRejected)) return false;
      if (this.executionRejected != that.executionRejected) return false;
    }

    boolean this_present_maxClusterCapacity = true && this.isSetMaxClusterCapacity();
    boolean that_present_maxClusterCapacity = true && that.isSetMaxClusterCapacity();
    if (this_present_maxClusterCapacity || that_present_maxClusterCapacity) {
      if (!(this_present_maxClusterCapacity && that_present_maxClusterCapacity)) return false;
      if (this.maxClusterCapacity != that.maxClusterCapacity) return false;
    }

    boolean this_present_queryCost = true && this.isSetQueryCost();
    boolean that_present_queryCost = true && that.isSetQueryCost();
    if (this_present_queryCost || that_present_queryCost) {
      if (!(this_present_queryCost && that_present_queryCost)) return false;
      if (this.queryCost != that.queryCost) return false;
    }

    boolean this_present_sessionConf = true && this.isSetSessionConf();
    boolean that_present_sessionConf = true && that.isSetSessionConf();
    if (this_present_sessionConf || that_present_sessionConf) {
      if (!(this_present_sessionConf && that_present_sessionConf)) return false;
      if (!this.sessionConf.equals(that.sessionConf)) return false;
    }

    boolean this_present_currentClusterLoad = true && this.isSetCurrentClusterLoad();
    boolean that_present_currentClusterLoad = true && that.isSetCurrentClusterLoad();
    if (this_present_currentClusterLoad || that_present_currentClusterLoad) {
      if (!(this_present_currentClusterLoad && that_present_currentClusterLoad)) return false;
      if (this.currentClusterLoad != that.currentClusterLoad) return false;
    }

    boolean this_present_idempotencyType = true && this.isSetIdempotencyType();
    boolean that_present_idempotencyType = true && that.isSetIdempotencyType();
    if (this_present_idempotencyType || that_present_idempotencyType) {
      if (!(this_present_idempotencyType && that_present_idempotencyType)) return false;
      if (!this.idempotencyType.equals(that.idempotencyType)) return false;
    }

    boolean this_present_remoteResultCacheEnabled = true && this.isSetRemoteResultCacheEnabled();
    boolean that_present_remoteResultCacheEnabled = true && that.isSetRemoteResultCacheEnabled();
    if (this_present_remoteResultCacheEnabled || that_present_remoteResultCacheEnabled) {
      if (!(this_present_remoteResultCacheEnabled && that_present_remoteResultCacheEnabled))
        return false;
      if (this.remoteResultCacheEnabled != that.remoteResultCacheEnabled) return false;
    }

    boolean this_present_isServerless = true && this.isSetIsServerless();
    boolean that_present_isServerless = true && that.isSetIsServerless();
    if (this_present_isServerless || that_present_isServerless) {
      if (!(this_present_isServerless && that_present_isServerless)) return false;
      if (this.isServerless != that.isServerless) return false;
    }

    boolean this_present_operationHandles = true && this.isSetOperationHandles();
    boolean that_present_operationHandles = true && that.isSetOperationHandles();
    if (this_present_operationHandles || that_present_operationHandles) {
      if (!(this_present_operationHandles && that_present_operationHandles)) return false;
      if (!this.operationHandles.equals(that.operationHandles)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus()) hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperationHandle()) ? 131071 : 524287);
    if (isSetOperationHandle()) hashCode = hashCode * 8191 + operationHandle.hashCode();

    hashCode = hashCode * 8191 + ((isSetDirectResults()) ? 131071 : 524287);
    if (isSetDirectResults()) hashCode = hashCode * 8191 + directResults.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutionRejected()) ? 131071 : 524287);
    if (isSetExecutionRejected())
      hashCode = hashCode * 8191 + ((executionRejected) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMaxClusterCapacity()) ? 131071 : 524287);
    if (isSetMaxClusterCapacity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxClusterCapacity);

    hashCode = hashCode * 8191 + ((isSetQueryCost()) ? 131071 : 524287);
    if (isSetQueryCost())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryCost);

    hashCode = hashCode * 8191 + ((isSetSessionConf()) ? 131071 : 524287);
    if (isSetSessionConf()) hashCode = hashCode * 8191 + sessionConf.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrentClusterLoad()) ? 131071 : 524287);
    if (isSetCurrentClusterLoad())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(currentClusterLoad);

    hashCode = hashCode * 8191 + ((isSetIdempotencyType()) ? 131071 : 524287);
    if (isSetIdempotencyType()) hashCode = hashCode * 8191 + idempotencyType.getValue();

    hashCode = hashCode * 8191 + ((isSetRemoteResultCacheEnabled()) ? 131071 : 524287);
    if (isSetRemoteResultCacheEnabled())
      hashCode = hashCode * 8191 + ((remoteResultCacheEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsServerless()) ? 131071 : 524287);
    if (isSetIsServerless()) hashCode = hashCode * 8191 + ((isServerless) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOperationHandles()) ? 131071 : 524287);
    if (isSetOperationHandles()) hashCode = hashCode * 8191 + operationHandles.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecuteStatementResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetOperationHandle(), other.isSetOperationHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationHandle()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.operationHandle, other.operationHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDirectResults(), other.isSetDirectResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectResults()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.directResults, other.directResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetExecutionRejected(), other.isSetExecutionRejected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionRejected()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.executionRejected, other.executionRejected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetMaxClusterCapacity(), other.isSetMaxClusterCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxClusterCapacity()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.maxClusterCapacity, other.maxClusterCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryCost(), other.isSetQueryCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCost, other.queryCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSessionConf(), other.isSetSessionConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionConf, other.sessionConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCurrentClusterLoad(), other.isSetCurrentClusterLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentClusterLoad()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.currentClusterLoad, other.currentClusterLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetIdempotencyType(), other.isSetIdempotencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdempotencyType()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.idempotencyType, other.idempotencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetRemoteResultCacheEnabled(), other.isSetRemoteResultCacheEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteResultCacheEnabled()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.remoteResultCacheEnabled, other.remoteResultCacheEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsServerless(), other.isSetIsServerless());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsServerless()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.isServerless, other.isServerless);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetOperationHandles(), other.isSetOperationHandles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationHandles()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.operationHandles, other.operationHandles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecuteStatementResp(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetOperationHandle()) {
      if (!first) sb.append(", ");
      sb.append("operationHandle:");
      if (this.operationHandle == null) {
        sb.append("null");
      } else {
        sb.append(this.operationHandle);
      }
      first = false;
    }
    if (isSetDirectResults()) {
      if (!first) sb.append(", ");
      sb.append("directResults:");
      if (this.directResults == null) {
        sb.append("null");
      } else {
        sb.append(this.directResults);
      }
      first = false;
    }
    if (isSetExecutionRejected()) {
      if (!first) sb.append(", ");
      sb.append("executionRejected:");
      sb.append(this.executionRejected);
      first = false;
    }
    if (isSetMaxClusterCapacity()) {
      if (!first) sb.append(", ");
      sb.append("maxClusterCapacity:");
      sb.append(this.maxClusterCapacity);
      first = false;
    }
    if (isSetQueryCost()) {
      if (!first) sb.append(", ");
      sb.append("queryCost:");
      sb.append(this.queryCost);
      first = false;
    }
    if (isSetSessionConf()) {
      if (!first) sb.append(", ");
      sb.append("sessionConf:");
      if (this.sessionConf == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionConf);
      }
      first = false;
    }
    if (isSetCurrentClusterLoad()) {
      if (!first) sb.append(", ");
      sb.append("currentClusterLoad:");
      sb.append(this.currentClusterLoad);
      first = false;
    }
    if (isSetIdempotencyType()) {
      if (!first) sb.append(", ");
      sb.append("idempotencyType:");
      if (this.idempotencyType == null) {
        sb.append("null");
      } else {
        sb.append(this.idempotencyType);
      }
      first = false;
    }
    if (isSetRemoteResultCacheEnabled()) {
      if (!first) sb.append(", ");
      sb.append("remoteResultCacheEnabled:");
      sb.append(this.remoteResultCacheEnabled);
      first = false;
    }
    if (isSetIsServerless()) {
      if (!first) sb.append(", ");
      sb.append("isServerless:");
      sb.append(this.isServerless);
      first = false;
    }
    if (isSetOperationHandles()) {
      if (!first) sb.append(", ");
      sb.append("operationHandles:");
      if (this.operationHandles == null) {
        sb.append("null");
      } else {
        sb.append(this.operationHandles);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (operationHandle != null) {
      operationHandle.validate();
    }
    if (directResults != null) {
      directResults.validate();
    }
    if (sessionConf != null) {
      sessionConf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecuteStatementRespStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecuteStatementRespStandardScheme getScheme() {
      return new TExecuteStatementRespStandardScheme();
    }
  }

  private static class TExecuteStatementRespStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TExecuteStatementResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecuteStatementResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.operationHandle = new TOperationHandle();
              struct.operationHandle.read(iprot);
              struct.setOperationHandleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // DIRECT_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.directResults = new TSparkDirectResults();
              struct.directResults.read(iprot);
              struct.setDirectResultsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3329: // EXECUTION_REJECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.executionRejected = iprot.readBool();
              struct.setExecutionRejectedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3330: // MAX_CLUSTER_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxClusterCapacity = iprot.readDouble();
              struct.setMaxClusterCapacityIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3331: // QUERY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.queryCost = iprot.readDouble();
              struct.setQueryCostIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3332: // SESSION_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionConf = new TDBSqlSessionConf();
              struct.sessionConf.read(iprot);
              struct.setSessionConfIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3333: // CURRENT_CLUSTER_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentClusterLoad = iprot.readDouble();
              struct.setCurrentClusterLoadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3334: // IDEMPOTENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idempotencyType =
                  org.apache.hive.service.rpc.thrift.TOperationIdempotencyType.findByValue(
                      iprot.readI32());
              struct.setIdempotencyTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3335: // REMOTE_RESULT_CACHE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.remoteResultCacheEnabled = iprot.readBool();
              struct.setRemoteResultCacheEnabledIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3336: // IS_SERVERLESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isServerless = iprot.readBool();
              struct.setIsServerlessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3337: // OPERATION_HANDLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                struct.operationHandles = new java.util.ArrayList<TOperationHandle>(_list304.size);
                @org.apache.thrift.annotation.Nullable TOperationHandle _elem305;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306) {
                  _elem305 = new TOperationHandle();
                  _elem305.read(iprot);
                  struct.operationHandles.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.setOperationHandlesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecuteStatementResp struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.operationHandle != null) {
        if (struct.isSetOperationHandle()) {
          oprot.writeFieldBegin(OPERATION_HANDLE_FIELD_DESC);
          struct.operationHandle.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.directResults != null) {
        if (struct.isSetDirectResults()) {
          oprot.writeFieldBegin(DIRECT_RESULTS_FIELD_DESC);
          struct.directResults.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecutionRejected()) {
        oprot.writeFieldBegin(EXECUTION_REJECTED_FIELD_DESC);
        oprot.writeBool(struct.executionRejected);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxClusterCapacity()) {
        oprot.writeFieldBegin(MAX_CLUSTER_CAPACITY_FIELD_DESC);
        oprot.writeDouble(struct.maxClusterCapacity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryCost()) {
        oprot.writeFieldBegin(QUERY_COST_FIELD_DESC);
        oprot.writeDouble(struct.queryCost);
        oprot.writeFieldEnd();
      }
      if (struct.sessionConf != null) {
        if (struct.isSetSessionConf()) {
          oprot.writeFieldBegin(SESSION_CONF_FIELD_DESC);
          struct.sessionConf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrentClusterLoad()) {
        oprot.writeFieldBegin(CURRENT_CLUSTER_LOAD_FIELD_DESC);
        oprot.writeDouble(struct.currentClusterLoad);
        oprot.writeFieldEnd();
      }
      if (struct.idempotencyType != null) {
        if (struct.isSetIdempotencyType()) {
          oprot.writeFieldBegin(IDEMPOTENCY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.idempotencyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        oprot.writeFieldBegin(REMOTE_RESULT_CACHE_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.remoteResultCacheEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsServerless()) {
        oprot.writeFieldBegin(IS_SERVERLESS_FIELD_DESC);
        oprot.writeBool(struct.isServerless);
        oprot.writeFieldEnd();
      }
      if (struct.operationHandles != null) {
        if (struct.isSetOperationHandles()) {
          oprot.writeFieldBegin(OPERATION_HANDLES_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.operationHandles.size()));
            for (TOperationHandle _iter307 : struct.operationHandles) {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TExecuteStatementRespTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecuteStatementRespTupleScheme getScheme() {
      return new TExecuteStatementRespTupleScheme();
    }
  }

  private static class TExecuteStatementRespTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TExecuteStatementResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecuteStatementResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOperationHandle()) {
        optionals.set(0);
      }
      if (struct.isSetDirectResults()) {
        optionals.set(1);
      }
      if (struct.isSetExecutionRejected()) {
        optionals.set(2);
      }
      if (struct.isSetMaxClusterCapacity()) {
        optionals.set(3);
      }
      if (struct.isSetQueryCost()) {
        optionals.set(4);
      }
      if (struct.isSetSessionConf()) {
        optionals.set(5);
      }
      if (struct.isSetCurrentClusterLoad()) {
        optionals.set(6);
      }
      if (struct.isSetIdempotencyType()) {
        optionals.set(7);
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        optionals.set(8);
      }
      if (struct.isSetIsServerless()) {
        optionals.set(9);
      }
      if (struct.isSetOperationHandles()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOperationHandle()) {
        struct.operationHandle.write(oprot);
      }
      if (struct.isSetDirectResults()) {
        struct.directResults.write(oprot);
      }
      if (struct.isSetExecutionRejected()) {
        oprot.writeBool(struct.executionRejected);
      }
      if (struct.isSetMaxClusterCapacity()) {
        oprot.writeDouble(struct.maxClusterCapacity);
      }
      if (struct.isSetQueryCost()) {
        oprot.writeDouble(struct.queryCost);
      }
      if (struct.isSetSessionConf()) {
        struct.sessionConf.write(oprot);
      }
      if (struct.isSetCurrentClusterLoad()) {
        oprot.writeDouble(struct.currentClusterLoad);
      }
      if (struct.isSetIdempotencyType()) {
        oprot.writeI32(struct.idempotencyType.getValue());
      }
      if (struct.isSetRemoteResultCacheEnabled()) {
        oprot.writeBool(struct.remoteResultCacheEnabled);
      }
      if (struct.isSetIsServerless()) {
        oprot.writeBool(struct.isServerless);
      }
      if (struct.isSetOperationHandles()) {
        {
          oprot.writeI32(struct.operationHandles.size());
          for (TOperationHandle _iter308 : struct.operationHandles) {
            _iter308.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecuteStatementResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.operationHandle = new TOperationHandle();
        struct.operationHandle.read(iprot);
        struct.setOperationHandleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.directResults = new TSparkDirectResults();
        struct.directResults.read(iprot);
        struct.setDirectResultsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.executionRejected = iprot.readBool();
        struct.setExecutionRejectedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxClusterCapacity = iprot.readDouble();
        struct.setMaxClusterCapacityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queryCost = iprot.readDouble();
        struct.setQueryCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sessionConf = new TDBSqlSessionConf();
        struct.sessionConf.read(iprot);
        struct.setSessionConfIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currentClusterLoad = iprot.readDouble();
        struct.setCurrentClusterLoadIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idempotencyType =
            org.apache.hive.service.rpc.thrift.TOperationIdempotencyType.findByValue(
                iprot.readI32());
        struct.setIdempotencyTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remoteResultCacheEnabled = iprot.readBool();
        struct.setRemoteResultCacheEnabledIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isServerless = iprot.readBool();
        struct.setIsServerlessIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list309 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.operationHandles = new java.util.ArrayList<TOperationHandle>(_list309.size);
          @org.apache.thrift.annotation.Nullable TOperationHandle _elem310;
          for (int _i311 = 0; _i311 < _list309.size; ++_i311) {
            _elem310 = new TOperationHandle();
            _elem310.read(iprot);
            struct.operationHandles.add(_elem310);
          }
        }
        struct.setOperationHandlesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
