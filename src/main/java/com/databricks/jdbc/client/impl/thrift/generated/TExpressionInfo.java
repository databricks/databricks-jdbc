/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.client.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-04-10")
public class TExpressionInfo
    implements org.apache.thrift.TBase<TExpressionInfo, TExpressionInfo._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TExpressionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TExpressionInfo");

  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "className", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField USAGE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "usage", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "name", org.apache.thrift.protocol.TType.STRING, (short) 3);
  private static final org.apache.thrift.protocol.TField EXTENDED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "extended", org.apache.thrift.protocol.TType.STRING, (short) 4);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "db", org.apache.thrift.protocol.TType.STRING, (short) 5);
  private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "arguments", org.apache.thrift.protocol.TType.STRING, (short) 6);
  private static final org.apache.thrift.protocol.TField EXAMPLES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "examples", org.apache.thrift.protocol.TType.STRING, (short) 7);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "note", org.apache.thrift.protocol.TType.STRING, (short) 8);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "group", org.apache.thrift.protocol.TType.STRING, (short) 9);
  private static final org.apache.thrift.protocol.TField SINCE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "since", org.apache.thrift.protocol.TType.STRING, (short) 10);
  private static final org.apache.thrift.protocol.TField DEPRECATED_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "deprecated", org.apache.thrift.protocol.TType.STRING, (short) 11);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "source", org.apache.thrift.protocol.TType.STRING, (short) 12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TExpressionInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TExpressionInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String className; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String usage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String extended; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String arguments; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String examples; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String note; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String group; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String since; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String deprecated; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String source; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS_NAME((short) 1, "className"),
    USAGE((short) 2, "usage"),
    NAME((short) 3, "name"),
    EXTENDED((short) 4, "extended"),
    DB((short) 5, "db"),
    ARGUMENTS((short) 6, "arguments"),
    EXAMPLES((short) 7, "examples"),
    NOTE((short) 8, "note"),
    GROUP((short) 9, "group"),
    SINCE((short) 10, "since"),
    DEPRECATED((short) 11, "deprecated"),
    SOURCE((short) 12, "source");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // CLASS_NAME
          return CLASS_NAME;
        case 2: // USAGE
          return USAGE;
        case 3: // NAME
          return NAME;
        case 4: // EXTENDED
          return EXTENDED;
        case 5: // DB
          return DB;
        case 6: // ARGUMENTS
          return ARGUMENTS;
        case 7: // EXAMPLES
          return EXAMPLES;
        case 8: // NOTE
          return NOTE;
        case 9: // GROUP
          return GROUP;
        case 10: // SINCE
          return SINCE;
        case 11: // DEPRECATED
          return DEPRECATED;
        case 12: // SOURCE
          return SOURCE;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {
    _Fields.CLASS_NAME,
    _Fields.USAGE,
    _Fields.NAME,
    _Fields.EXTENDED,
    _Fields.DB,
    _Fields.ARGUMENTS,
    _Fields.EXAMPLES,
    _Fields.NOTE,
    _Fields.GROUP,
    _Fields.SINCE,
    _Fields.DEPRECATED,
    _Fields.SOURCE
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.CLASS_NAME,
        new org.apache.thrift.meta_data.FieldMetaData(
            "className",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.USAGE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "usage",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.NAME,
        new org.apache.thrift.meta_data.FieldMetaData(
            "name",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.EXTENDED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "extended",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.DB,
        new org.apache.thrift.meta_data.FieldMetaData(
            "db",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.ARGUMENTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "arguments",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.EXAMPLES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "examples",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.NOTE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "note",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.GROUP,
        new org.apache.thrift.meta_data.FieldMetaData(
            "group",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.SINCE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "since",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.DEPRECATED,
        new org.apache.thrift.meta_data.FieldMetaData(
            "deprecated",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.SOURCE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "source",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TExpressionInfo.class, metaDataMap);
  }

  public TExpressionInfo() {}

  /** Performs a deep copy on <i>other</i>. */
  public TExpressionInfo(TExpressionInfo other) {
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetUsage()) {
      this.usage = other.usage;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetExtended()) {
      this.extended = other.extended;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetArguments()) {
      this.arguments = other.arguments;
    }
    if (other.isSetExamples()) {
      this.examples = other.examples;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetSince()) {
      this.since = other.since;
    }
    if (other.isSetDeprecated()) {
      this.deprecated = other.deprecated;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
  }

  @Override
  public TExpressionInfo deepCopy() {
    return new TExpressionInfo(this);
  }

  @Override
  public void clear() {
    this.className = null;
    this.usage = null;
    this.name = null;
    this.extended = null;
    this.db = null;
    this.arguments = null;
    this.examples = null;
    this.note = null;
    this.group = null;
    this.since = null;
    this.deprecated = null;
    this.source = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClassName() {
    return this.className;
  }

  public TExpressionInfo setClassName(
      @org.apache.thrift.annotation.Nullable java.lang.String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsage() {
    return this.usage;
  }

  public TExpressionInfo setUsage(@org.apache.thrift.annotation.Nullable java.lang.String usage) {
    this.usage = usage;
    return this;
  }

  public void unsetUsage() {
    this.usage = null;
  }

  /** Returns true if field usage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsage() {
    return this.usage != null;
  }

  public void setUsageIsSet(boolean value) {
    if (!value) {
      this.usage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TExpressionInfo setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExtended() {
    return this.extended;
  }

  public TExpressionInfo setExtended(
      @org.apache.thrift.annotation.Nullable java.lang.String extended) {
    this.extended = extended;
    return this;
  }

  public void unsetExtended() {
    this.extended = null;
  }

  /** Returns true if field extended is set (has been assigned a value) and false otherwise */
  public boolean isSetExtended() {
    return this.extended != null;
  }

  public void setExtendedIsSet(boolean value) {
    if (!value) {
      this.extended = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TExpressionInfo setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArguments() {
    return this.arguments;
  }

  public TExpressionInfo setArguments(
      @org.apache.thrift.annotation.Nullable java.lang.String arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExamples() {
    return this.examples;
  }

  public TExpressionInfo setExamples(
      @org.apache.thrift.annotation.Nullable java.lang.String examples) {
    this.examples = examples;
    return this;
  }

  public void unsetExamples() {
    this.examples = null;
  }

  /** Returns true if field examples is set (has been assigned a value) and false otherwise */
  public boolean isSetExamples() {
    return this.examples != null;
  }

  public void setExamplesIsSet(boolean value) {
    if (!value) {
      this.examples = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNote() {
    return this.note;
  }

  public TExpressionInfo setNote(@org.apache.thrift.annotation.Nullable java.lang.String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGroup() {
    return this.group;
  }

  public TExpressionInfo setGroup(@org.apache.thrift.annotation.Nullable java.lang.String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSince() {
    return this.since;
  }

  public TExpressionInfo setSince(@org.apache.thrift.annotation.Nullable java.lang.String since) {
    this.since = since;
    return this;
  }

  public void unsetSince() {
    this.since = null;
  }

  /** Returns true if field since is set (has been assigned a value) and false otherwise */
  public boolean isSetSince() {
    return this.since != null;
  }

  public void setSinceIsSet(boolean value) {
    if (!value) {
      this.since = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeprecated() {
    return this.deprecated;
  }

  public TExpressionInfo setDeprecated(
      @org.apache.thrift.annotation.Nullable java.lang.String deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  public void unsetDeprecated() {
    this.deprecated = null;
  }

  /** Returns true if field deprecated is set (has been assigned a value) and false otherwise */
  public boolean isSetDeprecated() {
    return this.deprecated != null;
  }

  public void setDeprecatedIsSet(boolean value) {
    if (!value) {
      this.deprecated = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSource() {
    return this.source;
  }

  public TExpressionInfo setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((java.lang.String) value);
        }
        break;

      case USAGE:
        if (value == null) {
          unsetUsage();
        } else {
          setUsage((java.lang.String) value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String) value);
        }
        break;

      case EXTENDED:
        if (value == null) {
          unsetExtended();
        } else {
          setExtended((java.lang.String) value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String) value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.lang.String) value);
        }
        break;

      case EXAMPLES:
        if (value == null) {
          unsetExamples();
        } else {
          setExamples((java.lang.String) value);
        }
        break;

      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((java.lang.String) value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((java.lang.String) value);
        }
        break;

      case SINCE:
        if (value == null) {
          unsetSince();
        } else {
          setSince((java.lang.String) value);
        }
        break;

      case DEPRECATED:
        if (value == null) {
          unsetDeprecated();
        } else {
          setDeprecated((java.lang.String) value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.String) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case CLASS_NAME:
        return getClassName();

      case USAGE:
        return getUsage();

      case NAME:
        return getName();

      case EXTENDED:
        return getExtended();

      case DB:
        return getDb();

      case ARGUMENTS:
        return getArguments();

      case EXAMPLES:
        return getExamples();

      case NOTE:
        return getNote();

      case GROUP:
        return getGroup();

      case SINCE:
        return getSince();

      case DEPRECATED:
        return getDeprecated();

      case SOURCE:
        return getSource();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case CLASS_NAME:
        return isSetClassName();
      case USAGE:
        return isSetUsage();
      case NAME:
        return isSetName();
      case EXTENDED:
        return isSetExtended();
      case DB:
        return isSetDb();
      case ARGUMENTS:
        return isSetArguments();
      case EXAMPLES:
        return isSetExamples();
      case NOTE:
        return isSetNote();
      case GROUP:
        return isSetGroup();
      case SINCE:
        return isSetSince();
      case DEPRECATED:
        return isSetDeprecated();
      case SOURCE:
        return isSetSource();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExpressionInfo) return this.equals((TExpressionInfo) that);
    return false;
  }

  public boolean equals(TExpressionInfo that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className)) return false;
      if (!this.className.equals(that.className)) return false;
    }

    boolean this_present_usage = true && this.isSetUsage();
    boolean that_present_usage = true && that.isSetUsage();
    if (this_present_usage || that_present_usage) {
      if (!(this_present_usage && that_present_usage)) return false;
      if (!this.usage.equals(that.usage)) return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name)) return false;
      if (!this.name.equals(that.name)) return false;
    }

    boolean this_present_extended = true && this.isSetExtended();
    boolean that_present_extended = true && that.isSetExtended();
    if (this_present_extended || that_present_extended) {
      if (!(this_present_extended && that_present_extended)) return false;
      if (!this.extended.equals(that.extended)) return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db)) return false;
      if (!this.db.equals(that.db)) return false;
    }

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments)) return false;
      if (!this.arguments.equals(that.arguments)) return false;
    }

    boolean this_present_examples = true && this.isSetExamples();
    boolean that_present_examples = true && that.isSetExamples();
    if (this_present_examples || that_present_examples) {
      if (!(this_present_examples && that_present_examples)) return false;
      if (!this.examples.equals(that.examples)) return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note)) return false;
      if (!this.note.equals(that.note)) return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group)) return false;
      if (!this.group.equals(that.group)) return false;
    }

    boolean this_present_since = true && this.isSetSince();
    boolean that_present_since = true && that.isSetSince();
    if (this_present_since || that_present_since) {
      if (!(this_present_since && that_present_since)) return false;
      if (!this.since.equals(that.since)) return false;
    }

    boolean this_present_deprecated = true && this.isSetDeprecated();
    boolean that_present_deprecated = true && that.isSetDeprecated();
    if (this_present_deprecated || that_present_deprecated) {
      if (!(this_present_deprecated && that_present_deprecated)) return false;
      if (!this.deprecated.equals(that.deprecated)) return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source)) return false;
      if (!this.source.equals(that.source)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
    if (isSetClassName()) hashCode = hashCode * 8191 + className.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsage()) ? 131071 : 524287);
    if (isSetUsage()) hashCode = hashCode * 8191 + usage.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName()) hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtended()) ? 131071 : 524287);
    if (isSetExtended()) hashCode = hashCode * 8191 + extended.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb()) hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
    if (isSetArguments()) hashCode = hashCode * 8191 + arguments.hashCode();

    hashCode = hashCode * 8191 + ((isSetExamples()) ? 131071 : 524287);
    if (isSetExamples()) hashCode = hashCode * 8191 + examples.hashCode();

    hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
    if (isSetNote()) hashCode = hashCode * 8191 + note.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup()) hashCode = hashCode * 8191 + group.hashCode();

    hashCode = hashCode * 8191 + ((isSetSince()) ? 131071 : 524287);
    if (isSetSince()) hashCode = hashCode * 8191 + since.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeprecated()) ? 131071 : 524287);
    if (isSetDeprecated()) hashCode = hashCode * 8191 + deprecated.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource()) hashCode = hashCode * 8191 + source.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExpressionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetClassName(), other.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsage(), other.isSetUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usage, other.usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtended(), other.isSetExtended());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtended()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extended, other.extended);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArguments(), other.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArguments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExamples(), other.isSetExamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examples, other.examples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNote(), other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup(), other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSince(), other.isSetSince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.since, other.since);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeprecated(), other.isSetDeprecated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeprecated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprecated, other.deprecated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource(), other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExpressionInfo(");
    boolean first = true;

    if (isSetClassName()) {
      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
    }
    if (isSetUsage()) {
      if (!first) sb.append(", ");
      sb.append("usage:");
      if (this.usage == null) {
        sb.append("null");
      } else {
        sb.append(this.usage);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetExtended()) {
      if (!first) sb.append(", ");
      sb.append("extended:");
      if (this.extended == null) {
        sb.append("null");
      } else {
        sb.append(this.extended);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetArguments()) {
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
    }
    if (isSetExamples()) {
      if (!first) sb.append(", ");
      sb.append("examples:");
      if (this.examples == null) {
        sb.append("null");
      } else {
        sb.append(this.examples);
      }
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetSince()) {
      if (!first) sb.append(", ");
      sb.append("since:");
      if (this.since == null) {
        sb.append("null");
      } else {
        sb.append(this.since);
      }
      first = false;
    }
    if (isSetDeprecated()) {
      if (!first) sb.append(", ");
      sb.append("deprecated:");
      if (this.deprecated == null) {
        sb.append("null");
      } else {
        sb.append(this.deprecated);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExpressionInfoStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExpressionInfoStandardScheme getScheme() {
      return new TExpressionInfoStandardScheme();
    }
  }

  private static class TExpressionInfoStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TExpressionInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExpressionInfo struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usage = iprot.readString();
              struct.setUsageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTENDED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extended = iprot.readString();
              struct.setExtendedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARGUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arguments = iprot.readString();
              struct.setArgumentsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examples = iprot.readString();
              struct.setExamplesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.since = iprot.readString();
              struct.setSinceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEPRECATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deprecated = iprot.readString();
              struct.setDeprecatedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExpressionInfo struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.className != null) {
        if (struct.isSetClassName()) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
      }
      if (struct.usage != null) {
        if (struct.isSetUsage()) {
          oprot.writeFieldBegin(USAGE_FIELD_DESC);
          oprot.writeString(struct.usage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extended != null) {
        if (struct.isSetExtended()) {
          oprot.writeFieldBegin(EXTENDED_FIELD_DESC);
          oprot.writeString(struct.extended);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.arguments != null) {
        if (struct.isSetArguments()) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          oprot.writeString(struct.arguments);
          oprot.writeFieldEnd();
        }
      }
      if (struct.examples != null) {
        if (struct.isSetExamples()) {
          oprot.writeFieldBegin(EXAMPLES_FIELD_DESC);
          oprot.writeString(struct.examples);
          oprot.writeFieldEnd();
        }
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.since != null) {
        if (struct.isSetSince()) {
          oprot.writeFieldBegin(SINCE_FIELD_DESC);
          oprot.writeString(struct.since);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deprecated != null) {
        if (struct.isSetDeprecated()) {
          oprot.writeFieldBegin(DEPRECATED_FIELD_DESC);
          oprot.writeString(struct.deprecated);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TExpressionInfoTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExpressionInfoTupleScheme getScheme() {
      return new TExpressionInfoTupleScheme();
    }
  }

  private static class TExpressionInfoTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TExpressionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExpressionInfo struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClassName()) {
        optionals.set(0);
      }
      if (struct.isSetUsage()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetExtended()) {
        optionals.set(3);
      }
      if (struct.isSetDb()) {
        optionals.set(4);
      }
      if (struct.isSetArguments()) {
        optionals.set(5);
      }
      if (struct.isSetExamples()) {
        optionals.set(6);
      }
      if (struct.isSetNote()) {
        optionals.set(7);
      }
      if (struct.isSetGroup()) {
        optionals.set(8);
      }
      if (struct.isSetSince()) {
        optionals.set(9);
      }
      if (struct.isSetDeprecated()) {
        optionals.set(10);
      }
      if (struct.isSetSource()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetClassName()) {
        oprot.writeString(struct.className);
      }
      if (struct.isSetUsage()) {
        oprot.writeString(struct.usage);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetExtended()) {
        oprot.writeString(struct.extended);
      }
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetArguments()) {
        oprot.writeString(struct.arguments);
      }
      if (struct.isSetExamples()) {
        oprot.writeString(struct.examples);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetSince()) {
        oprot.writeString(struct.since);
      }
      if (struct.isSetDeprecated()) {
        oprot.writeString(struct.deprecated);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExpressionInfo struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.className = iprot.readString();
        struct.setClassNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.usage = iprot.readString();
        struct.setUsageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extended = iprot.readString();
        struct.setExtendedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(5)) {
        struct.arguments = iprot.readString();
        struct.setArgumentsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.examples = iprot.readString();
        struct.setExamplesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(9)) {
        struct.since = iprot.readString();
        struct.setSinceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.deprecated = iprot.readString();
        struct.setDeprecatedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
