/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.databricks.jdbc.client.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-03-01")
public class TDBSqlSessionConf
    implements org.apache.thrift.TBase<TDBSqlSessionConf, TDBSqlSessionConf._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TDBSqlSessionConf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TDBSqlSessionConf");

  private static final org.apache.thrift.protocol.TField CONFS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "confs", org.apache.thrift.protocol.TType.MAP, (short) 1);
  private static final org.apache.thrift.protocol.TField TEMP_VIEWS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "tempViews", org.apache.thrift.protocol.TType.LIST, (short) 2);
  private static final org.apache.thrift.protocol.TField CURRENT_DATABASE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "currentDatabase", org.apache.thrift.protocol.TType.STRING, (short) 3);
  private static final org.apache.thrift.protocol.TField CURRENT_CATALOG_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "currentCatalog", org.apache.thrift.protocol.TType.STRING, (short) 4);
  private static final org.apache.thrift.protocol.TField SESSION_CAPABILITIES_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionCapabilities", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
  private static final org.apache.thrift.protocol.TField EXPRESSIONS_INFOS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "expressionsInfos", org.apache.thrift.protocol.TType.LIST, (short) 6);
  private static final org.apache.thrift.protocol.TField INTERNAL_CONFS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "internalConfs", org.apache.thrift.protocol.TType.MAP, (short) 7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TDBSqlSessionConfStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TDBSqlSessionConfTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      confs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlTempView>
      tempViews; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String currentDatabase; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String currentCatalog; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlSessionCapabilities
      sessionCapabilities; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TExpressionInfo>
      expressionsInfos; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, TDBSqlConfValue>
      internalConfs; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFS((short) 1, "confs"),
    TEMP_VIEWS((short) 2, "tempViews"),
    CURRENT_DATABASE((short) 3, "currentDatabase"),
    CURRENT_CATALOG((short) 4, "currentCatalog"),
    SESSION_CAPABILITIES((short) 5, "sessionCapabilities"),
    EXPRESSIONS_INFOS((short) 6, "expressionsInfos"),
    INTERNAL_CONFS((short) 7, "internalConfs");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // CONFS
          return CONFS;
        case 2: // TEMP_VIEWS
          return TEMP_VIEWS;
        case 3: // CURRENT_DATABASE
          return CURRENT_DATABASE;
        case 4: // CURRENT_CATALOG
          return CURRENT_CATALOG;
        case 5: // SESSION_CAPABILITIES
          return SESSION_CAPABILITIES;
        case 6: // EXPRESSIONS_INFOS
          return EXPRESSIONS_INFOS;
        case 7: // INTERNAL_CONFS
          return INTERNAL_CONFS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {
    _Fields.CONFS,
    _Fields.TEMP_VIEWS,
    _Fields.CURRENT_DATABASE,
    _Fields.CURRENT_CATALOG,
    _Fields.SESSION_CAPABILITIES,
    _Fields.EXPRESSIONS_INFOS,
    _Fields.INTERNAL_CONFS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.CONFS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "confs",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(
        _Fields.TEMP_VIEWS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "tempViews",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TDBSqlTempView.class))));
    tmpMap.put(
        _Fields.CURRENT_DATABASE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "currentDatabase",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.CURRENT_CATALOG,
        new org.apache.thrift.meta_data.FieldMetaData(
            "currentCatalog",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.SESSION_CAPABILITIES,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionCapabilities",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlSessionCapabilities.class)));
    tmpMap.put(
        _Fields.EXPRESSIONS_INFOS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "expressionsInfos",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TExpressionInfo.class))));
    tmpMap.put(
        _Fields.INTERNAL_CONFS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "internalConfs",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TDBSqlConfValue.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TDBSqlSessionConf.class, metaDataMap);
  }

  public TDBSqlSessionConf() {}

  /** Performs a deep copy on <i>other</i>. */
  public TDBSqlSessionConf(TDBSqlSessionConf other) {
    if (other.isSetConfs()) {
      java.util.Map<java.lang.String, java.lang.String> __this__confs =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.confs);
      this.confs = __this__confs;
    }
    if (other.isSetTempViews()) {
      java.util.List<TDBSqlTempView> __this__tempViews =
          new java.util.ArrayList<TDBSqlTempView>(other.tempViews.size());
      for (TDBSqlTempView other_element : other.tempViews) {
        __this__tempViews.add(new TDBSqlTempView(other_element));
      }
      this.tempViews = __this__tempViews;
    }
    if (other.isSetCurrentDatabase()) {
      this.currentDatabase = other.currentDatabase;
    }
    if (other.isSetCurrentCatalog()) {
      this.currentCatalog = other.currentCatalog;
    }
    if (other.isSetSessionCapabilities()) {
      this.sessionCapabilities = new TDBSqlSessionCapabilities(other.sessionCapabilities);
    }
    if (other.isSetExpressionsInfos()) {
      java.util.List<TExpressionInfo> __this__expressionsInfos =
          new java.util.ArrayList<TExpressionInfo>(other.expressionsInfos.size());
      for (TExpressionInfo other_element : other.expressionsInfos) {
        __this__expressionsInfos.add(new TExpressionInfo(other_element));
      }
      this.expressionsInfos = __this__expressionsInfos;
    }
    if (other.isSetInternalConfs()) {
      java.util.Map<java.lang.String, TDBSqlConfValue> __this__internalConfs =
          new java.util.HashMap<java.lang.String, TDBSqlConfValue>(other.internalConfs.size());
      for (java.util.Map.Entry<java.lang.String, TDBSqlConfValue> other_element :
          other.internalConfs.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TDBSqlConfValue other_element_value = other_element.getValue();

        java.lang.String __this__internalConfs_copy_key = other_element_key;

        TDBSqlConfValue __this__internalConfs_copy_value = new TDBSqlConfValue(other_element_value);

        __this__internalConfs.put(__this__internalConfs_copy_key, __this__internalConfs_copy_value);
      }
      this.internalConfs = __this__internalConfs;
    }
  }

  @Override
  public TDBSqlSessionConf deepCopy() {
    return new TDBSqlSessionConf(this);
  }

  @Override
  public void clear() {
    this.confs = null;
    this.tempViews = null;
    this.currentDatabase = null;
    this.currentCatalog = null;
    this.sessionCapabilities = null;
    this.expressionsInfos = null;
    this.internalConfs = null;
  }

  public int getConfsSize() {
    return (this.confs == null) ? 0 : this.confs.size();
  }

  public void putToConfs(java.lang.String key, java.lang.String val) {
    if (this.confs == null) {
      this.confs = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.confs.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getConfs() {
    return this.confs;
  }

  public TDBSqlSessionConf setConfs(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> confs) {
    this.confs = confs;
    return this;
  }

  public void unsetConfs() {
    this.confs = null;
  }

  /** Returns true if field confs is set (has been assigned a value) and false otherwise */
  public boolean isSetConfs() {
    return this.confs != null;
  }

  public void setConfsIsSet(boolean value) {
    if (!value) {
      this.confs = null;
    }
  }

  public int getTempViewsSize() {
    return (this.tempViews == null) ? 0 : this.tempViews.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TDBSqlTempView> getTempViewsIterator() {
    return (this.tempViews == null) ? null : this.tempViews.iterator();
  }

  public void addToTempViews(TDBSqlTempView elem) {
    if (this.tempViews == null) {
      this.tempViews = new java.util.ArrayList<TDBSqlTempView>();
    }
    this.tempViews.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TDBSqlTempView> getTempViews() {
    return this.tempViews;
  }

  public TDBSqlSessionConf setTempViews(
      @org.apache.thrift.annotation.Nullable java.util.List<TDBSqlTempView> tempViews) {
    this.tempViews = tempViews;
    return this;
  }

  public void unsetTempViews() {
    this.tempViews = null;
  }

  /** Returns true if field tempViews is set (has been assigned a value) and false otherwise */
  public boolean isSetTempViews() {
    return this.tempViews != null;
  }

  public void setTempViewsIsSet(boolean value) {
    if (!value) {
      this.tempViews = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrentDatabase() {
    return this.currentDatabase;
  }

  public TDBSqlSessionConf setCurrentDatabase(
      @org.apache.thrift.annotation.Nullable java.lang.String currentDatabase) {
    this.currentDatabase = currentDatabase;
    return this;
  }

  public void unsetCurrentDatabase() {
    this.currentDatabase = null;
  }

  /**
   * Returns true if field currentDatabase is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCurrentDatabase() {
    return this.currentDatabase != null;
  }

  public void setCurrentDatabaseIsSet(boolean value) {
    if (!value) {
      this.currentDatabase = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrentCatalog() {
    return this.currentCatalog;
  }

  public TDBSqlSessionConf setCurrentCatalog(
      @org.apache.thrift.annotation.Nullable java.lang.String currentCatalog) {
    this.currentCatalog = currentCatalog;
    return this;
  }

  public void unsetCurrentCatalog() {
    this.currentCatalog = null;
  }

  /** Returns true if field currentCatalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentCatalog() {
    return this.currentCatalog != null;
  }

  public void setCurrentCatalogIsSet(boolean value) {
    if (!value) {
      this.currentCatalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlSessionCapabilities getSessionCapabilities() {
    return this.sessionCapabilities;
  }

  public TDBSqlSessionConf setSessionCapabilities(
      @org.apache.thrift.annotation.Nullable TDBSqlSessionCapabilities sessionCapabilities) {
    this.sessionCapabilities = sessionCapabilities;
    return this;
  }

  public void unsetSessionCapabilities() {
    this.sessionCapabilities = null;
  }

  /**
   * Returns true if field sessionCapabilities is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetSessionCapabilities() {
    return this.sessionCapabilities != null;
  }

  public void setSessionCapabilitiesIsSet(boolean value) {
    if (!value) {
      this.sessionCapabilities = null;
    }
  }

  public int getExpressionsInfosSize() {
    return (this.expressionsInfos == null) ? 0 : this.expressionsInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TExpressionInfo> getExpressionsInfosIterator() {
    return (this.expressionsInfos == null) ? null : this.expressionsInfos.iterator();
  }

  public void addToExpressionsInfos(TExpressionInfo elem) {
    if (this.expressionsInfos == null) {
      this.expressionsInfos = new java.util.ArrayList<TExpressionInfo>();
    }
    this.expressionsInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TExpressionInfo> getExpressionsInfos() {
    return this.expressionsInfos;
  }

  public TDBSqlSessionConf setExpressionsInfos(
      @org.apache.thrift.annotation.Nullable java.util.List<TExpressionInfo> expressionsInfos) {
    this.expressionsInfos = expressionsInfos;
    return this;
  }

  public void unsetExpressionsInfos() {
    this.expressionsInfos = null;
  }

  /**
   * Returns true if field expressionsInfos is set (has been assigned a value) and false otherwise
   */
  public boolean isSetExpressionsInfos() {
    return this.expressionsInfos != null;
  }

  public void setExpressionsInfosIsSet(boolean value) {
    if (!value) {
      this.expressionsInfos = null;
    }
  }

  public int getInternalConfsSize() {
    return (this.internalConfs == null) ? 0 : this.internalConfs.size();
  }

  public void putToInternalConfs(java.lang.String key, TDBSqlConfValue val) {
    if (this.internalConfs == null) {
      this.internalConfs = new java.util.HashMap<java.lang.String, TDBSqlConfValue>();
    }
    this.internalConfs.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, TDBSqlConfValue> getInternalConfs() {
    return this.internalConfs;
  }

  public TDBSqlSessionConf setInternalConfs(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, TDBSqlConfValue> internalConfs) {
    this.internalConfs = internalConfs;
    return this;
  }

  public void unsetInternalConfs() {
    this.internalConfs = null;
  }

  /** Returns true if field internalConfs is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalConfs() {
    return this.internalConfs != null;
  }

  public void setInternalConfsIsSet(boolean value) {
    if (!value) {
      this.internalConfs = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case CONFS:
        if (value == null) {
          unsetConfs();
        } else {
          setConfs((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;

      case TEMP_VIEWS:
        if (value == null) {
          unsetTempViews();
        } else {
          setTempViews((java.util.List<TDBSqlTempView>) value);
        }
        break;

      case CURRENT_DATABASE:
        if (value == null) {
          unsetCurrentDatabase();
        } else {
          setCurrentDatabase((java.lang.String) value);
        }
        break;

      case CURRENT_CATALOG:
        if (value == null) {
          unsetCurrentCatalog();
        } else {
          setCurrentCatalog((java.lang.String) value);
        }
        break;

      case SESSION_CAPABILITIES:
        if (value == null) {
          unsetSessionCapabilities();
        } else {
          setSessionCapabilities((TDBSqlSessionCapabilities) value);
        }
        break;

      case EXPRESSIONS_INFOS:
        if (value == null) {
          unsetExpressionsInfos();
        } else {
          setExpressionsInfos((java.util.List<TExpressionInfo>) value);
        }
        break;

      case INTERNAL_CONFS:
        if (value == null) {
          unsetInternalConfs();
        } else {
          setInternalConfs((java.util.Map<java.lang.String, TDBSqlConfValue>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case CONFS:
        return getConfs();

      case TEMP_VIEWS:
        return getTempViews();

      case CURRENT_DATABASE:
        return getCurrentDatabase();

      case CURRENT_CATALOG:
        return getCurrentCatalog();

      case SESSION_CAPABILITIES:
        return getSessionCapabilities();

      case EXPRESSIONS_INFOS:
        return getExpressionsInfos();

      case INTERNAL_CONFS:
        return getInternalConfs();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case CONFS:
        return isSetConfs();
      case TEMP_VIEWS:
        return isSetTempViews();
      case CURRENT_DATABASE:
        return isSetCurrentDatabase();
      case CURRENT_CATALOG:
        return isSetCurrentCatalog();
      case SESSION_CAPABILITIES:
        return isSetSessionCapabilities();
      case EXPRESSIONS_INFOS:
        return isSetExpressionsInfos();
      case INTERNAL_CONFS:
        return isSetInternalConfs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDBSqlSessionConf) return this.equals((TDBSqlSessionConf) that);
    return false;
  }

  public boolean equals(TDBSqlSessionConf that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_confs = true && this.isSetConfs();
    boolean that_present_confs = true && that.isSetConfs();
    if (this_present_confs || that_present_confs) {
      if (!(this_present_confs && that_present_confs)) return false;
      if (!this.confs.equals(that.confs)) return false;
    }

    boolean this_present_tempViews = true && this.isSetTempViews();
    boolean that_present_tempViews = true && that.isSetTempViews();
    if (this_present_tempViews || that_present_tempViews) {
      if (!(this_present_tempViews && that_present_tempViews)) return false;
      if (!this.tempViews.equals(that.tempViews)) return false;
    }

    boolean this_present_currentDatabase = true && this.isSetCurrentDatabase();
    boolean that_present_currentDatabase = true && that.isSetCurrentDatabase();
    if (this_present_currentDatabase || that_present_currentDatabase) {
      if (!(this_present_currentDatabase && that_present_currentDatabase)) return false;
      if (!this.currentDatabase.equals(that.currentDatabase)) return false;
    }

    boolean this_present_currentCatalog = true && this.isSetCurrentCatalog();
    boolean that_present_currentCatalog = true && that.isSetCurrentCatalog();
    if (this_present_currentCatalog || that_present_currentCatalog) {
      if (!(this_present_currentCatalog && that_present_currentCatalog)) return false;
      if (!this.currentCatalog.equals(that.currentCatalog)) return false;
    }

    boolean this_present_sessionCapabilities = true && this.isSetSessionCapabilities();
    boolean that_present_sessionCapabilities = true && that.isSetSessionCapabilities();
    if (this_present_sessionCapabilities || that_present_sessionCapabilities) {
      if (!(this_present_sessionCapabilities && that_present_sessionCapabilities)) return false;
      if (!this.sessionCapabilities.equals(that.sessionCapabilities)) return false;
    }

    boolean this_present_expressionsInfos = true && this.isSetExpressionsInfos();
    boolean that_present_expressionsInfos = true && that.isSetExpressionsInfos();
    if (this_present_expressionsInfos || that_present_expressionsInfos) {
      if (!(this_present_expressionsInfos && that_present_expressionsInfos)) return false;
      if (!this.expressionsInfos.equals(that.expressionsInfos)) return false;
    }

    boolean this_present_internalConfs = true && this.isSetInternalConfs();
    boolean that_present_internalConfs = true && that.isSetInternalConfs();
    if (this_present_internalConfs || that_present_internalConfs) {
      if (!(this_present_internalConfs && that_present_internalConfs)) return false;
      if (!this.internalConfs.equals(that.internalConfs)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConfs()) ? 131071 : 524287);
    if (isSetConfs()) hashCode = hashCode * 8191 + confs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTempViews()) ? 131071 : 524287);
    if (isSetTempViews()) hashCode = hashCode * 8191 + tempViews.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrentDatabase()) ? 131071 : 524287);
    if (isSetCurrentDatabase()) hashCode = hashCode * 8191 + currentDatabase.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrentCatalog()) ? 131071 : 524287);
    if (isSetCurrentCatalog()) hashCode = hashCode * 8191 + currentCatalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCapabilities()) ? 131071 : 524287);
    if (isSetSessionCapabilities()) hashCode = hashCode * 8191 + sessionCapabilities.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpressionsInfos()) ? 131071 : 524287);
    if (isSetExpressionsInfos()) hashCode = hashCode * 8191 + expressionsInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetInternalConfs()) ? 131071 : 524287);
    if (isSetInternalConfs()) hashCode = hashCode * 8191 + internalConfs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDBSqlSessionConf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetConfs(), other.isSetConfs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confs, other.confs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTempViews(), other.isSetTempViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTempViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempViews, other.tempViews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetCurrentDatabase(), other.isSetCurrentDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentDatabase()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.currentDatabase, other.currentDatabase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrentCatalog(), other.isSetCurrentCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentCatalog()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.currentCatalog, other.currentCatalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetSessionCapabilities(), other.isSetSessionCapabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCapabilities()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.sessionCapabilities, other.sessionCapabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetExpressionsInfos(), other.isSetExpressionsInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressionsInfos()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.expressionsInfos, other.expressionsInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInternalConfs(), other.isSetInternalConfs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalConfs()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.internalConfs, other.internalConfs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDBSqlSessionConf(");
    boolean first = true;

    if (isSetConfs()) {
      sb.append("confs:");
      if (this.confs == null) {
        sb.append("null");
      } else {
        sb.append(this.confs);
      }
      first = false;
    }
    if (isSetTempViews()) {
      if (!first) sb.append(", ");
      sb.append("tempViews:");
      if (this.tempViews == null) {
        sb.append("null");
      } else {
        sb.append(this.tempViews);
      }
      first = false;
    }
    if (isSetCurrentDatabase()) {
      if (!first) sb.append(", ");
      sb.append("currentDatabase:");
      if (this.currentDatabase == null) {
        sb.append("null");
      } else {
        sb.append(this.currentDatabase);
      }
      first = false;
    }
    if (isSetCurrentCatalog()) {
      if (!first) sb.append(", ");
      sb.append("currentCatalog:");
      if (this.currentCatalog == null) {
        sb.append("null");
      } else {
        sb.append(this.currentCatalog);
      }
      first = false;
    }
    if (isSetSessionCapabilities()) {
      if (!first) sb.append(", ");
      sb.append("sessionCapabilities:");
      if (this.sessionCapabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionCapabilities);
      }
      first = false;
    }
    if (isSetExpressionsInfos()) {
      if (!first) sb.append(", ");
      sb.append("expressionsInfos:");
      if (this.expressionsInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.expressionsInfos);
      }
      first = false;
    }
    if (isSetInternalConfs()) {
      if (!first) sb.append(", ");
      sb.append("internalConfs:");
      if (this.internalConfs == null) {
        sb.append("null");
      } else {
        sb.append(this.internalConfs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sessionCapabilities != null) {
      sessionCapabilities.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDBSqlSessionConfStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlSessionConfStandardScheme getScheme() {
      return new TDBSqlSessionConfStandardScheme();
    }
  }

  private static class TDBSqlSessionConfStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TDBSqlSessionConf> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDBSqlSessionConf struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map188 = iprot.readMapBegin();
                struct.confs =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map188.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key189;
                @org.apache.thrift.annotation.Nullable java.lang.String _val190;
                for (int _i191 = 0; _i191 < _map188.size; ++_i191) {
                  _key189 = iprot.readString();
                  _val190 = iprot.readString();
                  struct.confs.put(_key189, _val190);
                }
                iprot.readMapEnd();
              }
              struct.setConfsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMP_VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                struct.tempViews = new java.util.ArrayList<TDBSqlTempView>(_list192.size);
                @org.apache.thrift.annotation.Nullable TDBSqlTempView _elem193;
                for (int _i194 = 0; _i194 < _list192.size; ++_i194) {
                  _elem193 = new TDBSqlTempView();
                  _elem193.read(iprot);
                  struct.tempViews.add(_elem193);
                }
                iprot.readListEnd();
              }
              struct.setTempViewsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentDatabase = iprot.readString();
              struct.setCurrentDatabaseIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENT_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentCatalog = iprot.readString();
              struct.setCurrentCatalogIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SESSION_CAPABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionCapabilities = new TDBSqlSessionCapabilities();
              struct.sessionCapabilities.read(iprot);
              struct.setSessionCapabilitiesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPRESSIONS_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                struct.expressionsInfos = new java.util.ArrayList<TExpressionInfo>(_list195.size);
                @org.apache.thrift.annotation.Nullable TExpressionInfo _elem196;
                for (int _i197 = 0; _i197 < _list195.size; ++_i197) {
                  _elem196 = new TExpressionInfo();
                  _elem196.read(iprot);
                  struct.expressionsInfos.add(_elem196);
                }
                iprot.readListEnd();
              }
              struct.setExpressionsInfosIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTERNAL_CONFS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                struct.internalConfs =
                    new java.util.HashMap<java.lang.String, TDBSqlConfValue>(2 * _map198.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key199;
                @org.apache.thrift.annotation.Nullable TDBSqlConfValue _val200;
                for (int _i201 = 0; _i201 < _map198.size; ++_i201) {
                  _key199 = iprot.readString();
                  _val200 = new TDBSqlConfValue();
                  _val200.read(iprot);
                  struct.internalConfs.put(_key199, _val200);
                }
                iprot.readMapEnd();
              }
              struct.setInternalConfsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDBSqlSessionConf struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.confs != null) {
        if (struct.isSetConfs()) {
          oprot.writeFieldBegin(CONFS_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.confs.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter202 :
                struct.confs.entrySet()) {
              oprot.writeString(_iter202.getKey());
              oprot.writeString(_iter202.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tempViews != null) {
        if (struct.isSetTempViews()) {
          oprot.writeFieldBegin(TEMP_VIEWS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.tempViews.size()));
            for (TDBSqlTempView _iter203 : struct.tempViews) {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentDatabase != null) {
        if (struct.isSetCurrentDatabase()) {
          oprot.writeFieldBegin(CURRENT_DATABASE_FIELD_DESC);
          oprot.writeString(struct.currentDatabase);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentCatalog != null) {
        if (struct.isSetCurrentCatalog()) {
          oprot.writeFieldBegin(CURRENT_CATALOG_FIELD_DESC);
          oprot.writeString(struct.currentCatalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionCapabilities != null) {
        if (struct.isSetSessionCapabilities()) {
          oprot.writeFieldBegin(SESSION_CAPABILITIES_FIELD_DESC);
          struct.sessionCapabilities.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.expressionsInfos != null) {
        if (struct.isSetExpressionsInfos()) {
          oprot.writeFieldBegin(EXPRESSIONS_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.expressionsInfos.size()));
            for (TExpressionInfo _iter204 : struct.expressionsInfos) {
              _iter204.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.internalConfs != null) {
        if (struct.isSetInternalConfs()) {
          oprot.writeFieldBegin(INTERNAL_CONFS_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRUCT,
                    struct.internalConfs.size()));
            for (java.util.Map.Entry<java.lang.String, TDBSqlConfValue> _iter205 :
                struct.internalConfs.entrySet()) {
              oprot.writeString(_iter205.getKey());
              _iter205.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TDBSqlSessionConfTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDBSqlSessionConfTupleScheme getScheme() {
      return new TDBSqlSessionConfTupleScheme();
    }
  }

  private static class TDBSqlSessionConfTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TDBSqlSessionConf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDBSqlSessionConf struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConfs()) {
        optionals.set(0);
      }
      if (struct.isSetTempViews()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentDatabase()) {
        optionals.set(2);
      }
      if (struct.isSetCurrentCatalog()) {
        optionals.set(3);
      }
      if (struct.isSetSessionCapabilities()) {
        optionals.set(4);
      }
      if (struct.isSetExpressionsInfos()) {
        optionals.set(5);
      }
      if (struct.isSetInternalConfs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetConfs()) {
        {
          oprot.writeI32(struct.confs.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter206 :
              struct.confs.entrySet()) {
            oprot.writeString(_iter206.getKey());
            oprot.writeString(_iter206.getValue());
          }
        }
      }
      if (struct.isSetTempViews()) {
        {
          oprot.writeI32(struct.tempViews.size());
          for (TDBSqlTempView _iter207 : struct.tempViews) {
            _iter207.write(oprot);
          }
        }
      }
      if (struct.isSetCurrentDatabase()) {
        oprot.writeString(struct.currentDatabase);
      }
      if (struct.isSetCurrentCatalog()) {
        oprot.writeString(struct.currentCatalog);
      }
      if (struct.isSetSessionCapabilities()) {
        struct.sessionCapabilities.write(oprot);
      }
      if (struct.isSetExpressionsInfos()) {
        {
          oprot.writeI32(struct.expressionsInfos.size());
          for (TExpressionInfo _iter208 : struct.expressionsInfos) {
            _iter208.write(oprot);
          }
        }
      }
      if (struct.isSetInternalConfs()) {
        {
          oprot.writeI32(struct.internalConfs.size());
          for (java.util.Map.Entry<java.lang.String, TDBSqlConfValue> _iter209 :
              struct.internalConfs.entrySet()) {
            oprot.writeString(_iter209.getKey());
            _iter209.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDBSqlSessionConf struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map210 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.confs =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map210.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key211;
          @org.apache.thrift.annotation.Nullable java.lang.String _val212;
          for (int _i213 = 0; _i213 < _map210.size; ++_i213) {
            _key211 = iprot.readString();
            _val212 = iprot.readString();
            struct.confs.put(_key211, _val212);
          }
        }
        struct.setConfsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list214 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tempViews = new java.util.ArrayList<TDBSqlTempView>(_list214.size);
          @org.apache.thrift.annotation.Nullable TDBSqlTempView _elem215;
          for (int _i216 = 0; _i216 < _list214.size; ++_i216) {
            _elem215 = new TDBSqlTempView();
            _elem215.read(iprot);
            struct.tempViews.add(_elem215);
          }
        }
        struct.setTempViewsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentDatabase = iprot.readString();
        struct.setCurrentDatabaseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currentCatalog = iprot.readString();
        struct.setCurrentCatalogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sessionCapabilities = new TDBSqlSessionCapabilities();
        struct.sessionCapabilities.read(iprot);
        struct.setSessionCapabilitiesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list217 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.expressionsInfos = new java.util.ArrayList<TExpressionInfo>(_list217.size);
          @org.apache.thrift.annotation.Nullable TExpressionInfo _elem218;
          for (int _i219 = 0; _i219 < _list217.size; ++_i219) {
            _elem218 = new TExpressionInfo();
            _elem218.read(iprot);
            struct.expressionsInfos.add(_elem218);
          }
        }
        struct.setExpressionsInfosIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map220 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
          struct.internalConfs =
              new java.util.HashMap<java.lang.String, TDBSqlConfValue>(2 * _map220.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key221;
          @org.apache.thrift.annotation.Nullable TDBSqlConfValue _val222;
          for (int _i223 = 0; _i223 < _map220.size; ++_i223) {
            _key221 = iprot.readString();
            _val222 = new TDBSqlConfValue();
            _val222.read(iprot);
            struct.internalConfs.put(_key221, _val222);
          }
        }
        struct.setInternalConfsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
