/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.databricks.jdbc.client.impl.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-04-10")
public class TStatementConf implements org.apache.thrift.TBase<TStatementConf, TStatementConf._Fields>, java.io.Serializable, Cloneable, Comparable<TStatementConf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStatementConf");

  private static final org.apache.thrift.protocol.TField SESSIONLESS_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionless", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INITIAL_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("initialNamespace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("client_protocol", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_PROTOCOL_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("client_protocol_i64", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStatementConfStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStatementConfTupleSchemeFactory();

  public boolean sessionless; // optional
  public @org.apache.thrift.annotation.Nullable TNamespace initialNamespace; // optional
  /**
   * 
   * @see TProtocolVersion
   */
  public @org.apache.thrift.annotation.Nullable TProtocolVersion client_protocol; // optional
  public long client_protocol_i64; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSIONLESS((short)1, "sessionless"),
    INITIAL_NAMESPACE((short)2, "initialNamespace"),
    /**
     * 
     * @see TProtocolVersion
     */
    CLIENT_PROTOCOL((short)3, "client_protocol"),
    CLIENT_PROTOCOL_I64((short)4, "client_protocol_i64");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSIONLESS
          return SESSIONLESS;
        case 2: // INITIAL_NAMESPACE
          return INITIAL_NAMESPACE;
        case 3: // CLIENT_PROTOCOL
          return CLIENT_PROTOCOL;
        case 4: // CLIENT_PROTOCOL_I64
          return CLIENT_PROTOCOL_I64;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONLESS_ISSET_ID = 0;
  private static final int __CLIENT_PROTOCOL_I64_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SESSIONLESS,_Fields.INITIAL_NAMESPACE,_Fields.CLIENT_PROTOCOL,_Fields.CLIENT_PROTOCOL_I64};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSIONLESS, new org.apache.thrift.meta_data.FieldMetaData("sessionless", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INITIAL_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("initialNamespace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNamespace.class)));
    tmpMap.put(_Fields.CLIENT_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("client_protocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TProtocolVersion.class)));
    tmpMap.put(_Fields.CLIENT_PROTOCOL_I64, new org.apache.thrift.meta_data.FieldMetaData("client_protocol_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStatementConf.class, metaDataMap);
  }

  public TStatementConf() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStatementConf(TStatementConf other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionless = other.sessionless;
    if (other.isSetInitialNamespace()) {
      this.initialNamespace = new TNamespace(other.initialNamespace);
    }
    if (other.isSetClient_protocol()) {
      this.client_protocol = other.client_protocol;
    }
    this.client_protocol_i64 = other.client_protocol_i64;
  }

  @Override
  public TStatementConf deepCopy() {
    return new TStatementConf(this);
  }

  @Override
  public void clear() {
    setSessionlessIsSet(false);
    this.sessionless = false;
    this.initialNamespace = null;
    this.client_protocol = null;
    setClient_protocol_i64IsSet(false);
    this.client_protocol_i64 = 0;
  }

  public boolean isSessionless() {
    return this.sessionless;
  }

  public TStatementConf setSessionless(boolean sessionless) {
    this.sessionless = sessionless;
    setSessionlessIsSet(true);
    return this;
  }

  public void unsetSessionless() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONLESS_ISSET_ID);
  }

  /** Returns true if field sessionless is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionless() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONLESS_ISSET_ID);
  }

  public void setSessionlessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONLESS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TNamespace getInitialNamespace() {
    return this.initialNamespace;
  }

  public TStatementConf setInitialNamespace(@org.apache.thrift.annotation.Nullable TNamespace initialNamespace) {
    this.initialNamespace = initialNamespace;
    return this;
  }

  public void unsetInitialNamespace() {
    this.initialNamespace = null;
  }

  /** Returns true if field initialNamespace is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialNamespace() {
    return this.initialNamespace != null;
  }

  public void setInitialNamespaceIsSet(boolean value) {
    if (!value) {
      this.initialNamespace = null;
    }
  }

  /**
   * 
   * @see TProtocolVersion
   */
  @org.apache.thrift.annotation.Nullable
  public TProtocolVersion getClient_protocol() {
    return this.client_protocol;
  }

  /**
   * 
   * @see TProtocolVersion
   */
  public TStatementConf setClient_protocol(@org.apache.thrift.annotation.Nullable TProtocolVersion client_protocol) {
    this.client_protocol = client_protocol;
    return this;
  }

  public void unsetClient_protocol() {
    this.client_protocol = null;
  }

  /** Returns true if field client_protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_protocol() {
    return this.client_protocol != null;
  }

  public void setClient_protocolIsSet(boolean value) {
    if (!value) {
      this.client_protocol = null;
    }
  }

  public long getClient_protocol_i64() {
    return this.client_protocol_i64;
  }

  public TStatementConf setClient_protocol_i64(long client_protocol_i64) {
    this.client_protocol_i64 = client_protocol_i64;
    setClient_protocol_i64IsSet(true);
    return this;
  }

  public void unsetClient_protocol_i64() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID);
  }

  /** Returns true if field client_protocol_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_protocol_i64() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID);
  }

  public void setClient_protocol_i64IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENT_PROTOCOL_I64_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSIONLESS:
      if (value == null) {
        unsetSessionless();
      } else {
        setSessionless((java.lang.Boolean)value);
      }
      break;

    case INITIAL_NAMESPACE:
      if (value == null) {
        unsetInitialNamespace();
      } else {
        setInitialNamespace((TNamespace)value);
      }
      break;

    case CLIENT_PROTOCOL:
      if (value == null) {
        unsetClient_protocol();
      } else {
        setClient_protocol((TProtocolVersion)value);
      }
      break;

    case CLIENT_PROTOCOL_I64:
      if (value == null) {
        unsetClient_protocol_i64();
      } else {
        setClient_protocol_i64((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSIONLESS:
      return isSessionless();

    case INITIAL_NAMESPACE:
      return getInitialNamespace();

    case CLIENT_PROTOCOL:
      return getClient_protocol();

    case CLIENT_PROTOCOL_I64:
      return getClient_protocol_i64();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSIONLESS:
      return isSetSessionless();
    case INITIAL_NAMESPACE:
      return isSetInitialNamespace();
    case CLIENT_PROTOCOL:
      return isSetClient_protocol();
    case CLIENT_PROTOCOL_I64:
      return isSetClient_protocol_i64();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStatementConf)
      return this.equals((TStatementConf)that);
    return false;
  }

  public boolean equals(TStatementConf that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionless = true && this.isSetSessionless();
    boolean that_present_sessionless = true && that.isSetSessionless();
    if (this_present_sessionless || that_present_sessionless) {
      if (!(this_present_sessionless && that_present_sessionless))
        return false;
      if (this.sessionless != that.sessionless)
        return false;
    }

    boolean this_present_initialNamespace = true && this.isSetInitialNamespace();
    boolean that_present_initialNamespace = true && that.isSetInitialNamespace();
    if (this_present_initialNamespace || that_present_initialNamespace) {
      if (!(this_present_initialNamespace && that_present_initialNamespace))
        return false;
      if (!this.initialNamespace.equals(that.initialNamespace))
        return false;
    }

    boolean this_present_client_protocol = true && this.isSetClient_protocol();
    boolean that_present_client_protocol = true && that.isSetClient_protocol();
    if (this_present_client_protocol || that_present_client_protocol) {
      if (!(this_present_client_protocol && that_present_client_protocol))
        return false;
      if (!this.client_protocol.equals(that.client_protocol))
        return false;
    }

    boolean this_present_client_protocol_i64 = true && this.isSetClient_protocol_i64();
    boolean that_present_client_protocol_i64 = true && that.isSetClient_protocol_i64();
    if (this_present_client_protocol_i64 || that_present_client_protocol_i64) {
      if (!(this_present_client_protocol_i64 && that_present_client_protocol_i64))
        return false;
      if (this.client_protocol_i64 != that.client_protocol_i64)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSessionless()) ? 131071 : 524287);
    if (isSetSessionless())
      hashCode = hashCode * 8191 + ((sessionless) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInitialNamespace()) ? 131071 : 524287);
    if (isSetInitialNamespace())
      hashCode = hashCode * 8191 + initialNamespace.hashCode();

    hashCode = hashCode * 8191 + ((isSetClient_protocol()) ? 131071 : 524287);
    if (isSetClient_protocol())
      hashCode = hashCode * 8191 + client_protocol.getValue();

    hashCode = hashCode * 8191 + ((isSetClient_protocol_i64()) ? 131071 : 524287);
    if (isSetClient_protocol_i64())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(client_protocol_i64);

    return hashCode;
  }

  @Override
  public int compareTo(TStatementConf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionless(), other.isSetSessionless());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionless()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionless, other.sessionless);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInitialNamespace(), other.isSetInitialNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialNamespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialNamespace, other.initialNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClient_protocol(), other.isSetClient_protocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_protocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_protocol, other.client_protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClient_protocol_i64(), other.isSetClient_protocol_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_protocol_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_protocol_i64, other.client_protocol_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStatementConf(");
    boolean first = true;

    if (isSetSessionless()) {
      sb.append("sessionless:");
      sb.append(this.sessionless);
      first = false;
    }
    if (isSetInitialNamespace()) {
      if (!first) sb.append(", ");
      sb.append("initialNamespace:");
      if (this.initialNamespace == null) {
        sb.append("null");
      } else {
        sb.append(this.initialNamespace);
      }
      first = false;
    }
    if (isSetClient_protocol()) {
      if (!first) sb.append(", ");
      sb.append("client_protocol:");
      if (this.client_protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.client_protocol);
      }
      first = false;
    }
    if (isSetClient_protocol_i64()) {
      if (!first) sb.append(", ");
      sb.append("client_protocol_i64:");
      sb.append(this.client_protocol_i64);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (initialNamespace != null) {
      initialNamespace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStatementConfStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStatementConfStandardScheme getScheme() {
      return new TStatementConfStandardScheme();
    }
  }

  private static class TStatementConfStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStatementConf> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStatementConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSIONLESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sessionless = iprot.readBool();
              struct.setSessionlessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INITIAL_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.initialNamespace = new TNamespace();
              struct.initialNamespace.read(iprot);
              struct.setInitialNamespaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.client_protocol = com.databricks.jdbc.client.impl.thrift.generated.TProtocolVersion.findByValue(iprot.readI32());
              struct.setClient_protocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_PROTOCOL_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.client_protocol_i64 = iprot.readI64();
              struct.setClient_protocol_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStatementConf struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSessionless()) {
        oprot.writeFieldBegin(SESSIONLESS_FIELD_DESC);
        oprot.writeBool(struct.sessionless);
        oprot.writeFieldEnd();
      }
      if (struct.initialNamespace != null) {
        if (struct.isSetInitialNamespace()) {
          oprot.writeFieldBegin(INITIAL_NAMESPACE_FIELD_DESC);
          struct.initialNamespace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.client_protocol != null) {
        if (struct.isSetClient_protocol()) {
          oprot.writeFieldBegin(CLIENT_PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.client_protocol.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClient_protocol_i64()) {
        oprot.writeFieldBegin(CLIENT_PROTOCOL_I64_FIELD_DESC);
        oprot.writeI64(struct.client_protocol_i64);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStatementConfTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStatementConfTupleScheme getScheme() {
      return new TStatementConfTupleScheme();
    }
  }

  private static class TStatementConfTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStatementConf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStatementConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSessionless()) {
        optionals.set(0);
      }
      if (struct.isSetInitialNamespace()) {
        optionals.set(1);
      }
      if (struct.isSetClient_protocol()) {
        optionals.set(2);
      }
      if (struct.isSetClient_protocol_i64()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSessionless()) {
        oprot.writeBool(struct.sessionless);
      }
      if (struct.isSetInitialNamespace()) {
        struct.initialNamespace.write(oprot);
      }
      if (struct.isSetClient_protocol()) {
        oprot.writeI32(struct.client_protocol.getValue());
      }
      if (struct.isSetClient_protocol_i64()) {
        oprot.writeI64(struct.client_protocol_i64);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStatementConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sessionless = iprot.readBool();
        struct.setSessionlessIsSet(true);
      }
      if (incoming.get(1)) {
        struct.initialNamespace = new TNamespace();
        struct.initialNamespace.read(iprot);
        struct.setInitialNamespaceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.client_protocol = com.databricks.jdbc.client.impl.thrift.generated.TProtocolVersion.findByValue(iprot.readI32());
        struct.setClient_protocolIsSet(true);
      }
      if (incoming.get(3)) {
        struct.client_protocol_i64 = iprot.readI64();
        struct.setClient_protocol_i64IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

