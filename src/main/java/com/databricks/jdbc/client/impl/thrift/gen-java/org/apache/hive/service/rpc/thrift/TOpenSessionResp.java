/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.hive.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-02-23")
public class TOpenSessionResp
    implements org.apache.thrift.TBase<TOpenSessionResp, TOpenSessionResp._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TOpenSessionResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TOpenSessionResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "status", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField SERVER_PROTOCOL_VERSION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "serverProtocolVersion", org.apache.thrift.protocol.TType.I32, (short) 2);
  private static final org.apache.thrift.protocol.TField SESSION_HANDLE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionHandle", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
  private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "configuration", org.apache.thrift.protocol.TType.MAP, (short) 4);
  private static final org.apache.thrift.protocol.TField INITIAL_NAMESPACE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "initialNamespace", org.apache.thrift.protocol.TType.STRUCT, (short) 1284);
  private static final org.apache.thrift.protocol.TField CAN_USE_MULTIPLE_CATALOGS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "canUseMultipleCatalogs", org.apache.thrift.protocol.TType.BOOL, (short) 1285);
  private static final org.apache.thrift.protocol.TField GET_INFOS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "getInfos", org.apache.thrift.protocol.TType.LIST, (short) 1281);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TOpenSessionRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TOpenSessionRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TStatus status; // required

  /**
   * @see TProtocolVersion
   */
  public @org.apache.thrift.annotation.Nullable TProtocolVersion serverProtocolVersion; // required

  public @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String>
      configuration; // optional
  public @org.apache.thrift.annotation.Nullable TNamespace initialNamespace; // optional
  public boolean canUseMultipleCatalogs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TGetInfoValue> getInfos; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short) 1, "status"),
    /**
     * @see TProtocolVersion
     */
    SERVER_PROTOCOL_VERSION((short) 2, "serverProtocolVersion"),
    SESSION_HANDLE((short) 3, "sessionHandle"),
    CONFIGURATION((short) 4, "configuration"),
    INITIAL_NAMESPACE((short) 1284, "initialNamespace"),
    CAN_USE_MULTIPLE_CATALOGS((short) 1285, "canUseMultipleCatalogs"),
    GET_INFOS((short) 1281, "getInfos");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // SERVER_PROTOCOL_VERSION
          return SERVER_PROTOCOL_VERSION;
        case 3: // SESSION_HANDLE
          return SESSION_HANDLE;
        case 4: // CONFIGURATION
          return CONFIGURATION;
        case 1284: // INITIAL_NAMESPACE
          return INITIAL_NAMESPACE;
        case 1285: // CAN_USE_MULTIPLE_CATALOGS
          return CAN_USE_MULTIPLE_CATALOGS;
        case 1281: // GET_INFOS
          return GET_INFOS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANUSEMULTIPLECATALOGS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.SESSION_HANDLE,
    _Fields.CONFIGURATION,
    _Fields.INITIAL_NAMESPACE,
    _Fields.CAN_USE_MULTIPLE_CATALOGS,
    _Fields.GET_INFOS
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.STATUS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "status",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TStatus.class)));
    tmpMap.put(
        _Fields.SERVER_PROTOCOL_VERSION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "serverProtocolVersion",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.EnumMetaData(
                org.apache.thrift.protocol.TType.ENUM, TProtocolVersion.class)));
    tmpMap.put(
        _Fields.SESSION_HANDLE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionHandle",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSessionHandle.class)));
    tmpMap.put(
        _Fields.CONFIGURATION,
        new org.apache.thrift.meta_data.FieldMetaData(
            "configuration",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(
        _Fields.INITIAL_NAMESPACE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "initialNamespace",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TNamespace.class)));
    tmpMap.put(
        _Fields.CAN_USE_MULTIPLE_CATALOGS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "canUseMultipleCatalogs",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.GET_INFOS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "getInfos",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, TGetInfoValue.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TOpenSessionResp.class, metaDataMap);
  }

  public TOpenSessionResp() {}

  public TOpenSessionResp(TStatus status, TProtocolVersion serverProtocolVersion) {
    this();
    this.status = status;
    this.serverProtocolVersion = serverProtocolVersion;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TOpenSessionResp(TOpenSessionResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new TStatus(other.status);
    }
    if (other.isSetServerProtocolVersion()) {
      this.serverProtocolVersion = other.serverProtocolVersion;
    }
    if (other.isSetSessionHandle()) {
      this.sessionHandle = new TSessionHandle(other.sessionHandle);
    }
    if (other.isSetConfiguration()) {
      java.util.Map<java.lang.String, java.lang.String> __this__configuration =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.configuration);
      this.configuration = __this__configuration;
    }
    if (other.isSetInitialNamespace()) {
      this.initialNamespace = new TNamespace(other.initialNamespace);
    }
    this.canUseMultipleCatalogs = other.canUseMultipleCatalogs;
    if (other.isSetGetInfos()) {
      java.util.List<TGetInfoValue> __this__getInfos =
          new java.util.ArrayList<TGetInfoValue>(other.getInfos.size());
      for (TGetInfoValue other_element : other.getInfos) {
        __this__getInfos.add(new TGetInfoValue(other_element));
      }
      this.getInfos = __this__getInfos;
    }
  }

  @Override
  public TOpenSessionResp deepCopy() {
    return new TOpenSessionResp(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.serverProtocolVersion = null;
    this.sessionHandle = null;
    this.configuration = null;
    this.initialNamespace = null;
    setCanUseMultipleCatalogsIsSet(false);
    this.canUseMultipleCatalogs = false;
    this.getInfos = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TStatus getStatus() {
    return this.status;
  }

  public TOpenSessionResp setStatus(@org.apache.thrift.annotation.Nullable TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * @see TProtocolVersion
   */
  @org.apache.thrift.annotation.Nullable
  public TProtocolVersion getServerProtocolVersion() {
    return this.serverProtocolVersion;
  }

  /**
   * @see TProtocolVersion
   */
  public TOpenSessionResp setServerProtocolVersion(
      @org.apache.thrift.annotation.Nullable TProtocolVersion serverProtocolVersion) {
    this.serverProtocolVersion = serverProtocolVersion;
    return this;
  }

  public void unsetServerProtocolVersion() {
    this.serverProtocolVersion = null;
  }

  /**
   * Returns true if field serverProtocolVersion is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetServerProtocolVersion() {
    return this.serverProtocolVersion != null;
  }

  public void setServerProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.serverProtocolVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSessionHandle getSessionHandle() {
    return this.sessionHandle;
  }

  public TOpenSessionResp setSessionHandle(
      @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle) {
    this.sessionHandle = sessionHandle;
    return this;
  }

  public void unsetSessionHandle() {
    this.sessionHandle = null;
  }

  /** Returns true if field sessionHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionHandle() {
    return this.sessionHandle != null;
  }

  public void setSessionHandleIsSet(boolean value) {
    if (!value) {
      this.sessionHandle = null;
    }
  }

  public int getConfigurationSize() {
    return (this.configuration == null) ? 0 : this.configuration.size();
  }

  public void putToConfiguration(java.lang.String key, java.lang.String val) {
    if (this.configuration == null) {
      this.configuration = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.configuration.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String, java.lang.String> getConfiguration() {
    return this.configuration;
  }

  public TOpenSessionResp setConfiguration(
      @org.apache.thrift.annotation.Nullable
          java.util.Map<java.lang.String, java.lang.String> configuration) {
    this.configuration = configuration;
    return this;
  }

  public void unsetConfiguration() {
    this.configuration = null;
  }

  /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetConfiguration() {
    return this.configuration != null;
  }

  public void setConfigurationIsSet(boolean value) {
    if (!value) {
      this.configuration = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNamespace getInitialNamespace() {
    return this.initialNamespace;
  }

  public TOpenSessionResp setInitialNamespace(
      @org.apache.thrift.annotation.Nullable TNamespace initialNamespace) {
    this.initialNamespace = initialNamespace;
    return this;
  }

  public void unsetInitialNamespace() {
    this.initialNamespace = null;
  }

  /**
   * Returns true if field initialNamespace is set (has been assigned a value) and false otherwise
   */
  public boolean isSetInitialNamespace() {
    return this.initialNamespace != null;
  }

  public void setInitialNamespaceIsSet(boolean value) {
    if (!value) {
      this.initialNamespace = null;
    }
  }

  public boolean isCanUseMultipleCatalogs() {
    return this.canUseMultipleCatalogs;
  }

  public TOpenSessionResp setCanUseMultipleCatalogs(boolean canUseMultipleCatalogs) {
    this.canUseMultipleCatalogs = canUseMultipleCatalogs;
    setCanUseMultipleCatalogsIsSet(true);
    return this;
  }

  public void unsetCanUseMultipleCatalogs() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(
            __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID);
  }

  /**
   * Returns true if field canUseMultipleCatalogs is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetCanUseMultipleCatalogs() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID);
  }

  public void setCanUseMultipleCatalogsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __CANUSEMULTIPLECATALOGS_ISSET_ID, value);
  }

  public int getGetInfosSize() {
    return (this.getInfos == null) ? 0 : this.getInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TGetInfoValue> getGetInfosIterator() {
    return (this.getInfos == null) ? null : this.getInfos.iterator();
  }

  public void addToGetInfos(TGetInfoValue elem) {
    if (this.getInfos == null) {
      this.getInfos = new java.util.ArrayList<TGetInfoValue>();
    }
    this.getInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TGetInfoValue> getGetInfos() {
    return this.getInfos;
  }

  public TOpenSessionResp setGetInfos(
      @org.apache.thrift.annotation.Nullable java.util.List<TGetInfoValue> getInfos) {
    this.getInfos = getInfos;
    return this;
  }

  public void unsetGetInfos() {
    this.getInfos = null;
  }

  /** Returns true if field getInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetGetInfos() {
    return this.getInfos != null;
  }

  public void setGetInfosIsSet(boolean value) {
    if (!value) {
      this.getInfos = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TStatus) value);
        }
        break;

      case SERVER_PROTOCOL_VERSION:
        if (value == null) {
          unsetServerProtocolVersion();
        } else {
          setServerProtocolVersion((TProtocolVersion) value);
        }
        break;

      case SESSION_HANDLE:
        if (value == null) {
          unsetSessionHandle();
        } else {
          setSessionHandle((TSessionHandle) value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;

      case INITIAL_NAMESPACE:
        if (value == null) {
          unsetInitialNamespace();
        } else {
          setInitialNamespace((TNamespace) value);
        }
        break;

      case CAN_USE_MULTIPLE_CATALOGS:
        if (value == null) {
          unsetCanUseMultipleCatalogs();
        } else {
          setCanUseMultipleCatalogs((java.lang.Boolean) value);
        }
        break;

      case GET_INFOS:
        if (value == null) {
          unsetGetInfos();
        } else {
          setGetInfos((java.util.List<TGetInfoValue>) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case STATUS:
        return getStatus();

      case SERVER_PROTOCOL_VERSION:
        return getServerProtocolVersion();

      case SESSION_HANDLE:
        return getSessionHandle();

      case CONFIGURATION:
        return getConfiguration();

      case INITIAL_NAMESPACE:
        return getInitialNamespace();

      case CAN_USE_MULTIPLE_CATALOGS:
        return isCanUseMultipleCatalogs();

      case GET_INFOS:
        return getGetInfos();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case STATUS:
        return isSetStatus();
      case SERVER_PROTOCOL_VERSION:
        return isSetServerProtocolVersion();
      case SESSION_HANDLE:
        return isSetSessionHandle();
      case CONFIGURATION:
        return isSetConfiguration();
      case INITIAL_NAMESPACE:
        return isSetInitialNamespace();
      case CAN_USE_MULTIPLE_CATALOGS:
        return isSetCanUseMultipleCatalogs();
      case GET_INFOS:
        return isSetGetInfos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOpenSessionResp) return this.equals((TOpenSessionResp) that);
    return false;
  }

  public boolean equals(TOpenSessionResp that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status)) return false;
      if (!this.status.equals(that.status)) return false;
    }

    boolean this_present_serverProtocolVersion = true && this.isSetServerProtocolVersion();
    boolean that_present_serverProtocolVersion = true && that.isSetServerProtocolVersion();
    if (this_present_serverProtocolVersion || that_present_serverProtocolVersion) {
      if (!(this_present_serverProtocolVersion && that_present_serverProtocolVersion)) return false;
      if (!this.serverProtocolVersion.equals(that.serverProtocolVersion)) return false;
    }

    boolean this_present_sessionHandle = true && this.isSetSessionHandle();
    boolean that_present_sessionHandle = true && that.isSetSessionHandle();
    if (this_present_sessionHandle || that_present_sessionHandle) {
      if (!(this_present_sessionHandle && that_present_sessionHandle)) return false;
      if (!this.sessionHandle.equals(that.sessionHandle)) return false;
    }

    boolean this_present_configuration = true && this.isSetConfiguration();
    boolean that_present_configuration = true && that.isSetConfiguration();
    if (this_present_configuration || that_present_configuration) {
      if (!(this_present_configuration && that_present_configuration)) return false;
      if (!this.configuration.equals(that.configuration)) return false;
    }

    boolean this_present_initialNamespace = true && this.isSetInitialNamespace();
    boolean that_present_initialNamespace = true && that.isSetInitialNamespace();
    if (this_present_initialNamespace || that_present_initialNamespace) {
      if (!(this_present_initialNamespace && that_present_initialNamespace)) return false;
      if (!this.initialNamespace.equals(that.initialNamespace)) return false;
    }

    boolean this_present_canUseMultipleCatalogs = true && this.isSetCanUseMultipleCatalogs();
    boolean that_present_canUseMultipleCatalogs = true && that.isSetCanUseMultipleCatalogs();
    if (this_present_canUseMultipleCatalogs || that_present_canUseMultipleCatalogs) {
      if (!(this_present_canUseMultipleCatalogs && that_present_canUseMultipleCatalogs))
        return false;
      if (this.canUseMultipleCatalogs != that.canUseMultipleCatalogs) return false;
    }

    boolean this_present_getInfos = true && this.isSetGetInfos();
    boolean that_present_getInfos = true && that.isSetGetInfos();
    if (this_present_getInfos || that_present_getInfos) {
      if (!(this_present_getInfos && that_present_getInfos)) return false;
      if (!this.getInfos.equals(that.getInfos)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus()) hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerProtocolVersion()) ? 131071 : 524287);
    if (isSetServerProtocolVersion()) hashCode = hashCode * 8191 + serverProtocolVersion.getValue();

    hashCode = hashCode * 8191 + ((isSetSessionHandle()) ? 131071 : 524287);
    if (isSetSessionHandle()) hashCode = hashCode * 8191 + sessionHandle.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfiguration()) ? 131071 : 524287);
    if (isSetConfiguration()) hashCode = hashCode * 8191 + configuration.hashCode();

    hashCode = hashCode * 8191 + ((isSetInitialNamespace()) ? 131071 : 524287);
    if (isSetInitialNamespace()) hashCode = hashCode * 8191 + initialNamespace.hashCode();

    hashCode = hashCode * 8191 + ((isSetCanUseMultipleCatalogs()) ? 131071 : 524287);
    if (isSetCanUseMultipleCatalogs())
      hashCode = hashCode * 8191 + ((canUseMultipleCatalogs) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetGetInfos()) ? 131071 : 524287);
    if (isSetGetInfos()) hashCode = hashCode * 8191 + getInfos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TOpenSessionResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetServerProtocolVersion(), other.isSetServerProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerProtocolVersion()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.serverProtocolVersion, other.serverProtocolVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSessionHandle(), other.isSetSessionHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionHandle()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.sessionHandle, other.sessionHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConfiguration(), other.isSetConfiguration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfiguration()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetInitialNamespace(), other.isSetInitialNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialNamespace()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.initialNamespace, other.initialNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(
            isSetCanUseMultipleCatalogs(), other.isSetCanUseMultipleCatalogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanUseMultipleCatalogs()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.canUseMultipleCatalogs, other.canUseMultipleCatalogs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGetInfos(), other.isSetGetInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getInfos, other.getInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOpenSessionResp(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverProtocolVersion:");
    if (this.serverProtocolVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.serverProtocolVersion);
    }
    first = false;
    if (isSetSessionHandle()) {
      if (!first) sb.append(", ");
      sb.append("sessionHandle:");
      if (this.sessionHandle == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionHandle);
      }
      first = false;
    }
    if (isSetConfiguration()) {
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
    }
    if (isSetInitialNamespace()) {
      if (!first) sb.append(", ");
      sb.append("initialNamespace:");
      if (this.initialNamespace == null) {
        sb.append("null");
      } else {
        sb.append(this.initialNamespace);
      }
      first = false;
    }
    if (isSetCanUseMultipleCatalogs()) {
      if (!first) sb.append(", ");
      sb.append("canUseMultipleCatalogs:");
      sb.append(this.canUseMultipleCatalogs);
      first = false;
    }
    if (isSetGetInfos()) {
      if (!first) sb.append(", ");
      sb.append("getInfos:");
      if (this.getInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.getInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'status' was not present! Struct: " + toString());
    }
    if (serverProtocolVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'serverProtocolVersion' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (sessionHandle != null) {
      sessionHandle.validate();
    }
    if (initialNamespace != null) {
      initialNamespace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOpenSessionRespStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOpenSessionRespStandardScheme getScheme() {
      return new TOpenSessionRespStandardScheme();
    }
  }

  private static class TOpenSessionRespStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TOpenSessionResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOpenSessionResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverProtocolVersion =
                  org.apache.hive.service.rpc.thrift.TProtocolVersion.findByValue(iprot.readI32());
              struct.setServerProtocolVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionHandle = new TSessionHandle();
              struct.sessionHandle.read(iprot);
              struct.setSessionHandleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map260 = iprot.readMapBegin();
                struct.configuration =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map260.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key261;
                @org.apache.thrift.annotation.Nullable java.lang.String _val262;
                for (int _i263 = 0; _i263 < _map260.size; ++_i263) {
                  _key261 = iprot.readString();
                  _val262 = iprot.readString();
                  struct.configuration.put(_key261, _val262);
                }
                iprot.readMapEnd();
              }
              struct.setConfigurationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1284: // INITIAL_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.initialNamespace = new TNamespace();
              struct.initialNamespace.read(iprot);
              struct.setInitialNamespaceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1285: // CAN_USE_MULTIPLE_CATALOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canUseMultipleCatalogs = iprot.readBool();
              struct.setCanUseMultipleCatalogsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // GET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.getInfos = new java.util.ArrayList<TGetInfoValue>(_list264.size);
                @org.apache.thrift.annotation.Nullable TGetInfoValue _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266) {
                  _elem265 = new TGetInfoValue();
                  _elem265.read(iprot);
                  struct.getInfos.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setGetInfosIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOpenSessionResp struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.serverProtocolVersion != null) {
        oprot.writeFieldBegin(SERVER_PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.serverProtocolVersion.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sessionHandle != null) {
        if (struct.isSetSessionHandle()) {
          oprot.writeFieldBegin(SESSION_HANDLE_FIELD_DESC);
          struct.sessionHandle.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.configuration != null) {
        if (struct.isSetConfiguration()) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING,
                    org.apache.thrift.protocol.TType.STRING,
                    struct.configuration.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter267 :
                struct.configuration.entrySet()) {
              oprot.writeString(_iter267.getKey());
              oprot.writeString(_iter267.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.getInfos != null) {
        if (struct.isSetGetInfos()) {
          oprot.writeFieldBegin(GET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, struct.getInfos.size()));
            for (TGetInfoValue _iter268 : struct.getInfos) {
              _iter268.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.initialNamespace != null) {
        if (struct.isSetInitialNamespace()) {
          oprot.writeFieldBegin(INITIAL_NAMESPACE_FIELD_DESC);
          struct.initialNamespace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        oprot.writeFieldBegin(CAN_USE_MULTIPLE_CATALOGS_FIELD_DESC);
        oprot.writeBool(struct.canUseMultipleCatalogs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TOpenSessionRespTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOpenSessionRespTupleScheme getScheme() {
      return new TOpenSessionRespTupleScheme();
    }
  }

  private static class TOpenSessionRespTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TOpenSessionResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOpenSessionResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      oprot.writeI32(struct.serverProtocolVersion.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSessionHandle()) {
        optionals.set(0);
      }
      if (struct.isSetConfiguration()) {
        optionals.set(1);
      }
      if (struct.isSetInitialNamespace()) {
        optionals.set(2);
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        optionals.set(3);
      }
      if (struct.isSetGetInfos()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSessionHandle()) {
        struct.sessionHandle.write(oprot);
      }
      if (struct.isSetConfiguration()) {
        {
          oprot.writeI32(struct.configuration.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter269 :
              struct.configuration.entrySet()) {
            oprot.writeString(_iter269.getKey());
            oprot.writeString(_iter269.getValue());
          }
        }
      }
      if (struct.isSetInitialNamespace()) {
        struct.initialNamespace.write(oprot);
      }
      if (struct.isSetCanUseMultipleCatalogs()) {
        oprot.writeBool(struct.canUseMultipleCatalogs);
      }
      if (struct.isSetGetInfos()) {
        {
          oprot.writeI32(struct.getInfos.size());
          for (TGetInfoValue _iter270 : struct.getInfos) {
            _iter270.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOpenSessionResp struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      struct.serverProtocolVersion =
          org.apache.hive.service.rpc.thrift.TProtocolVersion.findByValue(iprot.readI32());
      struct.setServerProtocolVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sessionHandle = new TSessionHandle();
        struct.sessionHandle.read(iprot);
        struct.setSessionHandleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map271 =
              iprot.readMapBegin(
                  org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
          struct.configuration =
              new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map271.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key272;
          @org.apache.thrift.annotation.Nullable java.lang.String _val273;
          for (int _i274 = 0; _i274 < _map271.size; ++_i274) {
            _key272 = iprot.readString();
            _val273 = iprot.readString();
            struct.configuration.put(_key272, _val273);
          }
        }
        struct.setConfigurationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.initialNamespace = new TNamespace();
        struct.initialNamespace.read(iprot);
        struct.setInitialNamespaceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.canUseMultipleCatalogs = iprot.readBool();
        struct.setCanUseMultipleCatalogsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list275 =
              iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.getInfos = new java.util.ArrayList<TGetInfoValue>(_list275.size);
          @org.apache.thrift.annotation.Nullable TGetInfoValue _elem276;
          for (int _i277 = 0; _i277 < _list275.size; ++_i277) {
            _elem276 = new TGetInfoValue();
            _elem276.read(iprot);
            struct.getInfos.add(_elem276);
          }
        }
        struct.setGetInfosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
