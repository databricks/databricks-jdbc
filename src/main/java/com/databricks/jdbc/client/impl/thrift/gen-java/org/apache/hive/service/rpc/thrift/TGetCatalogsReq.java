/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.hive.service.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.19.0)",
    date = "2024-02-23")
public class TGetCatalogsReq
    implements org.apache.thrift.TBase<TGetCatalogsReq, TGetCatalogsReq._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TGetCatalogsReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TGetCatalogsReq");

  private static final org.apache.thrift.protocol.TField SESSION_HANDLE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionHandle", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField GET_DIRECT_RESULTS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "getDirectResults", org.apache.thrift.protocol.TType.STRUCT, (short) 1281);
  private static final org.apache.thrift.protocol.TField RUN_ASYNC_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "runAsync", org.apache.thrift.protocol.TType.BOOL, (short) 1282);
  private static final org.apache.thrift.protocol.TField OPERATION_ID_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "operationId", org.apache.thrift.protocol.TType.STRUCT, (short) 3329);
  private static final org.apache.thrift.protocol.TField SESSION_CONF_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "sessionConf", org.apache.thrift.protocol.TType.STRUCT, (short) 3330);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new TGetCatalogsReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new TGetCatalogsReqTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle; // required
  public @org.apache.thrift.annotation.Nullable TSparkGetDirectResults getDirectResults; // optional
  public boolean runAsync; // optional
  public @org.apache.thrift.annotation.Nullable THandleIdentifier operationId; // optional
  public @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_HANDLE((short) 1, "sessionHandle"),
    GET_DIRECT_RESULTS((short) 1281, "getDirectResults"),
    RUN_ASYNC((short) 1282, "runAsync"),
    OPERATION_ID((short) 3329, "operationId"),
    SESSION_CONF((short) 3330, "sessionConf");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // SESSION_HANDLE
          return SESSION_HANDLE;
        case 1281: // GET_DIRECT_RESULTS
          return GET_DIRECT_RESULTS;
        case 1282: // RUN_ASYNC
          return RUN_ASYNC;
        case 3329: // OPERATION_ID
          return OPERATION_ID;
        case 3330: // SESSION_CONF
          return SESSION_CONF;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RUNASYNC_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {
    _Fields.GET_DIRECT_RESULTS, _Fields.RUN_ASYNC, _Fields.OPERATION_ID, _Fields.SESSION_CONF
  };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.SESSION_HANDLE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionHandle",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSessionHandle.class)));
    tmpMap.put(
        _Fields.GET_DIRECT_RESULTS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "getDirectResults",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TSparkGetDirectResults.class)));
    tmpMap.put(
        _Fields.RUN_ASYNC,
        new org.apache.thrift.meta_data.FieldMetaData(
            "runAsync",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.OPERATION_ID,
        new org.apache.thrift.meta_data.FieldMetaData(
            "operationId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, THandleIdentifier.class)));
    tmpMap.put(
        _Fields.SESSION_CONF,
        new org.apache.thrift.meta_data.FieldMetaData(
            "sessionConf",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, TDBSqlSessionConf.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        TGetCatalogsReq.class, metaDataMap);
  }

  public TGetCatalogsReq() {
    this.runAsync = false;
  }

  public TGetCatalogsReq(TSessionHandle sessionHandle) {
    this();
    this.sessionHandle = sessionHandle;
  }

  /** Performs a deep copy on <i>other</i>. */
  public TGetCatalogsReq(TGetCatalogsReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSessionHandle()) {
      this.sessionHandle = new TSessionHandle(other.sessionHandle);
    }
    if (other.isSetGetDirectResults()) {
      this.getDirectResults = new TSparkGetDirectResults(other.getDirectResults);
    }
    this.runAsync = other.runAsync;
    if (other.isSetOperationId()) {
      this.operationId = new THandleIdentifier(other.operationId);
    }
    if (other.isSetSessionConf()) {
      this.sessionConf = new TDBSqlSessionConf(other.sessionConf);
    }
  }

  @Override
  public TGetCatalogsReq deepCopy() {
    return new TGetCatalogsReq(this);
  }

  @Override
  public void clear() {
    this.sessionHandle = null;
    this.getDirectResults = null;
    this.runAsync = false;

    this.operationId = null;
    this.sessionConf = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TSessionHandle getSessionHandle() {
    return this.sessionHandle;
  }

  public TGetCatalogsReq setSessionHandle(
      @org.apache.thrift.annotation.Nullable TSessionHandle sessionHandle) {
    this.sessionHandle = sessionHandle;
    return this;
  }

  public void unsetSessionHandle() {
    this.sessionHandle = null;
  }

  /** Returns true if field sessionHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionHandle() {
    return this.sessionHandle != null;
  }

  public void setSessionHandleIsSet(boolean value) {
    if (!value) {
      this.sessionHandle = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSparkGetDirectResults getGetDirectResults() {
    return this.getDirectResults;
  }

  public TGetCatalogsReq setGetDirectResults(
      @org.apache.thrift.annotation.Nullable TSparkGetDirectResults getDirectResults) {
    this.getDirectResults = getDirectResults;
    return this;
  }

  public void unsetGetDirectResults() {
    this.getDirectResults = null;
  }

  /**
   * Returns true if field getDirectResults is set (has been assigned a value) and false otherwise
   */
  public boolean isSetGetDirectResults() {
    return this.getDirectResults != null;
  }

  public void setGetDirectResultsIsSet(boolean value) {
    if (!value) {
      this.getDirectResults = null;
    }
  }

  public boolean isRunAsync() {
    return this.runAsync;
  }

  public TGetCatalogsReq setRunAsync(boolean runAsync) {
    this.runAsync = runAsync;
    setRunAsyncIsSet(true);
    return this;
  }

  public void unsetRunAsync() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNASYNC_ISSET_ID);
  }

  /** Returns true if field runAsync is set (has been assigned a value) and false otherwise */
  public boolean isSetRunAsync() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNASYNC_ISSET_ID);
  }

  public void setRunAsyncIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNASYNC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THandleIdentifier getOperationId() {
    return this.operationId;
  }

  public TGetCatalogsReq setOperationId(
      @org.apache.thrift.annotation.Nullable THandleIdentifier operationId) {
    this.operationId = operationId;
    return this;
  }

  public void unsetOperationId() {
    this.operationId = null;
  }

  /** Returns true if field operationId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationId() {
    return this.operationId != null;
  }

  public void setOperationIdIsSet(boolean value) {
    if (!value) {
      this.operationId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDBSqlSessionConf getSessionConf() {
    return this.sessionConf;
  }

  public TGetCatalogsReq setSessionConf(
      @org.apache.thrift.annotation.Nullable TDBSqlSessionConf sessionConf) {
    this.sessionConf = sessionConf;
    return this;
  }

  public void unsetSessionConf() {
    this.sessionConf = null;
  }

  /** Returns true if field sessionConf is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionConf() {
    return this.sessionConf != null;
  }

  public void setSessionConfIsSet(boolean value) {
    if (!value) {
      this.sessionConf = null;
    }
  }

  @Override
  public void setFieldValue(
      _Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case SESSION_HANDLE:
        if (value == null) {
          unsetSessionHandle();
        } else {
          setSessionHandle((TSessionHandle) value);
        }
        break;

      case GET_DIRECT_RESULTS:
        if (value == null) {
          unsetGetDirectResults();
        } else {
          setGetDirectResults((TSparkGetDirectResults) value);
        }
        break;

      case RUN_ASYNC:
        if (value == null) {
          unsetRunAsync();
        } else {
          setRunAsync((java.lang.Boolean) value);
        }
        break;

      case OPERATION_ID:
        if (value == null) {
          unsetOperationId();
        } else {
          setOperationId((THandleIdentifier) value);
        }
        break;

      case SESSION_CONF:
        if (value == null) {
          unsetSessionConf();
        } else {
          setSessionConf((TDBSqlSessionConf) value);
        }
        break;
    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case SESSION_HANDLE:
        return getSessionHandle();

      case GET_DIRECT_RESULTS:
        return getGetDirectResults();

      case RUN_ASYNC:
        return isRunAsync();

      case OPERATION_ID:
        return getOperationId();

      case SESSION_CONF:
        return getSessionConf();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case SESSION_HANDLE:
        return isSetSessionHandle();
      case GET_DIRECT_RESULTS:
        return isSetGetDirectResults();
      case RUN_ASYNC:
        return isSetRunAsync();
      case OPERATION_ID:
        return isSetOperationId();
      case SESSION_CONF:
        return isSetSessionConf();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetCatalogsReq) return this.equals((TGetCatalogsReq) that);
    return false;
  }

  public boolean equals(TGetCatalogsReq that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_sessionHandle = true && this.isSetSessionHandle();
    boolean that_present_sessionHandle = true && that.isSetSessionHandle();
    if (this_present_sessionHandle || that_present_sessionHandle) {
      if (!(this_present_sessionHandle && that_present_sessionHandle)) return false;
      if (!this.sessionHandle.equals(that.sessionHandle)) return false;
    }

    boolean this_present_getDirectResults = true && this.isSetGetDirectResults();
    boolean that_present_getDirectResults = true && that.isSetGetDirectResults();
    if (this_present_getDirectResults || that_present_getDirectResults) {
      if (!(this_present_getDirectResults && that_present_getDirectResults)) return false;
      if (!this.getDirectResults.equals(that.getDirectResults)) return false;
    }

    boolean this_present_runAsync = true && this.isSetRunAsync();
    boolean that_present_runAsync = true && that.isSetRunAsync();
    if (this_present_runAsync || that_present_runAsync) {
      if (!(this_present_runAsync && that_present_runAsync)) return false;
      if (this.runAsync != that.runAsync) return false;
    }

    boolean this_present_operationId = true && this.isSetOperationId();
    boolean that_present_operationId = true && that.isSetOperationId();
    if (this_present_operationId || that_present_operationId) {
      if (!(this_present_operationId && that_present_operationId)) return false;
      if (!this.operationId.equals(that.operationId)) return false;
    }

    boolean this_present_sessionConf = true && this.isSetSessionConf();
    boolean that_present_sessionConf = true && that.isSetSessionConf();
    if (this_present_sessionConf || that_present_sessionConf) {
      if (!(this_present_sessionConf && that_present_sessionConf)) return false;
      if (!this.sessionConf.equals(that.sessionConf)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSessionHandle()) ? 131071 : 524287);
    if (isSetSessionHandle()) hashCode = hashCode * 8191 + sessionHandle.hashCode();

    hashCode = hashCode * 8191 + ((isSetGetDirectResults()) ? 131071 : 524287);
    if (isSetGetDirectResults()) hashCode = hashCode * 8191 + getDirectResults.hashCode();

    hashCode = hashCode * 8191 + ((isSetRunAsync()) ? 131071 : 524287);
    if (isSetRunAsync()) hashCode = hashCode * 8191 + ((runAsync) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOperationId()) ? 131071 : 524287);
    if (isSetOperationId()) hashCode = hashCode * 8191 + operationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionConf()) ? 131071 : 524287);
    if (isSetSessionConf()) hashCode = hashCode * 8191 + sessionConf.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetCatalogsReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionHandle(), other.isSetSessionHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionHandle()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.sessionHandle, other.sessionHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.compare(isSetGetDirectResults(), other.isSetGetDirectResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetDirectResults()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.getDirectResults, other.getDirectResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRunAsync(), other.isSetRunAsync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunAsync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runAsync, other.runAsync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperationId(), other.isSetOperationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationId, other.operationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSessionConf(), other.isSetSessionConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionConf, other.sessionConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetCatalogsReq(");
    boolean first = true;

    sb.append("sessionHandle:");
    if (this.sessionHandle == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionHandle);
    }
    first = false;
    if (isSetGetDirectResults()) {
      if (!first) sb.append(", ");
      sb.append("getDirectResults:");
      if (this.getDirectResults == null) {
        sb.append("null");
      } else {
        sb.append(this.getDirectResults);
      }
      first = false;
    }
    if (isSetRunAsync()) {
      if (!first) sb.append(", ");
      sb.append("runAsync:");
      sb.append(this.runAsync);
      first = false;
    }
    if (isSetOperationId()) {
      if (!first) sb.append(", ");
      sb.append("operationId:");
      if (this.operationId == null) {
        sb.append("null");
      } else {
        sb.append(this.operationId);
      }
      first = false;
    }
    if (isSetSessionConf()) {
      if (!first) sb.append(", ");
      sb.append("sessionConf:");
      if (this.sessionConf == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionConf);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionHandle == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'sessionHandle' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sessionHandle != null) {
      sessionHandle.validate();
    }
    if (getDirectResults != null) {
      getDirectResults.validate();
    }
    if (operationId != null) {
      operationId.validate();
    }
    if (sessionConf != null) {
      sessionConf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetCatalogsReqStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetCatalogsReqStandardScheme getScheme() {
      return new TGetCatalogsReqStandardScheme();
    }
  }

  private static class TGetCatalogsReqStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<TGetCatalogsReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetCatalogsReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionHandle = new TSessionHandle();
              struct.sessionHandle.read(iprot);
              struct.setSessionHandleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1281: // GET_DIRECT_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.getDirectResults = new TSparkGetDirectResults();
              struct.getDirectResults.read(iprot);
              struct.setGetDirectResultsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1282: // RUN_ASYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.runAsync = iprot.readBool();
              struct.setRunAsyncIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3329: // OPERATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.operationId = new THandleIdentifier();
              struct.operationId.read(iprot);
              struct.setOperationIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3330: // SESSION_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionConf = new TDBSqlSessionConf();
              struct.sessionConf.read(iprot);
              struct.setSessionConfIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetCatalogsReq struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sessionHandle != null) {
        oprot.writeFieldBegin(SESSION_HANDLE_FIELD_DESC);
        struct.sessionHandle.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.getDirectResults != null) {
        if (struct.isSetGetDirectResults()) {
          oprot.writeFieldBegin(GET_DIRECT_RESULTS_FIELD_DESC);
          struct.getDirectResults.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRunAsync()) {
        oprot.writeFieldBegin(RUN_ASYNC_FIELD_DESC);
        oprot.writeBool(struct.runAsync);
        oprot.writeFieldEnd();
      }
      if (struct.operationId != null) {
        if (struct.isSetOperationId()) {
          oprot.writeFieldBegin(OPERATION_ID_FIELD_DESC);
          struct.operationId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionConf != null) {
        if (struct.isSetSessionConf()) {
          oprot.writeFieldBegin(SESSION_CONF_FIELD_DESC);
          struct.sessionConf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TGetCatalogsReqTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetCatalogsReqTupleScheme getScheme() {
      return new TGetCatalogsReqTupleScheme();
    }
  }

  private static class TGetCatalogsReqTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<TGetCatalogsReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetCatalogsReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionHandle.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGetDirectResults()) {
        optionals.set(0);
      }
      if (struct.isSetRunAsync()) {
        optionals.set(1);
      }
      if (struct.isSetOperationId()) {
        optionals.set(2);
      }
      if (struct.isSetSessionConf()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGetDirectResults()) {
        struct.getDirectResults.write(oprot);
      }
      if (struct.isSetRunAsync()) {
        oprot.writeBool(struct.runAsync);
      }
      if (struct.isSetOperationId()) {
        struct.operationId.write(oprot);
      }
      if (struct.isSetSessionConf()) {
        struct.sessionConf.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetCatalogsReq struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionHandle = new TSessionHandle();
      struct.sessionHandle.read(iprot);
      struct.setSessionHandleIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.getDirectResults = new TSparkGetDirectResults();
        struct.getDirectResults.read(iprot);
        struct.setGetDirectResultsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.runAsync = iprot.readBool();
        struct.setRunAsyncIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operationId = new THandleIdentifier();
        struct.operationId.read(iprot);
        struct.setOperationIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sessionConf = new TDBSqlSessionConf();
        struct.sessionConf.read(iprot);
        struct.setSessionConfIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
